// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcmd_cmn.proto

#ifndef PROTOBUF_dcmd_5fcmn_2eproto__INCLUDED
#define PROTOBUF_dcmd_5fcmn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dcmd_api {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dcmd_5fcmn_2eproto();
void protobuf_AssignDesc_dcmd_5fcmn_2eproto();
void protobuf_ShutdownFile_dcmd_5fcmn_2eproto();

class KeyValue;
class SubTaskInfo;
class OprInfo;
class SubTaskProcess;
class TaskInfo;
class AgentInfo;
class AgentOprCmdReply;

enum DcmdMsgType {
  MTYPE_AGENT_REPORT = 1,
  MTYPE_AGENT_REPORT_R = 2,
  MTYPE_AGENT_HEATBEAT = 3,
  MTYPE_CENTER_MASTER_NOTICE = 5,
  MTYPE_CENTER_MASTER_NOTICE_R = 6,
  MTYPE_CENTER_SUBTASK_CMD = 7,
  MTYPE_CENTER_SUBTASK_CMD_R = 8,
  MTYPE_AGENT_SUBTASK_PROCESS = 9,
  MTYPE_AGENT_SUBTASK_CMD_RESULT = 11,
  MTYPE_AGENT_SUBTASK_CMD_RESULT_R = 12,
  MTYPE_CENTER_OPR_CMD = 13,
  MTYPE_CENTER_OPR_CMD_R = 14,
  MTYPE_CENTER_AGENT_SUBTASK_OUTPUT = 15,
  MTYPE_CENTER_AGENT_SUBTASK_OUTPUT_R = 16,
  MTYPE_CENTER_AGENT_RUNNING_TASK = 17,
  MTYPE_CENTER_AGENT_RUNNING_TASK_R = 18,
  MTYPE_CENTER_AGENT_RUNNING_OPR = 19,
  MTYPE_CENTER_AGENT_RUNNING_OPR_R = 20,
  MTYPE_UI_AGENT_SUBTASK_OUTPUT = 51,
  MTYPE_UI_AGENT_SUBTASK_OUTPUT_R = 52,
  MTYPE_UI_AGENT_RUNNING_SUBTASK = 53,
  MTYPE_UI_AGENT_RUNNING_SUBTASK_R = 54,
  MTYPE_UI_AGENT_RUNNING_OPR = 55,
  MTYPE_UI_AGENT_RUNNING_OPR_R = 56,
  MTYPE_UI_EXEC_OPR = 57,
  MTYPE_UI_EXEC_OPR_R = 58,
  MTYPE_UI_EXEC_DUP_OPR = 59,
  MTYPE_UI_EXEC_DUP_OPR_R = 60,
  MTYPE_UI_AGENT_INFO = 61,
  MTYPE_UI_AGENT_INFO_R = 62,
  MTYPE_UI_INVALID_AGENT = 63,
  MTYPE_UI_INVALID_AGENT_R = 64,
  MTYPE_UI_TASK_CMD_INFO = 65,
  MTYPE_UI_TASK_CMD_INFO_R = 66,
  MTYPE_UI_OPR_CMD_INFO = 67,
  MTYPE_UI_OPR_CMD_INFO_R = 68,
  MTYPE_UI_SUBTASK_PROCESS = 69,
  MTYPE_UI_SUBTASK_PROCESS_R = 70,
  MTYPE_UI_EXEC_TASK = 71,
  MTYPE_UI_EXEC_TASK_R = 72,
  MTYPE_UI_FETCH_AGENT_HOSTNAME = 73,
  MTYPE_UI_FETCH_AGENT_HOSTNAME_R = 74,
  MTYPE_UI_AUTH_INVALID_AGENT = 75,
  MTYPE_UI_AUTH_INVALID_AGENT_R = 76,
  MTYPE_UI_SCRIPTS = 77,
  MTYPE_UI_SCRIPTS_R = 78,
  MTYPE_UI_SCRIPT_INFO = 79,
  MTYPE_UI_SCRIPT_INFO_R = 80,
  MTYPE_INVALID_MTYPE = 101,
  MTYPE_CENTER_INTERNAL_CONN = 103,
  MTYPE_CENTER_INTERNAL_CONN_R = 104
};
bool DcmdMsgType_IsValid(int value);
const DcmdMsgType DcmdMsgType_MIN = MTYPE_AGENT_REPORT;
const DcmdMsgType DcmdMsgType_MAX = MTYPE_CENTER_INTERNAL_CONN_R;
const int DcmdMsgType_ARRAYSIZE = DcmdMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DcmdMsgType_descriptor();
inline const ::std::string& DcmdMsgType_Name(DcmdMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DcmdMsgType_descriptor(), value);
}
inline bool DcmdMsgType_Parse(
    const ::std::string& name, DcmdMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DcmdMsgType>(
    DcmdMsgType_descriptor(), name, value);
}
enum DcmdState {
  DCMD_STATE_SUCCESS = 0,
  DCMD_STATE_NO_MASTER = 1,
  DCMD_STATE_WRONG_MASTER = 2,
  DCMD_STATE_NO_TASK = 3,
  DCMD_STATE_NO_SUBTASK = 4,
  DCMD_STATE_HOST_LOST = 5,
  DCMD_STATE_FAILED = 6
};
bool DcmdState_IsValid(int value);
const DcmdState DcmdState_MIN = DCMD_STATE_SUCCESS;
const DcmdState DcmdState_MAX = DCMD_STATE_FAILED;
const int DcmdState_ARRAYSIZE = DcmdState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DcmdState_descriptor();
inline const ::std::string& DcmdState_Name(DcmdState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DcmdState_descriptor(), value);
}
inline bool DcmdState_Parse(
    const ::std::string& name, DcmdState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DcmdState>(
    DcmdState_descriptor(), name, value);
}
enum CmdType {
  CMD_UNKNOWN = 0,
  CMD_START_TASK = 1,
  CMD_PAUSE_TASK = 2,
  CMD_RESUME_TASK = 3,
  CMD_RETRY_TASK = 4,
  CMD_FINISH_TASK = 5,
  CMD_ADD_NODE = 6,
  CMD_CANCEL_SUBTASK = 7,
  CMD_CANCEL_SVR_SUBTASK = 8,
  CMD_DO_SUBTASK = 9,
  CMD_REDO_TASK = 10,
  CMD_REDO_SVR_POOL = 11,
  CMD_REDO_SUBTASK = 12,
  CMD_IGNORE_SUBTASK = 13,
  CMD_FREEZE_TASK = 14,
  CMD_UNFREEZE_TASK = 15,
  CMD_UPDATE_TASK = 16,
  CMD_DEL_NODE = 17
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = CMD_UNKNOWN;
const CmdType CmdType_MAX = CMD_DEL_NODE;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum AgentState {
  AGENT_UN_CONNECTED = 0,
  AGENT_UN_AUTH = 1,
  AGENT_UN_REPORTED = 2,
  AGENT_CONNECTED = 3
};
bool AgentState_IsValid(int value);
const AgentState AgentState_MIN = AGENT_UN_CONNECTED;
const AgentState AgentState_MAX = AGENT_CONNECTED;
const int AgentState_ARRAYSIZE = AgentState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AgentState_descriptor();
inline const ::std::string& AgentState_Name(AgentState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AgentState_descriptor(), value);
}
inline bool AgentState_Parse(
    const ::std::string& name, AgentState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AgentState>(
    AgentState_descriptor(), name, value);
}
enum TaskState {
  TASK_INIT = 0,
  TASK_DOING = 1,
  TASK_FAILED = 2,
  TASK_FINISHED = 3,
  TASK_FINISHED_WITH_FAILED = 4
};
bool TaskState_IsValid(int value);
const TaskState TaskState_MIN = TASK_INIT;
const TaskState TaskState_MAX = TASK_FINISHED_WITH_FAILED;
const int TaskState_ARRAYSIZE = TaskState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskState_descriptor();
inline const ::std::string& TaskState_Name(TaskState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskState_descriptor(), value);
}
inline bool TaskState_Parse(
    const ::std::string& name, TaskState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskState>(
    TaskState_descriptor(), name, value);
}
enum SubTaskState {
  SUBTASK_INIT = 0,
  SUBTASK_DOING = 1,
  SUBTASK_FINISHED = 2,
  SUBTASK_FAILED = 3
};
bool SubTaskState_IsValid(int value);
const SubTaskState SubTaskState_MIN = SUBTASK_INIT;
const SubTaskState SubTaskState_MAX = SUBTASK_FAILED;
const int SubTaskState_ARRAYSIZE = SubTaskState_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubTaskState_descriptor();
inline const ::std::string& SubTaskState_Name(SubTaskState value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubTaskState_descriptor(), value);
}
inline bool SubTaskState_Parse(
    const ::std::string& name, SubTaskState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubTaskState>(
    SubTaskState_descriptor(), name, value);
}
enum CommandState {
  COMMAND_DOING = 0,
  COMMAND_SUCCESS = 1,
  COMMAND_FAILED = 2
};
bool CommandState_IsValid(int value);
const CommandState CommandState_MIN = COMMAND_DOING;
const CommandState CommandState_MAX = COMMAND_FAILED;
const int CommandState_ARRAYSIZE = CommandState_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandState_descriptor();
inline const ::std::string& CommandState_Name(CommandState value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandState_descriptor(), value);
}
inline bool CommandState_Parse(
    const ::std::string& name, CommandState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandState>(
    CommandState_descriptor(), name, value);
}
enum UiScriptType {
  SCRIPT_TYPE_TASK_CMD = 1,
  SCRIPT_TYPE_OPR_CMD = 2,
  SCRIPT_TYPE_CRON = 3,
  SCRIPT_TYPE_MONITOR = 4
};
bool UiScriptType_IsValid(int value);
const UiScriptType UiScriptType_MIN = SCRIPT_TYPE_TASK_CMD;
const UiScriptType UiScriptType_MAX = SCRIPT_TYPE_MONITOR;
const int UiScriptType_ARRAYSIZE = UiScriptType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UiScriptType_descriptor();
inline const ::std::string& UiScriptType_Name(UiScriptType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UiScriptType_descriptor(), value);
}
inline bool UiScriptType_Parse(
    const ::std::string& name, UiScriptType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UiScriptType>(
    UiScriptType_descriptor(), name, value);
}
// ===================================================================

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:dcmd_api.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fcmn_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class SubTaskInfo : public ::google::protobuf::Message {
 public:
  SubTaskInfo();
  virtual ~SubTaskInfo();

  SubTaskInfo(const SubTaskInfo& from);

  inline SubTaskInfo& operator=(const SubTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubTaskInfo& default_instance();

  void Swap(SubTaskInfo* other);

  // implements Message ----------------------------------------------

  SubTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubTaskInfo& from);
  void MergeFrom(const SubTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes app_name = 1;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 1;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const void* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // required bytes svr_name = 2;
  inline bool has_svr_name() const;
  inline void clear_svr_name();
  static const int kSvrNameFieldNumber = 2;
  inline const ::std::string& svr_name() const;
  inline void set_svr_name(const ::std::string& value);
  inline void set_svr_name(const char* value);
  inline void set_svr_name(const void* value, size_t size);
  inline ::std::string* mutable_svr_name();
  inline ::std::string* release_svr_name();
  inline void set_allocated_svr_name(::std::string* svr_name);

  // required bytes svr_pool = 3;
  inline bool has_svr_pool() const;
  inline void clear_svr_pool();
  static const int kSvrPoolFieldNumber = 3;
  inline const ::std::string& svr_pool() const;
  inline void set_svr_pool(const ::std::string& value);
  inline void set_svr_pool(const char* value);
  inline void set_svr_pool(const void* value, size_t size);
  inline ::std::string* mutable_svr_pool();
  inline ::std::string* release_svr_pool();
  inline void set_allocated_svr_pool(::std::string* svr_pool);

  // required bytes task_cmd = 4;
  inline bool has_task_cmd() const;
  inline void clear_task_cmd();
  static const int kTaskCmdFieldNumber = 4;
  inline const ::std::string& task_cmd() const;
  inline void set_task_cmd(const ::std::string& value);
  inline void set_task_cmd(const char* value);
  inline void set_task_cmd(const void* value, size_t size);
  inline ::std::string* mutable_task_cmd();
  inline ::std::string* release_task_cmd();
  inline void set_allocated_task_cmd(::std::string* task_cmd);

  // required bytes task_id = 5;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 5;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const void* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // required bytes subtask_id = 6;
  inline bool has_subtask_id() const;
  inline void clear_subtask_id();
  static const int kSubtaskIdFieldNumber = 6;
  inline const ::std::string& subtask_id() const;
  inline void set_subtask_id(const ::std::string& value);
  inline void set_subtask_id(const char* value);
  inline void set_subtask_id(const void* value, size_t size);
  inline ::std::string* mutable_subtask_id();
  inline ::std::string* release_subtask_id();
  inline void set_allocated_subtask_id(::std::string* subtask_id);

  // required bytes cmd_id = 7;
  inline bool has_cmd_id() const;
  inline void clear_cmd_id();
  static const int kCmdIdFieldNumber = 7;
  inline const ::std::string& cmd_id() const;
  inline void set_cmd_id(const ::std::string& value);
  inline void set_cmd_id(const char* value);
  inline void set_cmd_id(const void* value, size_t size);
  inline ::std::string* mutable_cmd_id();
  inline ::std::string* release_cmd_id();
  inline void set_allocated_cmd_id(::std::string* cmd_id);

  // @@protoc_insertion_point(class_scope:dcmd_api.SubTaskInfo)
 private:
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_svr_name();
  inline void clear_has_svr_name();
  inline void set_has_svr_pool();
  inline void clear_has_svr_pool();
  inline void set_has_task_cmd();
  inline void clear_has_task_cmd();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_subtask_id();
  inline void clear_has_subtask_id();
  inline void set_has_cmd_id();
  inline void clear_has_cmd_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* app_name_;
  ::std::string* svr_name_;
  ::std::string* svr_pool_;
  ::std::string* task_cmd_;
  ::std::string* task_id_;
  ::std::string* subtask_id_;
  ::std::string* cmd_id_;
  friend void  protobuf_AddDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fcmn_2eproto();

  void InitAsDefaultInstance();
  static SubTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class OprInfo : public ::google::protobuf::Message {
 public:
  OprInfo();
  virtual ~OprInfo();

  OprInfo(const OprInfo& from);

  inline OprInfo& operator=(const OprInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OprInfo& default_instance();

  void Swap(OprInfo* other);

  // implements Message ----------------------------------------------

  OprInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OprInfo& from);
  void MergeFrom(const OprInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes start_time = 2;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // required int32 running_second = 3;
  inline bool has_running_second() const;
  inline void clear_running_second();
  static const int kRunningSecondFieldNumber = 3;
  inline ::google::protobuf::int32 running_second() const;
  inline void set_running_second(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dcmd_api.OprInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_running_second();
  inline void clear_has_running_second();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* start_time_;
  ::google::protobuf::int32 running_second_;
  friend void  protobuf_AddDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fcmn_2eproto();

  void InitAsDefaultInstance();
  static OprInfo* default_instance_;
};
// -------------------------------------------------------------------

class SubTaskProcess : public ::google::protobuf::Message {
 public:
  SubTaskProcess();
  virtual ~SubTaskProcess();

  SubTaskProcess(const SubTaskProcess& from);

  inline SubTaskProcess& operator=(const SubTaskProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubTaskProcess& default_instance();

  void Swap(SubTaskProcess* other);

  // implements Message ----------------------------------------------

  SubTaskProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubTaskProcess& from);
  void MergeFrom(const SubTaskProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes subtask_id = 1;
  inline bool has_subtask_id() const;
  inline void clear_subtask_id();
  static const int kSubtaskIdFieldNumber = 1;
  inline const ::std::string& subtask_id() const;
  inline void set_subtask_id(const ::std::string& value);
  inline void set_subtask_id(const char* value);
  inline void set_subtask_id(const void* value, size_t size);
  inline ::std::string* mutable_subtask_id();
  inline ::std::string* release_subtask_id();
  inline void set_allocated_subtask_id(::std::string* subtask_id);

  // optional bytes process = 2;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 2;
  inline const ::std::string& process() const;
  inline void set_process(const ::std::string& value);
  inline void set_process(const char* value);
  inline void set_process(const void* value, size_t size);
  inline ::std::string* mutable_process();
  inline ::std::string* release_process();
  inline void set_allocated_process(::std::string* process);

  // @@protoc_insertion_point(class_scope:dcmd_api.SubTaskProcess)
 private:
  inline void set_has_subtask_id();
  inline void clear_has_subtask_id();
  inline void set_has_process();
  inline void clear_has_process();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* subtask_id_;
  ::std::string* process_;
  friend void  protobuf_AddDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fcmn_2eproto();

  void InitAsDefaultInstance();
  static SubTaskProcess* default_instance_;
};
// -------------------------------------------------------------------

class TaskInfo : public ::google::protobuf::Message {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfo& default_instance();

  void Swap(TaskInfo* other);

  // implements Message ----------------------------------------------

  TaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const void* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // required .dcmd_api.TaskState task_state = 2;
  inline bool has_task_state() const;
  inline void clear_task_state();
  static const int kTaskStateFieldNumber = 2;
  inline ::dcmd_api::TaskState task_state() const;
  inline void set_task_state(::dcmd_api::TaskState value);

  // required bytes depand_task_id = 3;
  inline bool has_depand_task_id() const;
  inline void clear_depand_task_id();
  static const int kDepandTaskIdFieldNumber = 3;
  inline const ::std::string& depand_task_id() const;
  inline void set_depand_task_id(const ::std::string& value);
  inline void set_depand_task_id(const char* value);
  inline void set_depand_task_id(const void* value, size_t size);
  inline ::std::string* mutable_depand_task_id();
  inline ::std::string* release_depand_task_id();
  inline void set_allocated_depand_task_id(::std::string* depand_task_id);

  // optional bytes depand_task_name = 4;
  inline bool has_depand_task_name() const;
  inline void clear_depand_task_name();
  static const int kDepandTaskNameFieldNumber = 4;
  inline const ::std::string& depand_task_name() const;
  inline void set_depand_task_name(const ::std::string& value);
  inline void set_depand_task_name(const char* value);
  inline void set_depand_task_name(const void* value, size_t size);
  inline ::std::string* mutable_depand_task_name();
  inline ::std::string* release_depand_task_name();
  inline void set_allocated_depand_task_name(::std::string* depand_task_name);

  // optional bool freezed = 5;
  inline bool has_freezed() const;
  inline void clear_freezed();
  static const int kFreezedFieldNumber = 5;
  inline bool freezed() const;
  inline void set_freezed(bool value);

  // optional bool valid = 6;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 6;
  inline bool valid() const;
  inline void set_valid(bool value);

  // optional bool pause = 7;
  inline bool has_pause() const;
  inline void clear_pause();
  static const int kPauseFieldNumber = 7;
  inline bool pause() const;
  inline void set_pause(bool value);

  // optional bytes err = 8;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 8;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // optional int32 success_subtask = 9;
  inline bool has_success_subtask() const;
  inline void clear_success_subtask();
  static const int kSuccessSubtaskFieldNumber = 9;
  inline ::google::protobuf::int32 success_subtask() const;
  inline void set_success_subtask(::google::protobuf::int32 value);

  // optional int32 failed_subtask = 10;
  inline bool has_failed_subtask() const;
  inline void clear_failed_subtask();
  static const int kFailedSubtaskFieldNumber = 10;
  inline ::google::protobuf::int32 failed_subtask() const;
  inline void set_failed_subtask(::google::protobuf::int32 value);

  // optional int32 doing_subtask = 11;
  inline bool has_doing_subtask() const;
  inline void clear_doing_subtask();
  static const int kDoingSubtaskFieldNumber = 11;
  inline ::google::protobuf::int32 doing_subtask() const;
  inline void set_doing_subtask(::google::protobuf::int32 value);

  // optional int32 undo_subtask = 12;
  inline bool has_undo_subtask() const;
  inline void clear_undo_subtask();
  static const int kUndoSubtaskFieldNumber = 12;
  inline ::google::protobuf::int32 undo_subtask() const;
  inline void set_undo_subtask(::google::protobuf::int32 value);

  // optional int32 ignore_doing_subtask = 13;
  inline bool has_ignore_doing_subtask() const;
  inline void clear_ignore_doing_subtask();
  static const int kIgnoreDoingSubtaskFieldNumber = 13;
  inline ::google::protobuf::int32 ignore_doing_subtask() const;
  inline void set_ignore_doing_subtask(::google::protobuf::int32 value);

  // optional int32 ignore_failed_subtask = 14;
  inline bool has_ignore_failed_subtask() const;
  inline void clear_ignore_failed_subtask();
  static const int kIgnoreFailedSubtaskFieldNumber = 14;
  inline ::google::protobuf::int32 ignore_failed_subtask() const;
  inline void set_ignore_failed_subtask(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dcmd_api.TaskInfo)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_task_state();
  inline void clear_has_task_state();
  inline void set_has_depand_task_id();
  inline void clear_has_depand_task_id();
  inline void set_has_depand_task_name();
  inline void clear_has_depand_task_name();
  inline void set_has_freezed();
  inline void clear_has_freezed();
  inline void set_has_valid();
  inline void clear_has_valid();
  inline void set_has_pause();
  inline void clear_has_pause();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_success_subtask();
  inline void clear_has_success_subtask();
  inline void set_has_failed_subtask();
  inline void clear_has_failed_subtask();
  inline void set_has_doing_subtask();
  inline void clear_has_doing_subtask();
  inline void set_has_undo_subtask();
  inline void clear_has_undo_subtask();
  inline void set_has_ignore_doing_subtask();
  inline void clear_has_ignore_doing_subtask();
  inline void set_has_ignore_failed_subtask();
  inline void clear_has_ignore_failed_subtask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_id_;
  ::std::string* depand_task_id_;
  ::std::string* depand_task_name_;
  int task_state_;
  bool freezed_;
  bool valid_;
  bool pause_;
  ::std::string* err_;
  ::google::protobuf::int32 success_subtask_;
  ::google::protobuf::int32 failed_subtask_;
  ::google::protobuf::int32 doing_subtask_;
  ::google::protobuf::int32 undo_subtask_;
  ::google::protobuf::int32 ignore_doing_subtask_;
  ::google::protobuf::int32 ignore_failed_subtask_;
  friend void  protobuf_AddDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fcmn_2eproto();

  void InitAsDefaultInstance();
  static TaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class AgentInfo : public ::google::protobuf::Message {
 public:
  AgentInfo();
  virtual ~AgentInfo();

  AgentInfo(const AgentInfo& from);

  inline AgentInfo& operator=(const AgentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentInfo& default_instance();

  void Swap(AgentInfo* other);

  // implements Message ----------------------------------------------

  AgentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgentInfo& from);
  void MergeFrom(const AgentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required .dcmd_api.AgentState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::AgentState state() const;
  inline void set_state(::dcmd_api::AgentState value);

  // optional bytes version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional bytes connected_ip = 4;
  inline bool has_connected_ip() const;
  inline void clear_connected_ip();
  static const int kConnectedIpFieldNumber = 4;
  inline const ::std::string& connected_ip() const;
  inline void set_connected_ip(const ::std::string& value);
  inline void set_connected_ip(const char* value);
  inline void set_connected_ip(const void* value, size_t size);
  inline ::std::string* mutable_connected_ip();
  inline ::std::string* release_connected_ip();
  inline void set_allocated_connected_ip(::std::string* connected_ip);

  // optional bytes reported_ip = 5;
  inline bool has_reported_ip() const;
  inline void clear_reported_ip();
  static const int kReportedIpFieldNumber = 5;
  inline const ::std::string& reported_ip() const;
  inline void set_reported_ip(const ::std::string& value);
  inline void set_reported_ip(const char* value);
  inline void set_reported_ip(const void* value, size_t size);
  inline ::std::string* mutable_reported_ip();
  inline ::std::string* release_reported_ip();
  inline void set_allocated_reported_ip(::std::string* reported_ip);

  // optional bytes hostname = 6;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 6;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // @@protoc_insertion_point(class_scope:dcmd_api.AgentInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_connected_ip();
  inline void clear_has_connected_ip();
  inline void set_has_reported_ip();
  inline void clear_has_reported_ip();
  inline void set_has_hostname();
  inline void clear_has_hostname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::std::string* version_;
  ::std::string* connected_ip_;
  ::std::string* reported_ip_;
  ::std::string* hostname_;
  int state_;
  friend void  protobuf_AddDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fcmn_2eproto();

  void InitAsDefaultInstance();
  static AgentInfo* default_instance_;
};
// -------------------------------------------------------------------

class AgentOprCmdReply : public ::google::protobuf::Message {
 public:
  AgentOprCmdReply();
  virtual ~AgentOprCmdReply();

  AgentOprCmdReply(const AgentOprCmdReply& from);

  inline AgentOprCmdReply& operator=(const AgentOprCmdReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentOprCmdReply& default_instance();

  void Swap(AgentOprCmdReply* other);

  // implements Message ----------------------------------------------

  AgentOprCmdReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgentOprCmdReply& from);
  void MergeFrom(const AgentOprCmdReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .dcmd_api.DcmdState state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // required bytes result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const void* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // required bytes err = 3;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 3;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // optional bytes ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dcmd_api.AgentOprCmdReply)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* result_;
  ::std::string* err_;
  int state_;
  ::google::protobuf::int32 status_;
  ::std::string* ip_;
  friend void  protobuf_AddDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fcmn_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fcmn_2eproto();

  void InitAsDefaultInstance();
  static AgentOprCmdReply* default_instance_;
};
// ===================================================================


// ===================================================================

// KeyValue

// required bytes key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:dcmd_api.KeyValue.key)
  return *key_;
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.KeyValue.key)
  return key_;
}
inline ::std::string* KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.KeyValue.key)
}

// required bytes value = 2;
inline bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:dcmd_api.KeyValue.value)
  return *value_;
}
inline void KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.KeyValue.value)
}
inline void KeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.KeyValue.value)
}
inline ::std::string* KeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.KeyValue.value)
  return value_;
}
inline ::std::string* KeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.KeyValue.value)
}

// -------------------------------------------------------------------

// SubTaskInfo

// required bytes app_name = 1;
inline bool SubTaskInfo::has_app_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubTaskInfo::set_has_app_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubTaskInfo::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubTaskInfo::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& SubTaskInfo::app_name() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskInfo.app_name)
  return *app_name_;
}
inline void SubTaskInfo::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskInfo.app_name)
}
inline void SubTaskInfo::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskInfo.app_name)
}
inline void SubTaskInfo::set_app_name(const void* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskInfo.app_name)
}
inline ::std::string* SubTaskInfo::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskInfo.app_name)
  return app_name_;
}
inline ::std::string* SubTaskInfo::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskInfo::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskInfo.app_name)
}

// required bytes svr_name = 2;
inline bool SubTaskInfo::has_svr_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubTaskInfo::set_has_svr_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubTaskInfo::clear_has_svr_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubTaskInfo::clear_svr_name() {
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_->clear();
  }
  clear_has_svr_name();
}
inline const ::std::string& SubTaskInfo::svr_name() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskInfo.svr_name)
  return *svr_name_;
}
inline void SubTaskInfo::set_svr_name(const ::std::string& value) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskInfo.svr_name)
}
inline void SubTaskInfo::set_svr_name(const char* value) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskInfo.svr_name)
}
inline void SubTaskInfo::set_svr_name(const void* value, size_t size) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskInfo.svr_name)
}
inline ::std::string* SubTaskInfo::mutable_svr_name() {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskInfo.svr_name)
  return svr_name_;
}
inline ::std::string* SubTaskInfo::release_svr_name() {
  clear_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svr_name_;
    svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskInfo::set_allocated_svr_name(::std::string* svr_name) {
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_name_;
  }
  if (svr_name) {
    set_has_svr_name();
    svr_name_ = svr_name;
  } else {
    clear_has_svr_name();
    svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskInfo.svr_name)
}

// required bytes svr_pool = 3;
inline bool SubTaskInfo::has_svr_pool() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubTaskInfo::set_has_svr_pool() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubTaskInfo::clear_has_svr_pool() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubTaskInfo::clear_svr_pool() {
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_->clear();
  }
  clear_has_svr_pool();
}
inline const ::std::string& SubTaskInfo::svr_pool() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskInfo.svr_pool)
  return *svr_pool_;
}
inline void SubTaskInfo::set_svr_pool(const ::std::string& value) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskInfo.svr_pool)
}
inline void SubTaskInfo::set_svr_pool(const char* value) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskInfo.svr_pool)
}
inline void SubTaskInfo::set_svr_pool(const void* value, size_t size) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskInfo.svr_pool)
}
inline ::std::string* SubTaskInfo::mutable_svr_pool() {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskInfo.svr_pool)
  return svr_pool_;
}
inline ::std::string* SubTaskInfo::release_svr_pool() {
  clear_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svr_pool_;
    svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskInfo::set_allocated_svr_pool(::std::string* svr_pool) {
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_pool_;
  }
  if (svr_pool) {
    set_has_svr_pool();
    svr_pool_ = svr_pool;
  } else {
    clear_has_svr_pool();
    svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskInfo.svr_pool)
}

// required bytes task_cmd = 4;
inline bool SubTaskInfo::has_task_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubTaskInfo::set_has_task_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubTaskInfo::clear_has_task_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubTaskInfo::clear_task_cmd() {
  if (task_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_->clear();
  }
  clear_has_task_cmd();
}
inline const ::std::string& SubTaskInfo::task_cmd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskInfo.task_cmd)
  return *task_cmd_;
}
inline void SubTaskInfo::set_task_cmd(const ::std::string& value) {
  set_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_ = new ::std::string;
  }
  task_cmd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskInfo.task_cmd)
}
inline void SubTaskInfo::set_task_cmd(const char* value) {
  set_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_ = new ::std::string;
  }
  task_cmd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskInfo.task_cmd)
}
inline void SubTaskInfo::set_task_cmd(const void* value, size_t size) {
  set_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_ = new ::std::string;
  }
  task_cmd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskInfo.task_cmd)
}
inline ::std::string* SubTaskInfo::mutable_task_cmd() {
  set_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskInfo.task_cmd)
  return task_cmd_;
}
inline ::std::string* SubTaskInfo::release_task_cmd() {
  clear_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_cmd_;
    task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskInfo::set_allocated_task_cmd(::std::string* task_cmd) {
  if (task_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_cmd_;
  }
  if (task_cmd) {
    set_has_task_cmd();
    task_cmd_ = task_cmd;
  } else {
    clear_has_task_cmd();
    task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskInfo.task_cmd)
}

// required bytes task_id = 5;
inline bool SubTaskInfo::has_task_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubTaskInfo::set_has_task_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubTaskInfo::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubTaskInfo::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& SubTaskInfo::task_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskInfo.task_id)
  return *task_id_;
}
inline void SubTaskInfo::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskInfo.task_id)
}
inline void SubTaskInfo::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskInfo.task_id)
}
inline void SubTaskInfo::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskInfo.task_id)
}
inline ::std::string* SubTaskInfo::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskInfo.task_id)
  return task_id_;
}
inline ::std::string* SubTaskInfo::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskInfo::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskInfo.task_id)
}

// required bytes subtask_id = 6;
inline bool SubTaskInfo::has_subtask_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SubTaskInfo::set_has_subtask_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SubTaskInfo::clear_has_subtask_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SubTaskInfo::clear_subtask_id() {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_->clear();
  }
  clear_has_subtask_id();
}
inline const ::std::string& SubTaskInfo::subtask_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskInfo.subtask_id)
  return *subtask_id_;
}
inline void SubTaskInfo::set_subtask_id(const ::std::string& value) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskInfo.subtask_id)
}
inline void SubTaskInfo::set_subtask_id(const char* value) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskInfo.subtask_id)
}
inline void SubTaskInfo::set_subtask_id(const void* value, size_t size) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskInfo.subtask_id)
}
inline ::std::string* SubTaskInfo::mutable_subtask_id() {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskInfo.subtask_id)
  return subtask_id_;
}
inline ::std::string* SubTaskInfo::release_subtask_id() {
  clear_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subtask_id_;
    subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskInfo::set_allocated_subtask_id(::std::string* subtask_id) {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (subtask_id) {
    set_has_subtask_id();
    subtask_id_ = subtask_id;
  } else {
    clear_has_subtask_id();
    subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskInfo.subtask_id)
}

// required bytes cmd_id = 7;
inline bool SubTaskInfo::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SubTaskInfo::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SubTaskInfo::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SubTaskInfo::clear_cmd_id() {
  if (cmd_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_id_->clear();
  }
  clear_has_cmd_id();
}
inline const ::std::string& SubTaskInfo::cmd_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskInfo.cmd_id)
  return *cmd_id_;
}
inline void SubTaskInfo::set_cmd_id(const ::std::string& value) {
  set_has_cmd_id();
  if (cmd_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_id_ = new ::std::string;
  }
  cmd_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskInfo.cmd_id)
}
inline void SubTaskInfo::set_cmd_id(const char* value) {
  set_has_cmd_id();
  if (cmd_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_id_ = new ::std::string;
  }
  cmd_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskInfo.cmd_id)
}
inline void SubTaskInfo::set_cmd_id(const void* value, size_t size) {
  set_has_cmd_id();
  if (cmd_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_id_ = new ::std::string;
  }
  cmd_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskInfo.cmd_id)
}
inline ::std::string* SubTaskInfo::mutable_cmd_id() {
  set_has_cmd_id();
  if (cmd_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmd_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskInfo.cmd_id)
  return cmd_id_;
}
inline ::std::string* SubTaskInfo::release_cmd_id() {
  clear_has_cmd_id();
  if (cmd_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmd_id_;
    cmd_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskInfo::set_allocated_cmd_id(::std::string* cmd_id) {
  if (cmd_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_id_;
  }
  if (cmd_id) {
    set_has_cmd_id();
    cmd_id_ = cmd_id;
  } else {
    clear_has_cmd_id();
    cmd_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskInfo.cmd_id)
}

// -------------------------------------------------------------------

// OprInfo

// required bytes name = 1;
inline bool OprInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OprInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OprInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OprInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OprInfo::name() const {
  // @@protoc_insertion_point(field_get:dcmd_api.OprInfo.name)
  return *name_;
}
inline void OprInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.OprInfo.name)
}
inline void OprInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.OprInfo.name)
}
inline void OprInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.OprInfo.name)
}
inline ::std::string* OprInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.OprInfo.name)
  return name_;
}
inline ::std::string* OprInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OprInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.OprInfo.name)
}

// required bytes start_time = 2;
inline bool OprInfo::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OprInfo::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OprInfo::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OprInfo::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& OprInfo::start_time() const {
  // @@protoc_insertion_point(field_get:dcmd_api.OprInfo.start_time)
  return *start_time_;
}
inline void OprInfo::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.OprInfo.start_time)
}
inline void OprInfo::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.OprInfo.start_time)
}
inline void OprInfo::set_start_time(const void* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.OprInfo.start_time)
}
inline ::std::string* OprInfo::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    start_time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.OprInfo.start_time)
  return start_time_;
}
inline ::std::string* OprInfo::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OprInfo::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.OprInfo.start_time)
}

// required int32 running_second = 3;
inline bool OprInfo::has_running_second() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OprInfo::set_has_running_second() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OprInfo::clear_has_running_second() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OprInfo::clear_running_second() {
  running_second_ = 0;
  clear_has_running_second();
}
inline ::google::protobuf::int32 OprInfo::running_second() const {
  // @@protoc_insertion_point(field_get:dcmd_api.OprInfo.running_second)
  return running_second_;
}
inline void OprInfo::set_running_second(::google::protobuf::int32 value) {
  set_has_running_second();
  running_second_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.OprInfo.running_second)
}

// -------------------------------------------------------------------

// SubTaskProcess

// required bytes subtask_id = 1;
inline bool SubTaskProcess::has_subtask_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubTaskProcess::set_has_subtask_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubTaskProcess::clear_has_subtask_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubTaskProcess::clear_subtask_id() {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_->clear();
  }
  clear_has_subtask_id();
}
inline const ::std::string& SubTaskProcess::subtask_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskProcess.subtask_id)
  return *subtask_id_;
}
inline void SubTaskProcess::set_subtask_id(const ::std::string& value) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskProcess.subtask_id)
}
inline void SubTaskProcess::set_subtask_id(const char* value) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskProcess.subtask_id)
}
inline void SubTaskProcess::set_subtask_id(const void* value, size_t size) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskProcess.subtask_id)
}
inline ::std::string* SubTaskProcess::mutable_subtask_id() {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskProcess.subtask_id)
  return subtask_id_;
}
inline ::std::string* SubTaskProcess::release_subtask_id() {
  clear_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subtask_id_;
    subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskProcess::set_allocated_subtask_id(::std::string* subtask_id) {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (subtask_id) {
    set_has_subtask_id();
    subtask_id_ = subtask_id;
  } else {
    clear_has_subtask_id();
    subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskProcess.subtask_id)
}

// optional bytes process = 2;
inline bool SubTaskProcess::has_process() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubTaskProcess::set_has_process() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubTaskProcess::clear_has_process() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubTaskProcess::clear_process() {
  if (process_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_->clear();
  }
  clear_has_process();
}
inline const ::std::string& SubTaskProcess::process() const {
  // @@protoc_insertion_point(field_get:dcmd_api.SubTaskProcess.process)
  return *process_;
}
inline void SubTaskProcess::set_process(const ::std::string& value) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_ = new ::std::string;
  }
  process_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.SubTaskProcess.process)
}
inline void SubTaskProcess::set_process(const char* value) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_ = new ::std::string;
  }
  process_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.SubTaskProcess.process)
}
inline void SubTaskProcess::set_process(const void* value, size_t size) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_ = new ::std::string;
  }
  process_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.SubTaskProcess.process)
}
inline ::std::string* SubTaskProcess::mutable_process() {
  set_has_process();
  if (process_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    process_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.SubTaskProcess.process)
  return process_;
}
inline ::std::string* SubTaskProcess::release_process() {
  clear_has_process();
  if (process_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = process_;
    process_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SubTaskProcess::set_allocated_process(::std::string* process) {
  if (process_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete process_;
  }
  if (process) {
    set_has_process();
    process_ = process;
  } else {
    clear_has_process();
    process_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.SubTaskProcess.process)
}

// -------------------------------------------------------------------

// TaskInfo

// required bytes task_id = 1;
inline bool TaskInfo::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskInfo::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskInfo::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskInfo::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& TaskInfo::task_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.task_id)
  return *task_id_;
}
inline void TaskInfo::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.task_id)
}
inline void TaskInfo::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.TaskInfo.task_id)
}
inline void TaskInfo::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.TaskInfo.task_id)
}
inline ::std::string* TaskInfo::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.TaskInfo.task_id)
  return task_id_;
}
inline ::std::string* TaskInfo::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskInfo::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.TaskInfo.task_id)
}

// required .dcmd_api.TaskState task_state = 2;
inline bool TaskInfo::has_task_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskInfo::set_has_task_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskInfo::clear_has_task_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskInfo::clear_task_state() {
  task_state_ = 0;
  clear_has_task_state();
}
inline ::dcmd_api::TaskState TaskInfo::task_state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.task_state)
  return static_cast< ::dcmd_api::TaskState >(task_state_);
}
inline void TaskInfo::set_task_state(::dcmd_api::TaskState value) {
  assert(::dcmd_api::TaskState_IsValid(value));
  set_has_task_state();
  task_state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.task_state)
}

// required bytes depand_task_id = 3;
inline bool TaskInfo::has_depand_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskInfo::set_has_depand_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskInfo::clear_has_depand_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskInfo::clear_depand_task_id() {
  if (depand_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_id_->clear();
  }
  clear_has_depand_task_id();
}
inline const ::std::string& TaskInfo::depand_task_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.depand_task_id)
  return *depand_task_id_;
}
inline void TaskInfo::set_depand_task_id(const ::std::string& value) {
  set_has_depand_task_id();
  if (depand_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_id_ = new ::std::string;
  }
  depand_task_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.depand_task_id)
}
inline void TaskInfo::set_depand_task_id(const char* value) {
  set_has_depand_task_id();
  if (depand_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_id_ = new ::std::string;
  }
  depand_task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.TaskInfo.depand_task_id)
}
inline void TaskInfo::set_depand_task_id(const void* value, size_t size) {
  set_has_depand_task_id();
  if (depand_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_id_ = new ::std::string;
  }
  depand_task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.TaskInfo.depand_task_id)
}
inline ::std::string* TaskInfo::mutable_depand_task_id() {
  set_has_depand_task_id();
  if (depand_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.TaskInfo.depand_task_id)
  return depand_task_id_;
}
inline ::std::string* TaskInfo::release_depand_task_id() {
  clear_has_depand_task_id();
  if (depand_task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = depand_task_id_;
    depand_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskInfo::set_allocated_depand_task_id(::std::string* depand_task_id) {
  if (depand_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete depand_task_id_;
  }
  if (depand_task_id) {
    set_has_depand_task_id();
    depand_task_id_ = depand_task_id;
  } else {
    clear_has_depand_task_id();
    depand_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.TaskInfo.depand_task_id)
}

// optional bytes depand_task_name = 4;
inline bool TaskInfo::has_depand_task_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskInfo::set_has_depand_task_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskInfo::clear_has_depand_task_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskInfo::clear_depand_task_name() {
  if (depand_task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_name_->clear();
  }
  clear_has_depand_task_name();
}
inline const ::std::string& TaskInfo::depand_task_name() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.depand_task_name)
  return *depand_task_name_;
}
inline void TaskInfo::set_depand_task_name(const ::std::string& value) {
  set_has_depand_task_name();
  if (depand_task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_name_ = new ::std::string;
  }
  depand_task_name_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.depand_task_name)
}
inline void TaskInfo::set_depand_task_name(const char* value) {
  set_has_depand_task_name();
  if (depand_task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_name_ = new ::std::string;
  }
  depand_task_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.TaskInfo.depand_task_name)
}
inline void TaskInfo::set_depand_task_name(const void* value, size_t size) {
  set_has_depand_task_name();
  if (depand_task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_name_ = new ::std::string;
  }
  depand_task_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.TaskInfo.depand_task_name)
}
inline ::std::string* TaskInfo::mutable_depand_task_name() {
  set_has_depand_task_name();
  if (depand_task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    depand_task_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.TaskInfo.depand_task_name)
  return depand_task_name_;
}
inline ::std::string* TaskInfo::release_depand_task_name() {
  clear_has_depand_task_name();
  if (depand_task_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = depand_task_name_;
    depand_task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskInfo::set_allocated_depand_task_name(::std::string* depand_task_name) {
  if (depand_task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete depand_task_name_;
  }
  if (depand_task_name) {
    set_has_depand_task_name();
    depand_task_name_ = depand_task_name;
  } else {
    clear_has_depand_task_name();
    depand_task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.TaskInfo.depand_task_name)
}

// optional bool freezed = 5;
inline bool TaskInfo::has_freezed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskInfo::set_has_freezed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskInfo::clear_has_freezed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskInfo::clear_freezed() {
  freezed_ = false;
  clear_has_freezed();
}
inline bool TaskInfo::freezed() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.freezed)
  return freezed_;
}
inline void TaskInfo::set_freezed(bool value) {
  set_has_freezed();
  freezed_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.freezed)
}

// optional bool valid = 6;
inline bool TaskInfo::has_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskInfo::set_has_valid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskInfo::clear_has_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskInfo::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool TaskInfo::valid() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.valid)
  return valid_;
}
inline void TaskInfo::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.valid)
}

// optional bool pause = 7;
inline bool TaskInfo::has_pause() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskInfo::set_has_pause() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TaskInfo::clear_has_pause() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TaskInfo::clear_pause() {
  pause_ = false;
  clear_has_pause();
}
inline bool TaskInfo::pause() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.pause)
  return pause_;
}
inline void TaskInfo::set_pause(bool value) {
  set_has_pause();
  pause_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.pause)
}

// optional bytes err = 8;
inline bool TaskInfo::has_err() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TaskInfo::set_has_err() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TaskInfo::clear_has_err() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TaskInfo::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& TaskInfo::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.err)
  return *err_;
}
inline void TaskInfo::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.err)
}
inline void TaskInfo::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.TaskInfo.err)
}
inline void TaskInfo::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.TaskInfo.err)
}
inline ::std::string* TaskInfo::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.TaskInfo.err)
  return err_;
}
inline ::std::string* TaskInfo::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TaskInfo::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.TaskInfo.err)
}

// optional int32 success_subtask = 9;
inline bool TaskInfo::has_success_subtask() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TaskInfo::set_has_success_subtask() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TaskInfo::clear_has_success_subtask() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TaskInfo::clear_success_subtask() {
  success_subtask_ = 0;
  clear_has_success_subtask();
}
inline ::google::protobuf::int32 TaskInfo::success_subtask() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.success_subtask)
  return success_subtask_;
}
inline void TaskInfo::set_success_subtask(::google::protobuf::int32 value) {
  set_has_success_subtask();
  success_subtask_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.success_subtask)
}

// optional int32 failed_subtask = 10;
inline bool TaskInfo::has_failed_subtask() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TaskInfo::set_has_failed_subtask() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TaskInfo::clear_has_failed_subtask() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TaskInfo::clear_failed_subtask() {
  failed_subtask_ = 0;
  clear_has_failed_subtask();
}
inline ::google::protobuf::int32 TaskInfo::failed_subtask() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.failed_subtask)
  return failed_subtask_;
}
inline void TaskInfo::set_failed_subtask(::google::protobuf::int32 value) {
  set_has_failed_subtask();
  failed_subtask_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.failed_subtask)
}

// optional int32 doing_subtask = 11;
inline bool TaskInfo::has_doing_subtask() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TaskInfo::set_has_doing_subtask() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TaskInfo::clear_has_doing_subtask() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TaskInfo::clear_doing_subtask() {
  doing_subtask_ = 0;
  clear_has_doing_subtask();
}
inline ::google::protobuf::int32 TaskInfo::doing_subtask() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.doing_subtask)
  return doing_subtask_;
}
inline void TaskInfo::set_doing_subtask(::google::protobuf::int32 value) {
  set_has_doing_subtask();
  doing_subtask_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.doing_subtask)
}

// optional int32 undo_subtask = 12;
inline bool TaskInfo::has_undo_subtask() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TaskInfo::set_has_undo_subtask() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TaskInfo::clear_has_undo_subtask() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TaskInfo::clear_undo_subtask() {
  undo_subtask_ = 0;
  clear_has_undo_subtask();
}
inline ::google::protobuf::int32 TaskInfo::undo_subtask() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.undo_subtask)
  return undo_subtask_;
}
inline void TaskInfo::set_undo_subtask(::google::protobuf::int32 value) {
  set_has_undo_subtask();
  undo_subtask_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.undo_subtask)
}

// optional int32 ignore_doing_subtask = 13;
inline bool TaskInfo::has_ignore_doing_subtask() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TaskInfo::set_has_ignore_doing_subtask() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TaskInfo::clear_has_ignore_doing_subtask() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TaskInfo::clear_ignore_doing_subtask() {
  ignore_doing_subtask_ = 0;
  clear_has_ignore_doing_subtask();
}
inline ::google::protobuf::int32 TaskInfo::ignore_doing_subtask() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.ignore_doing_subtask)
  return ignore_doing_subtask_;
}
inline void TaskInfo::set_ignore_doing_subtask(::google::protobuf::int32 value) {
  set_has_ignore_doing_subtask();
  ignore_doing_subtask_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.ignore_doing_subtask)
}

// optional int32 ignore_failed_subtask = 14;
inline bool TaskInfo::has_ignore_failed_subtask() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TaskInfo::set_has_ignore_failed_subtask() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TaskInfo::clear_has_ignore_failed_subtask() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TaskInfo::clear_ignore_failed_subtask() {
  ignore_failed_subtask_ = 0;
  clear_has_ignore_failed_subtask();
}
inline ::google::protobuf::int32 TaskInfo::ignore_failed_subtask() const {
  // @@protoc_insertion_point(field_get:dcmd_api.TaskInfo.ignore_failed_subtask)
  return ignore_failed_subtask_;
}
inline void TaskInfo::set_ignore_failed_subtask(::google::protobuf::int32 value) {
  set_has_ignore_failed_subtask();
  ignore_failed_subtask_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.TaskInfo.ignore_failed_subtask)
}

// -------------------------------------------------------------------

// AgentInfo

// required bytes ip = 1;
inline bool AgentInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AgentInfo::ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentInfo.ip)
  return *ip_;
}
inline void AgentInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.AgentInfo.ip)
}
inline void AgentInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.AgentInfo.ip)
}
inline void AgentInfo::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.AgentInfo.ip)
}
inline ::std::string* AgentInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.AgentInfo.ip)
  return ip_;
}
inline ::std::string* AgentInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgentInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.AgentInfo.ip)
}

// required .dcmd_api.AgentState state = 2;
inline bool AgentInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::AgentState AgentInfo::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentInfo.state)
  return static_cast< ::dcmd_api::AgentState >(state_);
}
inline void AgentInfo::set_state(::dcmd_api::AgentState value) {
  assert(::dcmd_api::AgentState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.AgentInfo.state)
}

// optional bytes version = 3;
inline bool AgentInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgentInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgentInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgentInfo::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& AgentInfo::version() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentInfo.version)
  return *version_;
}
inline void AgentInfo::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.AgentInfo.version)
}
inline void AgentInfo::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.AgentInfo.version)
}
inline void AgentInfo::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.AgentInfo.version)
}
inline ::std::string* AgentInfo::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.AgentInfo.version)
  return version_;
}
inline ::std::string* AgentInfo::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgentInfo::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.AgentInfo.version)
}

// optional bytes connected_ip = 4;
inline bool AgentInfo::has_connected_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AgentInfo::set_has_connected_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AgentInfo::clear_has_connected_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AgentInfo::clear_connected_ip() {
  if (connected_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connected_ip_->clear();
  }
  clear_has_connected_ip();
}
inline const ::std::string& AgentInfo::connected_ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentInfo.connected_ip)
  return *connected_ip_;
}
inline void AgentInfo::set_connected_ip(const ::std::string& value) {
  set_has_connected_ip();
  if (connected_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connected_ip_ = new ::std::string;
  }
  connected_ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.AgentInfo.connected_ip)
}
inline void AgentInfo::set_connected_ip(const char* value) {
  set_has_connected_ip();
  if (connected_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connected_ip_ = new ::std::string;
  }
  connected_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.AgentInfo.connected_ip)
}
inline void AgentInfo::set_connected_ip(const void* value, size_t size) {
  set_has_connected_ip();
  if (connected_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connected_ip_ = new ::std::string;
  }
  connected_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.AgentInfo.connected_ip)
}
inline ::std::string* AgentInfo::mutable_connected_ip() {
  set_has_connected_ip();
  if (connected_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    connected_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.AgentInfo.connected_ip)
  return connected_ip_;
}
inline ::std::string* AgentInfo::release_connected_ip() {
  clear_has_connected_ip();
  if (connected_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = connected_ip_;
    connected_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgentInfo::set_allocated_connected_ip(::std::string* connected_ip) {
  if (connected_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete connected_ip_;
  }
  if (connected_ip) {
    set_has_connected_ip();
    connected_ip_ = connected_ip;
  } else {
    clear_has_connected_ip();
    connected_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.AgentInfo.connected_ip)
}

// optional bytes reported_ip = 5;
inline bool AgentInfo::has_reported_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AgentInfo::set_has_reported_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AgentInfo::clear_has_reported_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AgentInfo::clear_reported_ip() {
  if (reported_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reported_ip_->clear();
  }
  clear_has_reported_ip();
}
inline const ::std::string& AgentInfo::reported_ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentInfo.reported_ip)
  return *reported_ip_;
}
inline void AgentInfo::set_reported_ip(const ::std::string& value) {
  set_has_reported_ip();
  if (reported_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reported_ip_ = new ::std::string;
  }
  reported_ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.AgentInfo.reported_ip)
}
inline void AgentInfo::set_reported_ip(const char* value) {
  set_has_reported_ip();
  if (reported_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reported_ip_ = new ::std::string;
  }
  reported_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.AgentInfo.reported_ip)
}
inline void AgentInfo::set_reported_ip(const void* value, size_t size) {
  set_has_reported_ip();
  if (reported_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reported_ip_ = new ::std::string;
  }
  reported_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.AgentInfo.reported_ip)
}
inline ::std::string* AgentInfo::mutable_reported_ip() {
  set_has_reported_ip();
  if (reported_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reported_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.AgentInfo.reported_ip)
  return reported_ip_;
}
inline ::std::string* AgentInfo::release_reported_ip() {
  clear_has_reported_ip();
  if (reported_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reported_ip_;
    reported_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgentInfo::set_allocated_reported_ip(::std::string* reported_ip) {
  if (reported_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reported_ip_;
  }
  if (reported_ip) {
    set_has_reported_ip();
    reported_ip_ = reported_ip;
  } else {
    clear_has_reported_ip();
    reported_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.AgentInfo.reported_ip)
}

// optional bytes hostname = 6;
inline bool AgentInfo::has_hostname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AgentInfo::set_has_hostname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AgentInfo::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AgentInfo::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& AgentInfo::hostname() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentInfo.hostname)
  return *hostname_;
}
inline void AgentInfo::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.AgentInfo.hostname)
}
inline void AgentInfo::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.AgentInfo.hostname)
}
inline void AgentInfo::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.AgentInfo.hostname)
}
inline ::std::string* AgentInfo::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.AgentInfo.hostname)
  return hostname_;
}
inline ::std::string* AgentInfo::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgentInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.AgentInfo.hostname)
}

// -------------------------------------------------------------------

// AgentOprCmdReply

// required .dcmd_api.DcmdState state = 1;
inline bool AgentOprCmdReply::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentOprCmdReply::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentOprCmdReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentOprCmdReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState AgentOprCmdReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentOprCmdReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void AgentOprCmdReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.AgentOprCmdReply.state)
}

// required bytes result = 2;
inline bool AgentOprCmdReply::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentOprCmdReply::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentOprCmdReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentOprCmdReply::clear_result() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& AgentOprCmdReply::result() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentOprCmdReply.result)
  return *result_;
}
inline void AgentOprCmdReply::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.AgentOprCmdReply.result)
}
inline void AgentOprCmdReply::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.AgentOprCmdReply.result)
}
inline void AgentOprCmdReply::set_result(const void* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.AgentOprCmdReply.result)
}
inline ::std::string* AgentOprCmdReply::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.AgentOprCmdReply.result)
  return result_;
}
inline ::std::string* AgentOprCmdReply::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgentOprCmdReply::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.AgentOprCmdReply.result)
}

// required bytes err = 3;
inline bool AgentOprCmdReply::has_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgentOprCmdReply::set_has_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgentOprCmdReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgentOprCmdReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& AgentOprCmdReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentOprCmdReply.err)
  return *err_;
}
inline void AgentOprCmdReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.AgentOprCmdReply.err)
}
inline void AgentOprCmdReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.AgentOprCmdReply.err)
}
inline void AgentOprCmdReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.AgentOprCmdReply.err)
}
inline ::std::string* AgentOprCmdReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.AgentOprCmdReply.err)
  return err_;
}
inline ::std::string* AgentOprCmdReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgentOprCmdReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.AgentOprCmdReply.err)
}

// optional bytes ip = 4;
inline bool AgentOprCmdReply::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AgentOprCmdReply::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AgentOprCmdReply::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AgentOprCmdReply::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AgentOprCmdReply::ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentOprCmdReply.ip)
  return *ip_;
}
inline void AgentOprCmdReply::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.AgentOprCmdReply.ip)
}
inline void AgentOprCmdReply::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.AgentOprCmdReply.ip)
}
inline void AgentOprCmdReply::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.AgentOprCmdReply.ip)
}
inline ::std::string* AgentOprCmdReply::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.AgentOprCmdReply.ip)
  return ip_;
}
inline ::std::string* AgentOprCmdReply::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AgentOprCmdReply::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.AgentOprCmdReply.ip)
}

// optional int32 status = 5;
inline bool AgentOprCmdReply::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AgentOprCmdReply::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AgentOprCmdReply::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AgentOprCmdReply::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 AgentOprCmdReply::status() const {
  // @@protoc_insertion_point(field_get:dcmd_api.AgentOprCmdReply.status)
  return status_;
}
inline void AgentOprCmdReply::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.AgentOprCmdReply.status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcmd_api

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dcmd_api::DcmdMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcmd_api::DcmdMsgType>() {
  return ::dcmd_api::DcmdMsgType_descriptor();
}
template <> struct is_proto_enum< ::dcmd_api::DcmdState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcmd_api::DcmdState>() {
  return ::dcmd_api::DcmdState_descriptor();
}
template <> struct is_proto_enum< ::dcmd_api::CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcmd_api::CmdType>() {
  return ::dcmd_api::CmdType_descriptor();
}
template <> struct is_proto_enum< ::dcmd_api::AgentState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcmd_api::AgentState>() {
  return ::dcmd_api::AgentState_descriptor();
}
template <> struct is_proto_enum< ::dcmd_api::TaskState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcmd_api::TaskState>() {
  return ::dcmd_api::TaskState_descriptor();
}
template <> struct is_proto_enum< ::dcmd_api::SubTaskState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcmd_api::SubTaskState>() {
  return ::dcmd_api::SubTaskState_descriptor();
}
template <> struct is_proto_enum< ::dcmd_api::CommandState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcmd_api::CommandState>() {
  return ::dcmd_api::CommandState_descriptor();
}
template <> struct is_proto_enum< ::dcmd_api::UiScriptType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcmd_api::UiScriptType>() {
  return ::dcmd_api::UiScriptType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dcmd_5fcmn_2eproto__INCLUDED
