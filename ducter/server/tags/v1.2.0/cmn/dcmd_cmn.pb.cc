// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcmd_cmn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dcmd_cmn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dcmd_api {

namespace {

const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OprInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OprInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubTaskProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubTaskProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentOprCmdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentOprCmdReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DcmdMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DcmdState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AgentState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SubTaskState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UiScriptType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dcmd_5fcmn_2eproto() {
  protobuf_AddDesc_dcmd_5fcmn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dcmd_cmn.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValue_descriptor_ = file->message_type(0);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  SubTaskInfo_descriptor_ = file->message_type(1);
  static const int SubTaskInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, svr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, svr_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, task_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, cmd_id_),
  };
  SubTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubTaskInfo_descriptor_,
      SubTaskInfo::default_instance_,
      SubTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubTaskInfo));
  OprInfo_descriptor_ = file->message_type(2);
  static const int OprInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, running_second_),
  };
  OprInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OprInfo_descriptor_,
      OprInfo::default_instance_,
      OprInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OprInfo));
  SubTaskProcess_descriptor_ = file->message_type(3);
  static const int SubTaskProcess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskProcess, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskProcess, process_),
  };
  SubTaskProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubTaskProcess_descriptor_,
      SubTaskProcess::default_instance_,
      SubTaskProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubTaskProcess));
  TaskInfo_descriptor_ = file->message_type(4);
  static const int TaskInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, depand_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, depand_task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, freezed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, pause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, success_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, failed_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, doing_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, undo_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, ignore_doing_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, ignore_failed_subtask_),
  };
  TaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfo));
  AgentInfo_descriptor_ = file->message_type(5);
  static const int AgentInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, connected_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, reported_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, hostname_),
  };
  AgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentInfo_descriptor_,
      AgentInfo::default_instance_,
      AgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentInfo));
  AgentOprCmdReply_descriptor_ = file->message_type(6);
  static const int AgentOprCmdReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, status_),
  };
  AgentOprCmdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentOprCmdReply_descriptor_,
      AgentOprCmdReply::default_instance_,
      AgentOprCmdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentOprCmdReply));
  DcmdMsgType_descriptor_ = file->enum_type(0);
  DcmdState_descriptor_ = file->enum_type(1);
  CmdType_descriptor_ = file->enum_type(2);
  AgentState_descriptor_ = file->enum_type(3);
  TaskState_descriptor_ = file->enum_type(4);
  SubTaskState_descriptor_ = file->enum_type(5);
  CommandState_descriptor_ = file->enum_type(6);
  UiScriptType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dcmd_5fcmn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubTaskInfo_descriptor_, &SubTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OprInfo_descriptor_, &OprInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubTaskProcess_descriptor_, &SubTaskProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfo_descriptor_, &TaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentInfo_descriptor_, &AgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentOprCmdReply_descriptor_, &AgentOprCmdReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dcmd_5fcmn_2eproto() {
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete SubTaskInfo::default_instance_;
  delete SubTaskInfo_reflection_;
  delete OprInfo::default_instance_;
  delete OprInfo_reflection_;
  delete SubTaskProcess::default_instance_;
  delete SubTaskProcess_reflection_;
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
  delete AgentInfo::default_instance_;
  delete AgentInfo_reflection_;
  delete AgentOprCmdReply::default_instance_;
  delete AgentOprCmdReply_reflection_;
}

void protobuf_AddDesc_dcmd_5fcmn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016dcmd_cmn.proto\022\010dcmd_api\"&\n\010KeyValue\022\013"
    "\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\"\212\001\n\013SubTaskIn"
    "fo\022\020\n\010app_name\030\001 \002(\014\022\020\n\010svr_name\030\002 \002(\014\022\020"
    "\n\010svr_pool\030\003 \002(\014\022\020\n\010task_cmd\030\004 \002(\014\022\017\n\007ta"
    "sk_id\030\005 \002(\014\022\022\n\nsubtask_id\030\006 \002(\014\022\016\n\006cmd_i"
    "d\030\007 \002(\014\"C\n\007OprInfo\022\014\n\004name\030\001 \002(\014\022\022\n\nstar"
    "t_time\030\002 \002(\014\022\026\n\016running_second\030\003 \002(\005\"5\n\016"
    "SubTaskProcess\022\022\n\nsubtask_id\030\001 \002(\014\022\017\n\007pr"
    "ocess\030\002 \001(\014\"\315\002\n\010TaskInfo\022\017\n\007task_id\030\001 \002("
    "\014\022\'\n\ntask_state\030\002 \002(\0162\023.dcmd_api.TaskSta"
    "te\022\026\n\016depand_task_id\030\003 \002(\014\022\030\n\020depand_tas"
    "k_name\030\004 \001(\014\022\017\n\007freezed\030\005 \001(\010\022\r\n\005valid\030\006"
    " \001(\010\022\r\n\005pause\030\007 \001(\010\022\013\n\003err\030\010 \001(\014\022\027\n\017succ"
    "ess_subtask\030\t \001(\005\022\026\n\016failed_subtask\030\n \001("
    "\005\022\025\n\rdoing_subtask\030\013 \001(\005\022\024\n\014undo_subtask"
    "\030\014 \001(\005\022\034\n\024ignore_doing_subtask\030\r \001(\005\022\035\n\025"
    "ignore_failed_subtask\030\016 \001(\005\"\212\001\n\tAgentInf"
    "o\022\n\n\002ip\030\001 \002(\014\022#\n\005state\030\002 \002(\0162\024.dcmd_api."
    "AgentState\022\017\n\007version\030\003 \001(\014\022\024\n\014connected"
    "_ip\030\004 \001(\014\022\023\n\013reported_ip\030\005 \001(\014\022\020\n\010hostna"
    "me\030\006 \001(\014\"o\n\020AgentOprCmdReply\022\"\n\005state\030\001 "
    "\002(\0162\023.dcmd_api.DcmdState\022\016\n\006result\030\002 \002(\014"
    "\022\013\n\003err\030\003 \002(\014\022\n\n\002ip\030\004 \001(\014\022\016\n\006status\030\005 \001("
    "\005*\267\014\n\013DcmdMsgType\022\026\n\022MTYPE_AGENT_REPORT\020"
    "\001\022\030\n\024MTYPE_AGENT_REPORT_R\020\002\022\030\n\024MTYPE_AGE"
    "NT_HEATBEAT\020\003\022\036\n\032MTYPE_CENTER_MASTER_NOT"
    "ICE\020\005\022 \n\034MTYPE_CENTER_MASTER_NOTICE_R\020\006\022"
    "\034\n\030MTYPE_CENTER_SUBTASK_CMD\020\007\022\036\n\032MTYPE_C"
    "ENTER_SUBTASK_CMD_R\020\010\022\037\n\033MTYPE_AGENT_SUB"
    "TASK_PROCESS\020\t\022\"\n\036MTYPE_AGENT_SUBTASK_CM"
    "D_RESULT\020\013\022$\n MTYPE_AGENT_SUBTASK_CMD_RE"
    "SULT_R\020\014\022\030\n\024MTYPE_CENTER_OPR_CMD\020\r\022\032\n\026MT"
    "YPE_CENTER_OPR_CMD_R\020\016\022%\n!MTYPE_CENTER_A"
    "GENT_SUBTASK_OUTPUT\020\017\022\'\n#MTYPE_CENTER_AG"
    "ENT_SUBTASK_OUTPUT_R\020\020\022#\n\037MTYPE_CENTER_A"
    "GENT_RUNNING_TASK\020\021\022%\n!MTYPE_CENTER_AGEN"
    "T_RUNNING_TASK_R\020\022\022\"\n\036MTYPE_CENTER_AGENT"
    "_RUNNING_OPR\020\023\022$\n MTYPE_CENTER_AGENT_RUN"
    "NING_OPR_R\020\024\022!\n\035MTYPE_UI_AGENT_SUBTASK_O"
    "UTPUT\0203\022#\n\037MTYPE_UI_AGENT_SUBTASK_OUTPUT"
    "_R\0204\022\"\n\036MTYPE_UI_AGENT_RUNNING_SUBTASK\0205"
    "\022$\n MTYPE_UI_AGENT_RUNNING_SUBTASK_R\0206\022\036"
    "\n\032MTYPE_UI_AGENT_RUNNING_OPR\0207\022 \n\034MTYPE_"
    "UI_AGENT_RUNNING_OPR_R\0208\022\025\n\021MTYPE_UI_EXE"
    "C_OPR\0209\022\027\n\023MTYPE_UI_EXEC_OPR_R\020:\022\031\n\025MTYP"
    "E_UI_EXEC_DUP_OPR\020;\022\033\n\027MTYPE_UI_EXEC_DUP"
    "_OPR_R\020<\022\027\n\023MTYPE_UI_AGENT_INFO\020=\022\031\n\025MTY"
    "PE_UI_AGENT_INFO_R\020>\022\032\n\026MTYPE_UI_INVALID"
    "_AGENT\020\?\022\034\n\030MTYPE_UI_INVALID_AGENT_R\020@\022\032"
    "\n\026MTYPE_UI_TASK_CMD_INFO\020A\022\034\n\030MTYPE_UI_T"
    "ASK_CMD_INFO_R\020B\022\031\n\025MTYPE_UI_OPR_CMD_INF"
    "O\020C\022\033\n\027MTYPE_UI_OPR_CMD_INFO_R\020D\022\034\n\030MTYP"
    "E_UI_SUBTASK_PROCESS\020E\022\036\n\032MTYPE_UI_SUBTA"
    "SK_PROCESS_R\020F\022\026\n\022MTYPE_UI_EXEC_TASK\020G\022\030"
    "\n\024MTYPE_UI_EXEC_TASK_R\020H\022!\n\035MTYPE_UI_FET"
    "CH_AGENT_HOSTNAME\020I\022#\n\037MTYPE_UI_FETCH_AG"
    "ENT_HOSTNAME_R\020J\022\037\n\033MTYPE_UI_AUTH_INVALI"
    "D_AGENT\020K\022!\n\035MTYPE_UI_AUTH_INVALID_AGENT"
    "_R\020L\022\024\n\020MTYPE_UI_SCRIPTS\020M\022\026\n\022MTYPE_UI_S"
    "CRIPTS_R\020N\022\030\n\024MTYPE_UI_SCRIPT_INFO\020O\022\032\n\026"
    "MTYPE_UI_SCRIPT_INFO_R\020P\022\027\n\023MTYPE_INVALI"
    "D_MTYPE\020e\022\036\n\032MTYPE_CENTER_INTERNAL_CONN\020"
    "g\022 \n\034MTYPE_CENTER_INTERNAL_CONN_R\020h*\276\001\n\t"
    "DcmdState\022\026\n\022DCMD_STATE_SUCCESS\020\000\022\030\n\024DCM"
    "D_STATE_NO_MASTER\020\001\022\033\n\027DCMD_STATE_WRONG_"
    "MASTER\020\002\022\026\n\022DCMD_STATE_NO_TASK\020\003\022\031\n\025DCMD"
    "_STATE_NO_SUBTASK\020\004\022\030\n\024DCMD_STATE_HOST_L"
    "OST\020\005\022\025\n\021DCMD_STATE_FAILED\020\006*\205\003\n\007CmdType"
    "\022\017\n\013CMD_UNKNOWN\020\000\022\022\n\016CMD_START_TASK\020\001\022\022\n"
    "\016CMD_PAUSE_TASK\020\002\022\023\n\017CMD_RESUME_TASK\020\003\022\022"
    "\n\016CMD_RETRY_TASK\020\004\022\023\n\017CMD_FINISH_TASK\020\005\022"
    "\020\n\014CMD_ADD_NODE\020\006\022\026\n\022CMD_CANCEL_SUBTASK\020"
    "\007\022\032\n\026CMD_CANCEL_SVR_SUBTASK\020\010\022\022\n\016CMD_DO_"
    "SUBTASK\020\t\022\021\n\rCMD_REDO_TASK\020\n\022\025\n\021CMD_REDO"
    "_SVR_POOL\020\013\022\024\n\020CMD_REDO_SUBTASK\020\014\022\026\n\022CMD"
    "_IGNORE_SUBTASK\020\r\022\023\n\017CMD_FREEZE_TASK\020\016\022\025"
    "\n\021CMD_UNFREEZE_TASK\020\017\022\023\n\017CMD_UPDATE_TASK"
    "\020\020\022\020\n\014CMD_DEL_NODE\020\021*c\n\nAgentState\022\026\n\022AG"
    "ENT_UN_CONNECTED\020\000\022\021\n\rAGENT_UN_AUTH\020\001\022\025\n"
    "\021AGENT_UN_REPORTED\020\002\022\023\n\017AGENT_CONNECTED\020"
    "\003*m\n\tTaskState\022\r\n\tTASK_INIT\020\000\022\016\n\nTASK_DO"
    "ING\020\001\022\017\n\013TASK_FAILED\020\002\022\021\n\rTASK_FINISHED\020"
    "\003\022\035\n\031TASK_FINISHED_WITH_FAILED\020\004*]\n\014SubT"
    "askState\022\020\n\014SUBTASK_INIT\020\000\022\021\n\rSUBTASK_DO"
    "ING\020\001\022\024\n\020SUBTASK_FINISHED\020\002\022\022\n\016SUBTASK_F"
    "AILED\020\003*J\n\014CommandState\022\021\n\rCOMMAND_DOING"
    "\020\000\022\023\n\017COMMAND_SUCCESS\020\001\022\022\n\016COMMAND_FAILE"
    "D\020\002*p\n\014UiScriptType\022\030\n\024SCRIPT_TYPE_TASK_"
    "CMD\020\001\022\027\n\023SCRIPT_TYPE_OPR_CMD\020\002\022\024\n\020SCRIPT"
    "_TYPE_CRON\020\003\022\027\n\023SCRIPT_TYPE_MONITOR\020\004B\021\n"
    "\017com.cwinux.dcmd", 3616);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dcmd_cmn.proto", &protobuf_RegisterTypes);
  KeyValue::default_instance_ = new KeyValue();
  SubTaskInfo::default_instance_ = new SubTaskInfo();
  OprInfo::default_instance_ = new OprInfo();
  SubTaskProcess::default_instance_ = new SubTaskProcess();
  TaskInfo::default_instance_ = new TaskInfo();
  AgentInfo::default_instance_ = new AgentInfo();
  AgentOprCmdReply::default_instance_ = new AgentOprCmdReply();
  KeyValue::default_instance_->InitAsDefaultInstance();
  SubTaskInfo::default_instance_->InitAsDefaultInstance();
  OprInfo::default_instance_->InitAsDefaultInstance();
  SubTaskProcess::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  AgentInfo::default_instance_->InitAsDefaultInstance();
  AgentOprCmdReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dcmd_5fcmn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dcmd_5fcmn_2eproto {
  StaticDescriptorInitializer_dcmd_5fcmn_2eproto() {
    protobuf_AddDesc_dcmd_5fcmn_2eproto();
  }
} static_descriptor_initializer_dcmd_5fcmn_2eproto_;
const ::google::protobuf::EnumDescriptor* DcmdMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DcmdMsgType_descriptor_;
}
bool DcmdMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 101:
    case 103:
    case 104:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DcmdState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DcmdState_descriptor_;
}
bool DcmdState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AgentState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentState_descriptor_;
}
bool AgentState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskState_descriptor_;
}
bool TaskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubTaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubTaskState_descriptor_;
}
bool SubTaskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandState_descriptor_;
}
bool CommandState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UiScriptType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiScriptType_descriptor_;
}
bool UiScriptType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.KeyValue)
}

void KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:dcmd_api.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fcmn_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.KeyValue)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.KeyValue)
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.KeyValue)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.KeyValue)
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubTaskInfo::kAppNameFieldNumber;
const int SubTaskInfo::kSvrNameFieldNumber;
const int SubTaskInfo::kSvrPoolFieldNumber;
const int SubTaskInfo::kTaskCmdFieldNumber;
const int SubTaskInfo::kTaskIdFieldNumber;
const int SubTaskInfo::kSubtaskIdFieldNumber;
const int SubTaskInfo::kCmdIdFieldNumber;
#endif  // !_MSC_VER

SubTaskInfo::SubTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.SubTaskInfo)
}

void SubTaskInfo::InitAsDefaultInstance() {
}

SubTaskInfo::SubTaskInfo(const SubTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.SubTaskInfo)
}

void SubTaskInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubTaskInfo::~SubTaskInfo() {
  // @@protoc_insertion_point(destructor:dcmd_api.SubTaskInfo)
  SharedDtor();
}

void SubTaskInfo::SharedDtor() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_name_;
  }
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_pool_;
  }
  if (task_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_cmd_;
  }
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (cmd_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_id_;
  }
  if (this != default_instance_) {
  }
}

void SubTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubTaskInfo_descriptor_;
}

const SubTaskInfo& SubTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fcmn_2eproto();
  return *default_instance_;
}

SubTaskInfo* SubTaskInfo::default_instance_ = NULL;

SubTaskInfo* SubTaskInfo::New() const {
  return new SubTaskInfo;
}

void SubTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
    if (has_svr_name()) {
      if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_name_->clear();
      }
    }
    if (has_svr_pool()) {
      if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_pool_->clear();
      }
    }
    if (has_task_cmd()) {
      if (task_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_cmd_->clear();
      }
    }
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtask_id_->clear();
      }
    }
    if (has_cmd_id()) {
      if (cmd_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmd_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.SubTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes app_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_svr_name;
        break;
      }

      // required bytes svr_name = 2;
      case 2: {
        if (tag == 18) {
         parse_svr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svr_pool;
        break;
      }

      // required bytes svr_pool = 3;
      case 3: {
        if (tag == 26) {
         parse_svr_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_pool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_task_cmd;
        break;
      }

      // required bytes task_cmd = 4;
      case 4: {
        if (tag == 34) {
         parse_task_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_task_id;
        break;
      }

      // required bytes task_id = 5;
      case 5: {
        if (tag == 42) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_subtask_id;
        break;
      }

      // required bytes subtask_id = 6;
      case 6: {
        if (tag == 50) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subtask_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cmd_id;
        break;
      }

      // required bytes cmd_id = 7;
      case 7: {
        if (tag == 58) {
         parse_cmd_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.SubTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.SubTaskInfo)
  return false;
#undef DO_
}

void SubTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.SubTaskInfo)
  // required bytes app_name = 1;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->app_name(), output);
  }

  // required bytes svr_name = 2;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->svr_name(), output);
  }

  // required bytes svr_pool = 3;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->svr_pool(), output);
  }

  // required bytes task_cmd = 4;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->task_cmd(), output);
  }

  // required bytes task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->task_id(), output);
  }

  // required bytes subtask_id = 6;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->subtask_id(), output);
  }

  // required bytes cmd_id = 7;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->cmd_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.SubTaskInfo)
}

::google::protobuf::uint8* SubTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.SubTaskInfo)
  // required bytes app_name = 1;
  if (has_app_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->app_name(), target);
  }

  // required bytes svr_name = 2;
  if (has_svr_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->svr_name(), target);
  }

  // required bytes svr_pool = 3;
  if (has_svr_pool()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->svr_pool(), target);
  }

  // required bytes task_cmd = 4;
  if (has_task_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->task_cmd(), target);
  }

  // required bytes task_id = 5;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->task_id(), target);
  }

  // required bytes subtask_id = 6;
  if (has_subtask_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->subtask_id(), target);
  }

  // required bytes cmd_id = 7;
  if (has_cmd_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->cmd_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.SubTaskInfo)
  return target;
}

int SubTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes app_name = 1;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_name());
    }

    // required bytes svr_name = 2;
    if (has_svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_name());
    }

    // required bytes svr_pool = 3;
    if (has_svr_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_pool());
    }

    // required bytes task_cmd = 4;
    if (has_task_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_cmd());
    }

    // required bytes task_id = 5;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

    // required bytes subtask_id = 6;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subtask_id());
    }

    // required bytes cmd_id = 7;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubTaskInfo::MergeFrom(const SubTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_svr_name()) {
      set_svr_name(from.svr_name());
    }
    if (from.has_svr_pool()) {
      set_svr_pool(from.svr_pool());
    }
    if (from.has_task_cmd()) {
      set_task_cmd(from.task_cmd());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubTaskInfo::CopyFrom(const SubTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubTaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void SubTaskInfo::Swap(SubTaskInfo* other) {
  if (other != this) {
    std::swap(app_name_, other->app_name_);
    std::swap(svr_name_, other->svr_name_);
    std::swap(svr_pool_, other->svr_pool_);
    std::swap(task_cmd_, other->task_cmd_);
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(cmd_id_, other->cmd_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubTaskInfo_descriptor_;
  metadata.reflection = SubTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OprInfo::kNameFieldNumber;
const int OprInfo::kStartTimeFieldNumber;
const int OprInfo::kRunningSecondFieldNumber;
#endif  // !_MSC_VER

OprInfo::OprInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.OprInfo)
}

void OprInfo::InitAsDefaultInstance() {
}

OprInfo::OprInfo(const OprInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.OprInfo)
}

void OprInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  running_second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OprInfo::~OprInfo() {
  // @@protoc_insertion_point(destructor:dcmd_api.OprInfo)
  SharedDtor();
}

void OprInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (this != default_instance_) {
  }
}

void OprInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OprInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OprInfo_descriptor_;
}

const OprInfo& OprInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fcmn_2eproto();
  return *default_instance_;
}

OprInfo* OprInfo::default_instance_ = NULL;

OprInfo* OprInfo::New() const {
  return new OprInfo;
}

void OprInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    running_second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OprInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.OprInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_time;
        break;
      }

      // required bytes start_time = 2;
      case 2: {
        if (tag == 18) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_running_second;
        break;
      }

      // required int32 running_second = 3;
      case 3: {
        if (tag == 24) {
         parse_running_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &running_second_)));
          set_has_running_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.OprInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.OprInfo)
  return false;
#undef DO_
}

void OprInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.OprInfo)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // required bytes start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_time(), output);
  }

  // required int32 running_second = 3;
  if (has_running_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->running_second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.OprInfo)
}

::google::protobuf::uint8* OprInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.OprInfo)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required bytes start_time = 2;
  if (has_start_time()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_time(), target);
  }

  // required int32 running_second = 3;
  if (has_running_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->running_second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.OprInfo)
  return target;
}

int OprInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_time());
    }

    // required int32 running_second = 3;
    if (has_running_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->running_second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OprInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OprInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OprInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OprInfo::MergeFrom(const OprInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_running_second()) {
      set_running_second(from.running_second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OprInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OprInfo::CopyFrom(const OprInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OprInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OprInfo::Swap(OprInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(start_time_, other->start_time_);
    std::swap(running_second_, other->running_second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OprInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OprInfo_descriptor_;
  metadata.reflection = OprInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubTaskProcess::kSubtaskIdFieldNumber;
const int SubTaskProcess::kProcessFieldNumber;
#endif  // !_MSC_VER

SubTaskProcess::SubTaskProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.SubTaskProcess)
}

void SubTaskProcess::InitAsDefaultInstance() {
}

SubTaskProcess::SubTaskProcess(const SubTaskProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.SubTaskProcess)
}

void SubTaskProcess::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubTaskProcess::~SubTaskProcess() {
  // @@protoc_insertion_point(destructor:dcmd_api.SubTaskProcess)
  SharedDtor();
}

void SubTaskProcess::SharedDtor() {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (process_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete process_;
  }
  if (this != default_instance_) {
  }
}

void SubTaskProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubTaskProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubTaskProcess_descriptor_;
}

const SubTaskProcess& SubTaskProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fcmn_2eproto();
  return *default_instance_;
}

SubTaskProcess* SubTaskProcess::default_instance_ = NULL;

SubTaskProcess* SubTaskProcess::New() const {
  return new SubTaskProcess;
}

void SubTaskProcess::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtask_id_->clear();
      }
    }
    if (has_process()) {
      if (process_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        process_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubTaskProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.SubTaskProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes subtask_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subtask_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process;
        break;
      }

      // optional bytes process = 2;
      case 2: {
        if (tag == 18) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.SubTaskProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.SubTaskProcess)
  return false;
#undef DO_
}

void SubTaskProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.SubTaskProcess)
  // required bytes subtask_id = 1;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->subtask_id(), output);
  }

  // optional bytes process = 2;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.SubTaskProcess)
}

::google::protobuf::uint8* SubTaskProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.SubTaskProcess)
  // required bytes subtask_id = 1;
  if (has_subtask_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->subtask_id(), target);
  }

  // optional bytes process = 2;
  if (has_process()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.SubTaskProcess)
  return target;
}

int SubTaskProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes subtask_id = 1;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subtask_id());
    }

    // optional bytes process = 2;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubTaskProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubTaskProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubTaskProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubTaskProcess::MergeFrom(const SubTaskProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubTaskProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubTaskProcess::CopyFrom(const SubTaskProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubTaskProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SubTaskProcess::Swap(SubTaskProcess* other) {
  if (other != this) {
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubTaskProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubTaskProcess_descriptor_;
  metadata.reflection = SubTaskProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kTaskStateFieldNumber;
const int TaskInfo::kDepandTaskIdFieldNumber;
const int TaskInfo::kDepandTaskNameFieldNumber;
const int TaskInfo::kFreezedFieldNumber;
const int TaskInfo::kValidFieldNumber;
const int TaskInfo::kPauseFieldNumber;
const int TaskInfo::kErrFieldNumber;
const int TaskInfo::kSuccessSubtaskFieldNumber;
const int TaskInfo::kFailedSubtaskFieldNumber;
const int TaskInfo::kDoingSubtaskFieldNumber;
const int TaskInfo::kUndoSubtaskFieldNumber;
const int TaskInfo::kIgnoreDoingSubtaskFieldNumber;
const int TaskInfo::kIgnoreFailedSubtaskFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.TaskInfo)
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.TaskInfo)
}

void TaskInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_state_ = 0;
  depand_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depand_task_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  freezed_ = false;
  valid_ = false;
  pause_ = false;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_subtask_ = 0;
  failed_subtask_ = 0;
  doing_subtask_ = 0;
  undo_subtask_ = 0;
  ignore_doing_subtask_ = 0;
  ignore_failed_subtask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:dcmd_api.TaskInfo)
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (depand_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete depand_task_id_;
  }
  if (depand_task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete depand_task_name_;
  }
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fcmn_2eproto();
  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(task_state_, pause_);
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    if (has_depand_task_id()) {
      if (depand_task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        depand_task_id_->clear();
      }
    }
    if (has_depand_task_name()) {
      if (depand_task_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        depand_task_name_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(success_subtask_, ignore_failed_subtask_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.TaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_task_state;
        break;
      }

      // required .dcmd_api.TaskState task_state = 2;
      case 2: {
        if (tag == 16) {
         parse_task_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::TaskState_IsValid(value)) {
            set_task_state(static_cast< ::dcmd_api::TaskState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_depand_task_id;
        break;
      }

      // required bytes depand_task_id = 3;
      case 3: {
        if (tag == 26) {
         parse_depand_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_depand_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_depand_task_name;
        break;
      }

      // optional bytes depand_task_name = 4;
      case 4: {
        if (tag == 34) {
         parse_depand_task_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_depand_task_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_freezed;
        break;
      }

      // optional bool freezed = 5;
      case 5: {
        if (tag == 40) {
         parse_freezed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freezed_)));
          set_has_freezed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_valid;
        break;
      }

      // optional bool valid = 6;
      case 6: {
        if (tag == 48) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pause;
        break;
      }

      // optional bool pause = 7;
      case 7: {
        if (tag == 56) {
         parse_pause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pause_)));
          set_has_pause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_err;
        break;
      }

      // optional bytes err = 8;
      case 8: {
        if (tag == 66) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_success_subtask;
        break;
      }

      // optional int32 success_subtask = 9;
      case 9: {
        if (tag == 72) {
         parse_success_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_subtask_)));
          set_has_success_subtask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_failed_subtask;
        break;
      }

      // optional int32 failed_subtask = 10;
      case 10: {
        if (tag == 80) {
         parse_failed_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failed_subtask_)));
          set_has_failed_subtask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_doing_subtask;
        break;
      }

      // optional int32 doing_subtask = 11;
      case 11: {
        if (tag == 88) {
         parse_doing_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doing_subtask_)));
          set_has_doing_subtask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_undo_subtask;
        break;
      }

      // optional int32 undo_subtask = 12;
      case 12: {
        if (tag == 96) {
         parse_undo_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &undo_subtask_)));
          set_has_undo_subtask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ignore_doing_subtask;
        break;
      }

      // optional int32 ignore_doing_subtask = 13;
      case 13: {
        if (tag == 104) {
         parse_ignore_doing_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_doing_subtask_)));
          set_has_ignore_doing_subtask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ignore_failed_subtask;
        break;
      }

      // optional int32 ignore_failed_subtask = 14;
      case 14: {
        if (tag == 112) {
         parse_ignore_failed_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_failed_subtask_)));
          set_has_ignore_failed_subtask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.TaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.TaskInfo)
  return false;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.TaskInfo)
  // required bytes task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->task_id(), output);
  }

  // required .dcmd_api.TaskState task_state = 2;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->task_state(), output);
  }

  // required bytes depand_task_id = 3;
  if (has_depand_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->depand_task_id(), output);
  }

  // optional bytes depand_task_name = 4;
  if (has_depand_task_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->depand_task_name(), output);
  }

  // optional bool freezed = 5;
  if (has_freezed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->freezed(), output);
  }

  // optional bool valid = 6;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->valid(), output);
  }

  // optional bool pause = 7;
  if (has_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->pause(), output);
  }

  // optional bytes err = 8;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->err(), output);
  }

  // optional int32 success_subtask = 9;
  if (has_success_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->success_subtask(), output);
  }

  // optional int32 failed_subtask = 10;
  if (has_failed_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->failed_subtask(), output);
  }

  // optional int32 doing_subtask = 11;
  if (has_doing_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->doing_subtask(), output);
  }

  // optional int32 undo_subtask = 12;
  if (has_undo_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->undo_subtask(), output);
  }

  // optional int32 ignore_doing_subtask = 13;
  if (has_ignore_doing_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ignore_doing_subtask(), output);
  }

  // optional int32 ignore_failed_subtask = 14;
  if (has_ignore_failed_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ignore_failed_subtask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.TaskInfo)
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.TaskInfo)
  // required bytes task_id = 1;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  // required .dcmd_api.TaskState task_state = 2;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->task_state(), target);
  }

  // required bytes depand_task_id = 3;
  if (has_depand_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->depand_task_id(), target);
  }

  // optional bytes depand_task_name = 4;
  if (has_depand_task_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->depand_task_name(), target);
  }

  // optional bool freezed = 5;
  if (has_freezed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->freezed(), target);
  }

  // optional bool valid = 6;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->valid(), target);
  }

  // optional bool pause = 7;
  if (has_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->pause(), target);
  }

  // optional bytes err = 8;
  if (has_err()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->err(), target);
  }

  // optional int32 success_subtask = 9;
  if (has_success_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->success_subtask(), target);
  }

  // optional int32 failed_subtask = 10;
  if (has_failed_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->failed_subtask(), target);
  }

  // optional int32 doing_subtask = 11;
  if (has_doing_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->doing_subtask(), target);
  }

  // optional int32 undo_subtask = 12;
  if (has_undo_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->undo_subtask(), target);
  }

  // optional int32 ignore_doing_subtask = 13;
  if (has_ignore_doing_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ignore_doing_subtask(), target);
  }

  // optional int32 ignore_failed_subtask = 14;
  if (has_ignore_failed_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ignore_failed_subtask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.TaskInfo)
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

    // required .dcmd_api.TaskState task_state = 2;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_state());
    }

    // required bytes depand_task_id = 3;
    if (has_depand_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->depand_task_id());
    }

    // optional bytes depand_task_name = 4;
    if (has_depand_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->depand_task_name());
    }

    // optional bool freezed = 5;
    if (has_freezed()) {
      total_size += 1 + 1;
    }

    // optional bool valid = 6;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional bool pause = 7;
    if (has_pause()) {
      total_size += 1 + 1;
    }

    // optional bytes err = 8;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->err());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 success_subtask = 9;
    if (has_success_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success_subtask());
    }

    // optional int32 failed_subtask = 10;
    if (has_failed_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failed_subtask());
    }

    // optional int32 doing_subtask = 11;
    if (has_doing_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doing_subtask());
    }

    // optional int32 undo_subtask = 12;
    if (has_undo_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undo_subtask());
    }

    // optional int32 ignore_doing_subtask = 13;
    if (has_ignore_doing_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_doing_subtask());
    }

    // optional int32 ignore_failed_subtask = 14;
    if (has_ignore_failed_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_failed_subtask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_depand_task_id()) {
      set_depand_task_id(from.depand_task_id());
    }
    if (from.has_depand_task_name()) {
      set_depand_task_name(from.depand_task_name());
    }
    if (from.has_freezed()) {
      set_freezed(from.freezed());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_pause()) {
      set_pause(from.pause());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_success_subtask()) {
      set_success_subtask(from.success_subtask());
    }
    if (from.has_failed_subtask()) {
      set_failed_subtask(from.failed_subtask());
    }
    if (from.has_doing_subtask()) {
      set_doing_subtask(from.doing_subtask());
    }
    if (from.has_undo_subtask()) {
      set_undo_subtask(from.undo_subtask());
    }
    if (from.has_ignore_doing_subtask()) {
      set_ignore_doing_subtask(from.ignore_doing_subtask());
    }
    if (from.has_ignore_failed_subtask()) {
      set_ignore_failed_subtask(from.ignore_failed_subtask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_state_, other->task_state_);
    std::swap(depand_task_id_, other->depand_task_id_);
    std::swap(depand_task_name_, other->depand_task_name_);
    std::swap(freezed_, other->freezed_);
    std::swap(valid_, other->valid_);
    std::swap(pause_, other->pause_);
    std::swap(err_, other->err_);
    std::swap(success_subtask_, other->success_subtask_);
    std::swap(failed_subtask_, other->failed_subtask_);
    std::swap(doing_subtask_, other->doing_subtask_);
    std::swap(undo_subtask_, other->undo_subtask_);
    std::swap(ignore_doing_subtask_, other->ignore_doing_subtask_);
    std::swap(ignore_failed_subtask_, other->ignore_failed_subtask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentInfo::kIpFieldNumber;
const int AgentInfo::kStateFieldNumber;
const int AgentInfo::kVersionFieldNumber;
const int AgentInfo::kConnectedIpFieldNumber;
const int AgentInfo::kReportedIpFieldNumber;
const int AgentInfo::kHostnameFieldNumber;
#endif  // !_MSC_VER

AgentInfo::AgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentInfo)
}

void AgentInfo::InitAsDefaultInstance() {
}

AgentInfo::AgentInfo(const AgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentInfo)
}

void AgentInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connected_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reported_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentInfo::~AgentInfo() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentInfo)
  SharedDtor();
}

void AgentInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (connected_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete connected_ip_;
  }
  if (reported_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reported_ip_;
  }
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void AgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentInfo_descriptor_;
}

const AgentInfo& AgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fcmn_2eproto();
  return *default_instance_;
}

AgentInfo* AgentInfo::default_instance_ = NULL;

AgentInfo* AgentInfo::New() const {
  return new AgentInfo;
}

void AgentInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    state_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_connected_ip()) {
      if (connected_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        connected_ip_->clear();
      }
    }
    if (has_reported_ip()) {
      if (reported_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reported_ip_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.AgentState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::AgentState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::AgentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional bytes version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_connected_ip;
        break;
      }

      // optional bytes connected_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_connected_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_connected_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reported_ip;
        break;
      }

      // optional bytes reported_ip = 5;
      case 5: {
        if (tag == 42) {
         parse_reported_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reported_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 6;
      case 6: {
        if (tag == 50) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentInfo)
  return false;
#undef DO_
}

void AgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentInfo)
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // required .dcmd_api.AgentState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional bytes version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->version(), output);
  }

  // optional bytes connected_ip = 4;
  if (has_connected_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->connected_ip(), output);
  }

  // optional bytes reported_ip = 5;
  if (has_reported_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->reported_ip(), output);
  }

  // optional bytes hostname = 6;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->hostname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentInfo)
}

::google::protobuf::uint8* AgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentInfo)
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required .dcmd_api.AgentState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional bytes version = 3;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->version(), target);
  }

  // optional bytes connected_ip = 4;
  if (has_connected_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->connected_ip(), target);
  }

  // optional bytes reported_ip = 5;
  if (has_reported_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->reported_ip(), target);
  }

  // optional bytes hostname = 6;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->hostname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentInfo)
  return target;
}

int AgentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required .dcmd_api.AgentState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional bytes version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

    // optional bytes connected_ip = 4;
    if (has_connected_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->connected_ip());
    }

    // optional bytes reported_ip = 5;
    if (has_reported_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reported_ip());
    }

    // optional bytes hostname = 6;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentInfo::MergeFrom(const AgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_connected_ip()) {
      set_connected_ip(from.connected_ip());
    }
    if (from.has_reported_ip()) {
      set_reported_ip(from.reported_ip());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AgentInfo::Swap(AgentInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(state_, other->state_);
    std::swap(version_, other->version_);
    std::swap(connected_ip_, other->connected_ip_);
    std::swap(reported_ip_, other->reported_ip_);
    std::swap(hostname_, other->hostname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentInfo_descriptor_;
  metadata.reflection = AgentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentOprCmdReply::kStateFieldNumber;
const int AgentOprCmdReply::kResultFieldNumber;
const int AgentOprCmdReply::kErrFieldNumber;
const int AgentOprCmdReply::kIpFieldNumber;
const int AgentOprCmdReply::kStatusFieldNumber;
#endif  // !_MSC_VER

AgentOprCmdReply::AgentOprCmdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentOprCmdReply)
}

void AgentOprCmdReply::InitAsDefaultInstance() {
}

AgentOprCmdReply::AgentOprCmdReply(const AgentOprCmdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentOprCmdReply)
}

void AgentOprCmdReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentOprCmdReply::~AgentOprCmdReply() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentOprCmdReply)
  SharedDtor();
}

void AgentOprCmdReply::SharedDtor() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AgentOprCmdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentOprCmdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentOprCmdReply_descriptor_;
}

const AgentOprCmdReply& AgentOprCmdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fcmn_2eproto();
  return *default_instance_;
}

AgentOprCmdReply* AgentOprCmdReply::default_instance_ = NULL;

AgentOprCmdReply* AgentOprCmdReply::New() const {
  return new AgentOprCmdReply;
}

void AgentOprCmdReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AgentOprCmdReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(state_, status_);
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentOprCmdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentOprCmdReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // required bytes result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }

      // required bytes err = 3;
      case 3: {
        if (tag == 26) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional bytes ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentOprCmdReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentOprCmdReply)
  return false;
#undef DO_
}

void AgentOprCmdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentOprCmdReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // required bytes result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->result(), output);
  }

  // required bytes err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->err(), output);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ip(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentOprCmdReply)
}

::google::protobuf::uint8* AgentOprCmdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentOprCmdReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // required bytes result = 2;
  if (has_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result(), target);
  }

  // required bytes err = 3;
  if (has_err()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->err(), target);
  }

  // optional bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentOprCmdReply)
  return target;
}

int AgentOprCmdReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required bytes result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result());
    }

    // required bytes err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->err());
    }

    // optional bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentOprCmdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentOprCmdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentOprCmdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentOprCmdReply::MergeFrom(const AgentOprCmdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentOprCmdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentOprCmdReply::CopyFrom(const AgentOprCmdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentOprCmdReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AgentOprCmdReply::Swap(AgentOprCmdReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(result_, other->result_);
    std::swap(err_, other->err_);
    std::swap(ip_, other->ip_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentOprCmdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentOprCmdReply_descriptor_;
  metadata.reflection = AgentOprCmdReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcmd_api

// @@protoc_insertion_point(global_scope)
