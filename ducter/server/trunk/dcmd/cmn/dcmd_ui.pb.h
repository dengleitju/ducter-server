// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcmd_ui.proto

#ifndef PROTOBUF_dcmd_5fui_2eproto__INCLUDED
#define PROTOBUF_dcmd_5fui_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "dcmd_cmn.pb.h"
// @@protoc_insertion_point(includes)

namespace dcmd_api {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dcmd_5fui_2eproto();
void protobuf_AssignDesc_dcmd_5fui_2eproto();
void protobuf_ShutdownFile_dcmd_5fui_2eproto();

class UiTaskOutput;
class UiTaskOutputReply;
class UiAgentRunningTask;
class UiAgentRunningTaskReply;
class UiAgentRunningOpr;
class UiAgentRunningOprReply;
class UiExecOprCmd;
class UiExecOprCmdReply;
class UiExecDupOprCmd;
class UiExecDupOprCmdReply;
class UiAgentInfo;
class UiAgentInfoReply;
class UiInvalidAgentInfo;
class UiInvalidAgentInfoReply;
class UiTaskScriptInfo;
class UiTaskScriptInfoReply;
class UiOprScriptInfo;
class UiOprScriptInfoReply;
class UiScriptInfo;
class UiScriptInfoReply;
class UiScripts;
class UiScriptsReply;
class UiAgentTaskProcess;
class UiAgentTaskProcessReply;
class UiTaskCmd;
class UiTaskCmdReply;
class UiAgentHostName;
class UiAgentHostNameReply;
class UiAgentValid;
class UiAgentValidReply;

// ===================================================================

class UiTaskOutput : public ::google::protobuf::Message {
 public:
  UiTaskOutput();
  virtual ~UiTaskOutput();

  UiTaskOutput(const UiTaskOutput& from);

  inline UiTaskOutput& operator=(const UiTaskOutput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiTaskOutput& default_instance();

  void Swap(UiTaskOutput* other);

  // implements Message ----------------------------------------------

  UiTaskOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiTaskOutput& from);
  void MergeFrom(const UiTaskOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required bytes subtask_id = 2;
  inline bool has_subtask_id() const;
  inline void clear_subtask_id();
  static const int kSubtaskIdFieldNumber = 2;
  inline const ::std::string& subtask_id() const;
  inline void set_subtask_id(const ::std::string& value);
  inline void set_subtask_id(const char* value);
  inline void set_subtask_id(const void* value, size_t size);
  inline ::std::string* mutable_subtask_id();
  inline ::std::string* release_subtask_id();
  inline void set_allocated_subtask_id(::std::string* subtask_id);

  // required bytes ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required bytes user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 6;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 6;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiTaskOutput)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_subtask_id();
  inline void clear_has_subtask_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* subtask_id_;
  ::google::protobuf::int32 client_msg_id_;
  ::google::protobuf::int32 offset_;
  ::std::string* ip_;
  ::std::string* user_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiTaskOutput* default_instance_;
};
// -------------------------------------------------------------------

class UiTaskOutputReply : public ::google::protobuf::Message {
 public:
  UiTaskOutputReply();
  virtual ~UiTaskOutputReply();

  UiTaskOutputReply(const UiTaskOutputReply& from);

  inline UiTaskOutputReply& operator=(const UiTaskOutputReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiTaskOutputReply& default_instance();

  void Swap(UiTaskOutputReply* other);

  // implements Message ----------------------------------------------

  UiTaskOutputReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiTaskOutputReply& from);
  void MergeFrom(const UiTaskOutputReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // required bytes result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const void* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // required int32 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // optional bytes err = 5;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 5;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiTaskOutputReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::std::string* result_;
  ::std::string* err_;
  ::google::protobuf::int32 offset_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiTaskOutputReply* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentRunningTask : public ::google::protobuf::Message {
 public:
  UiAgentRunningTask();
  virtual ~UiAgentRunningTask();

  UiAgentRunningTask(const UiAgentRunningTask& from);

  inline UiAgentRunningTask& operator=(const UiAgentRunningTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentRunningTask& default_instance();

  void Swap(UiAgentRunningTask* other);

  // implements Message ----------------------------------------------

  UiAgentRunningTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentRunningTask& from);
  void MergeFrom(const UiAgentRunningTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // optional bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional bytes app_name = 3;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 3;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const void* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // optional bytes svr_name = 4;
  inline bool has_svr_name() const;
  inline void clear_svr_name();
  static const int kSvrNameFieldNumber = 4;
  inline const ::std::string& svr_name() const;
  inline void set_svr_name(const ::std::string& value);
  inline void set_svr_name(const char* value);
  inline void set_svr_name(const void* value, size_t size);
  inline ::std::string* mutable_svr_name();
  inline ::std::string* release_svr_name();
  inline void set_allocated_svr_name(::std::string* svr_name);

  // optional bytes svr_pool = 5;
  inline bool has_svr_pool() const;
  inline void clear_svr_pool();
  static const int kSvrPoolFieldNumber = 5;
  inline const ::std::string& svr_pool() const;
  inline void set_svr_pool(const ::std::string& value);
  inline void set_svr_pool(const char* value);
  inline void set_svr_pool(const void* value, size_t size);
  inline ::std::string* mutable_svr_pool();
  inline ::std::string* release_svr_pool();
  inline void set_allocated_svr_pool(::std::string* svr_pool);

  // required bytes user = 6;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 6;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 7;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 7;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentRunningTask)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_svr_name();
  inline void clear_has_svr_name();
  inline void set_has_svr_pool();
  inline void clear_has_svr_pool();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::std::string* app_name_;
  ::std::string* svr_name_;
  ::std::string* svr_pool_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentRunningTask* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentRunningTaskReply : public ::google::protobuf::Message {
 public:
  UiAgentRunningTaskReply();
  virtual ~UiAgentRunningTaskReply();

  UiAgentRunningTaskReply(const UiAgentRunningTaskReply& from);

  inline UiAgentRunningTaskReply& operator=(const UiAgentRunningTaskReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentRunningTaskReply& default_instance();

  void Swap(UiAgentRunningTaskReply* other);

  // implements Message ----------------------------------------------

  UiAgentRunningTaskReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentRunningTaskReply& from);
  void MergeFrom(const UiAgentRunningTaskReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // repeated .dcmd_api.SubTaskInfo result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::dcmd_api::SubTaskInfo& result(int index) const;
  inline ::dcmd_api::SubTaskInfo* mutable_result(int index);
  inline ::dcmd_api::SubTaskInfo* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskInfo >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskInfo >*
      mutable_result();

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentRunningTaskReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskInfo > result_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentRunningTaskReply* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentRunningOpr : public ::google::protobuf::Message {
 public:
  UiAgentRunningOpr();
  virtual ~UiAgentRunningOpr();

  UiAgentRunningOpr(const UiAgentRunningOpr& from);

  inline UiAgentRunningOpr& operator=(const UiAgentRunningOpr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentRunningOpr& default_instance();

  void Swap(UiAgentRunningOpr* other);

  // implements Message ----------------------------------------------

  UiAgentRunningOpr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentRunningOpr& from);
  void MergeFrom(const UiAgentRunningOpr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // optional bytes ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required bytes user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 4;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentRunningOpr)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentRunningOpr* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentRunningOprReply : public ::google::protobuf::Message {
 public:
  UiAgentRunningOprReply();
  virtual ~UiAgentRunningOprReply();

  UiAgentRunningOprReply(const UiAgentRunningOprReply& from);

  inline UiAgentRunningOprReply& operator=(const UiAgentRunningOprReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentRunningOprReply& default_instance();

  void Swap(UiAgentRunningOprReply* other);

  // implements Message ----------------------------------------------

  UiAgentRunningOprReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentRunningOprReply& from);
  void MergeFrom(const UiAgentRunningOprReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // repeated .dcmd_api.OprInfo result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::dcmd_api::OprInfo& result(int index) const;
  inline ::dcmd_api::OprInfo* mutable_result(int index);
  inline ::dcmd_api::OprInfo* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::OprInfo >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::OprInfo >*
      mutable_result();

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentRunningOprReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::google::protobuf::RepeatedPtrField< ::dcmd_api::OprInfo > result_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentRunningOprReply* default_instance_;
};
// -------------------------------------------------------------------

class UiExecOprCmd : public ::google::protobuf::Message {
 public:
  UiExecOprCmd();
  virtual ~UiExecOprCmd();

  UiExecOprCmd(const UiExecOprCmd& from);

  inline UiExecOprCmd& operator=(const UiExecOprCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiExecOprCmd& default_instance();

  void Swap(UiExecOprCmd* other);

  // implements Message ----------------------------------------------

  UiExecOprCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiExecOprCmd& from);
  void MergeFrom(const UiExecOprCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // optional bytes opr_id = 2;
  inline bool has_opr_id() const;
  inline void clear_opr_id();
  static const int kOprIdFieldNumber = 2;
  inline const ::std::string& opr_id() const;
  inline void set_opr_id(const ::std::string& value);
  inline void set_opr_id(const char* value);
  inline void set_opr_id(const void* value, size_t size);
  inline ::std::string* mutable_opr_id();
  inline ::std::string* release_opr_id();
  inline void set_allocated_opr_id(::std::string* opr_id);

  // required bytes user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 4;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiExecOprCmd)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_opr_id();
  inline void clear_has_opr_id();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* opr_id_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiExecOprCmd* default_instance_;
};
// -------------------------------------------------------------------

class UiExecOprCmdReply : public ::google::protobuf::Message {
 public:
  UiExecOprCmdReply();
  virtual ~UiExecOprCmdReply();

  UiExecOprCmdReply(const UiExecOprCmdReply& from);

  inline UiExecOprCmdReply& operator=(const UiExecOprCmdReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiExecOprCmdReply& default_instance();

  void Swap(UiExecOprCmdReply* other);

  // implements Message ----------------------------------------------

  UiExecOprCmdReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiExecOprCmdReply& from);
  void MergeFrom(const UiExecOprCmdReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // repeated .dcmd_api.AgentOprCmdReply result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::dcmd_api::AgentOprCmdReply& result(int index) const;
  inline ::dcmd_api::AgentOprCmdReply* mutable_result(int index);
  inline ::dcmd_api::AgentOprCmdReply* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply >*
      mutable_result();

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiExecOprCmdReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply > result_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiExecOprCmdReply* default_instance_;
};
// -------------------------------------------------------------------

class UiExecDupOprCmd : public ::google::protobuf::Message {
 public:
  UiExecDupOprCmd();
  virtual ~UiExecDupOprCmd();

  UiExecDupOprCmd(const UiExecDupOprCmd& from);

  inline UiExecDupOprCmd& operator=(const UiExecDupOprCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiExecDupOprCmd& default_instance();

  void Swap(UiExecDupOprCmd* other);

  // implements Message ----------------------------------------------

  UiExecDupOprCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiExecDupOprCmd& from);
  void MergeFrom(const UiExecDupOprCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // optional bytes dup_opr_name = 2;
  inline bool has_dup_opr_name() const;
  inline void clear_dup_opr_name();
  static const int kDupOprNameFieldNumber = 2;
  inline const ::std::string& dup_opr_name() const;
  inline void set_dup_opr_name(const ::std::string& value);
  inline void set_dup_opr_name(const char* value);
  inline void set_dup_opr_name(const void* value, size_t size);
  inline ::std::string* mutable_dup_opr_name();
  inline ::std::string* release_dup_opr_name();
  inline void set_allocated_dup_opr_name(::std::string* dup_opr_name);

  // repeated .dcmd_api.KeyValue args = 3;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 3;
  inline const ::dcmd_api::KeyValue& args(int index) const;
  inline ::dcmd_api::KeyValue* mutable_args(int index);
  inline ::dcmd_api::KeyValue* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::KeyValue >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::KeyValue >*
      mutable_args();

  // repeated bytes agents = 4;
  inline int agents_size() const;
  inline void clear_agents();
  static const int kAgentsFieldNumber = 4;
  inline const ::std::string& agents(int index) const;
  inline ::std::string* mutable_agents(int index);
  inline void set_agents(int index, const ::std::string& value);
  inline void set_agents(int index, const char* value);
  inline void set_agents(int index, const void* value, size_t size);
  inline ::std::string* add_agents();
  inline void add_agents(const ::std::string& value);
  inline void add_agents(const char* value);
  inline void add_agents(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& agents() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_agents();

  // required bytes user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 6;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 6;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiExecDupOprCmd)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_dup_opr_name();
  inline void clear_has_dup_opr_name();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dup_opr_name_;
  ::google::protobuf::RepeatedPtrField< ::dcmd_api::KeyValue > args_;
  ::google::protobuf::RepeatedPtrField< ::std::string> agents_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiExecDupOprCmd* default_instance_;
};
// -------------------------------------------------------------------

class UiExecDupOprCmdReply : public ::google::protobuf::Message {
 public:
  UiExecDupOprCmdReply();
  virtual ~UiExecDupOprCmdReply();

  UiExecDupOprCmdReply(const UiExecDupOprCmdReply& from);

  inline UiExecDupOprCmdReply& operator=(const UiExecDupOprCmdReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiExecDupOprCmdReply& default_instance();

  void Swap(UiExecDupOprCmdReply* other);

  // implements Message ----------------------------------------------

  UiExecDupOprCmdReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiExecDupOprCmdReply& from);
  void MergeFrom(const UiExecDupOprCmdReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // repeated .dcmd_api.AgentOprCmdReply result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::dcmd_api::AgentOprCmdReply& result(int index) const;
  inline ::dcmd_api::AgentOprCmdReply* mutable_result(int index);
  inline ::dcmd_api::AgentOprCmdReply* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply >*
      mutable_result();

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiExecDupOprCmdReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply > result_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiExecDupOprCmdReply* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentInfo : public ::google::protobuf::Message {
 public:
  UiAgentInfo();
  virtual ~UiAgentInfo();

  UiAgentInfo(const UiAgentInfo& from);

  inline UiAgentInfo& operator=(const UiAgentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentInfo& default_instance();

  void Swap(UiAgentInfo* other);

  // implements Message ----------------------------------------------

  UiAgentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentInfo& from);
  void MergeFrom(const UiAgentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // repeated bytes ips = 2;
  inline int ips_size() const;
  inline void clear_ips();
  static const int kIpsFieldNumber = 2;
  inline const ::std::string& ips(int index) const;
  inline ::std::string* mutable_ips(int index);
  inline void set_ips(int index, const ::std::string& value);
  inline void set_ips(int index, const char* value);
  inline void set_ips(int index, const void* value, size_t size);
  inline ::std::string* add_ips();
  inline void add_ips(const ::std::string& value);
  inline void add_ips(const char* value);
  inline void add_ips(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // required bool version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline bool version() const;
  inline void set_version(bool value);

  // required bytes user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 5;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 5;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentInfo)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::int32 client_msg_id_;
  bool version_;
  ::std::string* user_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentInfo* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentInfoReply : public ::google::protobuf::Message {
 public:
  UiAgentInfoReply();
  virtual ~UiAgentInfoReply();

  UiAgentInfoReply(const UiAgentInfoReply& from);

  inline UiAgentInfoReply& operator=(const UiAgentInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentInfoReply& default_instance();

  void Swap(UiAgentInfoReply* other);

  // implements Message ----------------------------------------------

  UiAgentInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentInfoReply& from);
  void MergeFrom(const UiAgentInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  inline int agentinfo_size() const;
  inline void clear_agentinfo();
  static const int kAgentinfoFieldNumber = 3;
  inline const ::dcmd_api::AgentInfo& agentinfo(int index) const;
  inline ::dcmd_api::AgentInfo* mutable_agentinfo(int index);
  inline ::dcmd_api::AgentInfo* add_agentinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo >&
      agentinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo >*
      mutable_agentinfo();

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentInfoReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo > agentinfo_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class UiInvalidAgentInfo : public ::google::protobuf::Message {
 public:
  UiInvalidAgentInfo();
  virtual ~UiInvalidAgentInfo();

  UiInvalidAgentInfo(const UiInvalidAgentInfo& from);

  inline UiInvalidAgentInfo& operator=(const UiInvalidAgentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiInvalidAgentInfo& default_instance();

  void Swap(UiInvalidAgentInfo* other);

  // implements Message ----------------------------------------------

  UiInvalidAgentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiInvalidAgentInfo& from);
  void MergeFrom(const UiInvalidAgentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required bytes user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiInvalidAgentInfo)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiInvalidAgentInfo* default_instance_;
};
// -------------------------------------------------------------------

class UiInvalidAgentInfoReply : public ::google::protobuf::Message {
 public:
  UiInvalidAgentInfoReply();
  virtual ~UiInvalidAgentInfoReply();

  UiInvalidAgentInfoReply(const UiInvalidAgentInfoReply& from);

  inline UiInvalidAgentInfoReply& operator=(const UiInvalidAgentInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiInvalidAgentInfoReply& default_instance();

  void Swap(UiInvalidAgentInfoReply* other);

  // implements Message ----------------------------------------------

  UiInvalidAgentInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiInvalidAgentInfoReply& from);
  void MergeFrom(const UiInvalidAgentInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  inline int agentinfo_size() const;
  inline void clear_agentinfo();
  static const int kAgentinfoFieldNumber = 3;
  inline const ::dcmd_api::AgentInfo& agentinfo(int index) const;
  inline ::dcmd_api::AgentInfo* mutable_agentinfo(int index);
  inline ::dcmd_api::AgentInfo* add_agentinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo >&
      agentinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo >*
      mutable_agentinfo();

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiInvalidAgentInfoReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo > agentinfo_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiInvalidAgentInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class UiTaskScriptInfo : public ::google::protobuf::Message {
 public:
  UiTaskScriptInfo();
  virtual ~UiTaskScriptInfo();

  UiTaskScriptInfo(const UiTaskScriptInfo& from);

  inline UiTaskScriptInfo& operator=(const UiTaskScriptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiTaskScriptInfo& default_instance();

  void Swap(UiTaskScriptInfo* other);

  // implements Message ----------------------------------------------

  UiTaskScriptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiTaskScriptInfo& from);
  void MergeFrom(const UiTaskScriptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required bytes task_cmd = 2;
  inline bool has_task_cmd() const;
  inline void clear_task_cmd();
  static const int kTaskCmdFieldNumber = 2;
  inline const ::std::string& task_cmd() const;
  inline void set_task_cmd(const ::std::string& value);
  inline void set_task_cmd(const char* value);
  inline void set_task_cmd(const void* value, size_t size);
  inline ::std::string* mutable_task_cmd();
  inline ::std::string* release_task_cmd();
  inline void set_allocated_task_cmd(::std::string* task_cmd);

  // required bytes user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 4;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiTaskScriptInfo)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_task_cmd();
  inline void clear_has_task_cmd();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_cmd_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiTaskScriptInfo* default_instance_;
};
// -------------------------------------------------------------------

class UiTaskScriptInfoReply : public ::google::protobuf::Message {
 public:
  UiTaskScriptInfoReply();
  virtual ~UiTaskScriptInfoReply();

  UiTaskScriptInfoReply(const UiTaskScriptInfoReply& from);

  inline UiTaskScriptInfoReply& operator=(const UiTaskScriptInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiTaskScriptInfoReply& default_instance();

  void Swap(UiTaskScriptInfoReply* other);

  // implements Message ----------------------------------------------

  UiTaskScriptInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiTaskScriptInfoReply& from);
  void MergeFrom(const UiTaskScriptInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // optional bytes script = 3;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 3;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // optional bytes md5 = 5;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 5;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const void* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiTaskScriptInfoReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::std::string* script_;
  ::std::string* err_;
  ::std::string* md5_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiTaskScriptInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class UiOprScriptInfo : public ::google::protobuf::Message {
 public:
  UiOprScriptInfo();
  virtual ~UiOprScriptInfo();

  UiOprScriptInfo(const UiOprScriptInfo& from);

  inline UiOprScriptInfo& operator=(const UiOprScriptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiOprScriptInfo& default_instance();

  void Swap(UiOprScriptInfo* other);

  // implements Message ----------------------------------------------

  UiOprScriptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiOprScriptInfo& from);
  void MergeFrom(const UiOprScriptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required bytes opr_file = 2;
  inline bool has_opr_file() const;
  inline void clear_opr_file();
  static const int kOprFileFieldNumber = 2;
  inline const ::std::string& opr_file() const;
  inline void set_opr_file(const ::std::string& value);
  inline void set_opr_file(const char* value);
  inline void set_opr_file(const void* value, size_t size);
  inline ::std::string* mutable_opr_file();
  inline ::std::string* release_opr_file();
  inline void set_allocated_opr_file(::std::string* opr_file);

  // required bytes user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 4;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiOprScriptInfo)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_opr_file();
  inline void clear_has_opr_file();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* opr_file_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiOprScriptInfo* default_instance_;
};
// -------------------------------------------------------------------

class UiOprScriptInfoReply : public ::google::protobuf::Message {
 public:
  UiOprScriptInfoReply();
  virtual ~UiOprScriptInfoReply();

  UiOprScriptInfoReply(const UiOprScriptInfoReply& from);

  inline UiOprScriptInfoReply& operator=(const UiOprScriptInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiOprScriptInfoReply& default_instance();

  void Swap(UiOprScriptInfoReply* other);

  // implements Message ----------------------------------------------

  UiOprScriptInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiOprScriptInfoReply& from);
  void MergeFrom(const UiOprScriptInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // optional bytes script = 3;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 3;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // optional bytes md5 = 5;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 5;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const void* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiOprScriptInfoReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::std::string* script_;
  ::std::string* err_;
  ::std::string* md5_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiOprScriptInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class UiScriptInfo : public ::google::protobuf::Message {
 public:
  UiScriptInfo();
  virtual ~UiScriptInfo();

  UiScriptInfo(const UiScriptInfo& from);

  inline UiScriptInfo& operator=(const UiScriptInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiScriptInfo& default_instance();

  void Swap(UiScriptInfo* other);

  // implements Message ----------------------------------------------

  UiScriptInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiScriptInfo& from);
  void MergeFrom(const UiScriptInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required bytes script_file = 2;
  inline bool has_script_file() const;
  inline void clear_script_file();
  static const int kScriptFileFieldNumber = 2;
  inline const ::std::string& script_file() const;
  inline void set_script_file(const ::std::string& value);
  inline void set_script_file(const char* value);
  inline void set_script_file(const void* value, size_t size);
  inline ::std::string* mutable_script_file();
  inline ::std::string* release_script_file();
  inline void set_allocated_script_file(::std::string* script_file);

  // required .dcmd_api.UiScriptType script_type = 3;
  inline bool has_script_type() const;
  inline void clear_script_type();
  static const int kScriptTypeFieldNumber = 3;
  inline ::dcmd_api::UiScriptType script_type() const;
  inline void set_script_type(::dcmd_api::UiScriptType value);

  // required bytes user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 5;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 5;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiScriptInfo)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_script_file();
  inline void clear_has_script_file();
  inline void set_has_script_type();
  inline void clear_has_script_type();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* script_file_;
  ::google::protobuf::int32 client_msg_id_;
  int script_type_;
  ::std::string* user_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiScriptInfo* default_instance_;
};
// -------------------------------------------------------------------

class UiScriptInfoReply : public ::google::protobuf::Message {
 public:
  UiScriptInfoReply();
  virtual ~UiScriptInfoReply();

  UiScriptInfoReply(const UiScriptInfoReply& from);

  inline UiScriptInfoReply& operator=(const UiScriptInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiScriptInfoReply& default_instance();

  void Swap(UiScriptInfoReply* other);

  // implements Message ----------------------------------------------

  UiScriptInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiScriptInfoReply& from);
  void MergeFrom(const UiScriptInfoReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // optional bytes script = 3;
  inline bool has_script() const;
  inline void clear_script();
  static const int kScriptFieldNumber = 3;
  inline const ::std::string& script() const;
  inline void set_script(const ::std::string& value);
  inline void set_script(const char* value);
  inline void set_script(const void* value, size_t size);
  inline ::std::string* mutable_script();
  inline ::std::string* release_script();
  inline void set_allocated_script(::std::string* script);

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // optional bytes md5 = 5;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 5;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const void* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiScriptInfoReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_script();
  inline void clear_has_script();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::std::string* script_;
  ::std::string* err_;
  ::std::string* md5_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiScriptInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class UiScripts : public ::google::protobuf::Message {
 public:
  UiScripts();
  virtual ~UiScripts();

  UiScripts(const UiScripts& from);

  inline UiScripts& operator=(const UiScripts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiScripts& default_instance();

  void Swap(UiScripts* other);

  // implements Message ----------------------------------------------

  UiScripts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiScripts& from);
  void MergeFrom(const UiScripts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.UiScriptType script_type = 2;
  inline bool has_script_type() const;
  inline void clear_script_type();
  static const int kScriptTypeFieldNumber = 2;
  inline ::dcmd_api::UiScriptType script_type() const;
  inline void set_script_type(::dcmd_api::UiScriptType value);

  // required bytes script_prefix = 3;
  inline bool has_script_prefix() const;
  inline void clear_script_prefix();
  static const int kScriptPrefixFieldNumber = 3;
  inline const ::std::string& script_prefix() const;
  inline void set_script_prefix(const ::std::string& value);
  inline void set_script_prefix(const char* value);
  inline void set_script_prefix(const void* value, size_t size);
  inline ::std::string* mutable_script_prefix();
  inline ::std::string* release_script_prefix();
  inline void set_allocated_script_prefix(::std::string* script_prefix);

  // required int32 fetch_num = 4;
  inline bool has_fetch_num() const;
  inline void clear_fetch_num();
  static const int kFetchNumFieldNumber = 4;
  inline ::google::protobuf::int32 fetch_num() const;
  inline void set_fetch_num(::google::protobuf::int32 value);

  // required bytes user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 6;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 6;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiScripts)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_script_type();
  inline void clear_has_script_type();
  inline void set_has_script_prefix();
  inline void clear_has_script_prefix();
  inline void set_has_fetch_num();
  inline void clear_has_fetch_num();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int script_type_;
  ::std::string* script_prefix_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 fetch_num_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiScripts* default_instance_;
};
// -------------------------------------------------------------------

class UiScriptsReply : public ::google::protobuf::Message {
 public:
  UiScriptsReply();
  virtual ~UiScriptsReply();

  UiScriptsReply(const UiScriptsReply& from);

  inline UiScriptsReply& operator=(const UiScriptsReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiScriptsReply& default_instance();

  void Swap(UiScriptsReply* other);

  // implements Message ----------------------------------------------

  UiScriptsReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiScriptsReply& from);
  void MergeFrom(const UiScriptsReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // repeated bytes scripts = 3;
  inline int scripts_size() const;
  inline void clear_scripts();
  static const int kScriptsFieldNumber = 3;
  inline const ::std::string& scripts(int index) const;
  inline ::std::string* mutable_scripts(int index);
  inline void set_scripts(int index, const ::std::string& value);
  inline void set_scripts(int index, const char* value);
  inline void set_scripts(int index, const void* value, size_t size);
  inline ::std::string* add_scripts();
  inline void add_scripts(const ::std::string& value);
  inline void add_scripts(const char* value);
  inline void add_scripts(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& scripts() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scripts();

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiScriptsReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::google::protobuf::RepeatedPtrField< ::std::string> scripts_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiScriptsReply* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentTaskProcess : public ::google::protobuf::Message {
 public:
  UiAgentTaskProcess();
  virtual ~UiAgentTaskProcess();

  UiAgentTaskProcess(const UiAgentTaskProcess& from);

  inline UiAgentTaskProcess& operator=(const UiAgentTaskProcess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentTaskProcess& default_instance();

  void Swap(UiAgentTaskProcess* other);

  // implements Message ----------------------------------------------

  UiAgentTaskProcess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentTaskProcess& from);
  void MergeFrom(const UiAgentTaskProcess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // repeated bytes subtask_id = 2;
  inline int subtask_id_size() const;
  inline void clear_subtask_id();
  static const int kSubtaskIdFieldNumber = 2;
  inline const ::std::string& subtask_id(int index) const;
  inline ::std::string* mutable_subtask_id(int index);
  inline void set_subtask_id(int index, const ::std::string& value);
  inline void set_subtask_id(int index, const char* value);
  inline void set_subtask_id(int index, const void* value, size_t size);
  inline ::std::string* add_subtask_id();
  inline void add_subtask_id(const ::std::string& value);
  inline void add_subtask_id(const char* value);
  inline void add_subtask_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& subtask_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subtask_id();

  // required bytes user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 4;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentTaskProcess)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subtask_id_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentTaskProcess* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentTaskProcessReply : public ::google::protobuf::Message {
 public:
  UiAgentTaskProcessReply();
  virtual ~UiAgentTaskProcessReply();

  UiAgentTaskProcessReply(const UiAgentTaskProcessReply& from);

  inline UiAgentTaskProcessReply& operator=(const UiAgentTaskProcessReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentTaskProcessReply& default_instance();

  void Swap(UiAgentTaskProcessReply* other);

  // implements Message ----------------------------------------------

  UiAgentTaskProcessReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentTaskProcessReply& from);
  void MergeFrom(const UiAgentTaskProcessReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // repeated .dcmd_api.SubTaskProcess process = 3;
  inline int process_size() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 3;
  inline const ::dcmd_api::SubTaskProcess& process(int index) const;
  inline ::dcmd_api::SubTaskProcess* mutable_process(int index);
  inline ::dcmd_api::SubTaskProcess* add_process();
  inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskProcess >&
      process() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskProcess >*
      mutable_process();

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentTaskProcessReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskProcess > process_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentTaskProcessReply* default_instance_;
};
// -------------------------------------------------------------------

class UiTaskCmd : public ::google::protobuf::Message {
 public:
  UiTaskCmd();
  virtual ~UiTaskCmd();

  UiTaskCmd(const UiTaskCmd& from);

  inline UiTaskCmd& operator=(const UiTaskCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiTaskCmd& default_instance();

  void Swap(UiTaskCmd* other);

  // implements Message ----------------------------------------------

  UiTaskCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiTaskCmd& from);
  void MergeFrom(const UiTaskCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required bytes task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline const ::std::string& task_id() const;
  inline void set_task_id(const ::std::string& value);
  inline void set_task_id(const char* value);
  inline void set_task_id(const void* value, size_t size);
  inline ::std::string* mutable_task_id();
  inline ::std::string* release_task_id();
  inline void set_allocated_task_id(::std::string* task_id);

  // required int32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional bytes subtask_id = 4;
  inline bool has_subtask_id() const;
  inline void clear_subtask_id();
  static const int kSubtaskIdFieldNumber = 4;
  inline const ::std::string& subtask_id() const;
  inline void set_subtask_id(const ::std::string& value);
  inline void set_subtask_id(const char* value);
  inline void set_subtask_id(const void* value, size_t size);
  inline ::std::string* mutable_subtask_id();
  inline ::std::string* release_subtask_id();
  inline void set_allocated_subtask_id(::std::string* subtask_id);

  // optional bytes ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional bytes svr_name = 6;
  inline bool has_svr_name() const;
  inline void clear_svr_name();
  static const int kSvrNameFieldNumber = 6;
  inline const ::std::string& svr_name() const;
  inline void set_svr_name(const ::std::string& value);
  inline void set_svr_name(const char* value);
  inline void set_svr_name(const void* value, size_t size);
  inline ::std::string* mutable_svr_name();
  inline ::std::string* release_svr_name();
  inline void set_allocated_svr_name(::std::string* svr_name);

  // optional bytes svr_pool = 7;
  inline bool has_svr_pool() const;
  inline void clear_svr_pool();
  static const int kSvrPoolFieldNumber = 7;
  inline const ::std::string& svr_pool() const;
  inline void set_svr_pool(const ::std::string& value);
  inline void set_svr_pool(const char* value);
  inline void set_svr_pool(const void* value, size_t size);
  inline ::std::string* mutable_svr_pool();
  inline ::std::string* release_svr_pool();
  inline void set_allocated_svr_pool(::std::string* svr_pool);

  // optional int32 concurrent_rate = 9;
  inline bool has_concurrent_rate() const;
  inline void clear_concurrent_rate();
  static const int kConcurrentRateFieldNumber = 9;
  inline ::google::protobuf::int32 concurrent_rate() const;
  inline void set_concurrent_rate(::google::protobuf::int32 value);

  // optional int32 task_timeout = 10;
  inline bool has_task_timeout() const;
  inline void clear_task_timeout();
  static const int kTaskTimeoutFieldNumber = 10;
  inline ::google::protobuf::int32 task_timeout() const;
  inline void set_task_timeout(::google::protobuf::int32 value);

  // optional bool auto = 11;
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAutoFieldNumber = 11;
  inline bool auto_() const;
  inline void set_auto_(bool value);

  // required .dcmd_api.CmdType cmd_type = 12;
  inline bool has_cmd_type() const;
  inline void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 12;
  inline ::dcmd_api::CmdType cmd_type() const;
  inline void set_cmd_type(::dcmd_api::CmdType value);

  // required bytes user = 13;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 13;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 14;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 14;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiTaskCmd)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_subtask_id();
  inline void clear_has_subtask_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_svr_name();
  inline void clear_has_svr_name();
  inline void set_has_svr_pool();
  inline void clear_has_svr_pool();
  inline void set_has_concurrent_rate();
  inline void clear_has_concurrent_rate();
  inline void set_has_task_timeout();
  inline void clear_has_task_timeout();
  inline void set_has_auto_();
  inline void clear_has_auto_();
  inline void set_has_cmd_type();
  inline void clear_has_cmd_type();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* task_id_;
  ::google::protobuf::int32 client_msg_id_;
  ::google::protobuf::int32 uid_;
  ::std::string* subtask_id_;
  ::std::string* ip_;
  ::std::string* svr_name_;
  ::std::string* svr_pool_;
  ::google::protobuf::int32 concurrent_rate_;
  ::google::protobuf::int32 task_timeout_;
  bool auto__;
  int cmd_type_;
  ::std::string* user_;
  ::std::string* passwd_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiTaskCmd* default_instance_;
};
// -------------------------------------------------------------------

class UiTaskCmdReply : public ::google::protobuf::Message {
 public:
  UiTaskCmdReply();
  virtual ~UiTaskCmdReply();

  UiTaskCmdReply(const UiTaskCmdReply& from);

  inline UiTaskCmdReply& operator=(const UiTaskCmdReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiTaskCmdReply& default_instance();

  void Swap(UiTaskCmdReply* other);

  // implements Message ----------------------------------------------

  UiTaskCmdReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiTaskCmdReply& from);
  void MergeFrom(const UiTaskCmdReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // optional bytes err = 4;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 4;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiTaskCmdReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiTaskCmdReply* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentHostName : public ::google::protobuf::Message {
 public:
  UiAgentHostName();
  virtual ~UiAgentHostName();

  UiAgentHostName(const UiAgentHostName& from);

  inline UiAgentHostName& operator=(const UiAgentHostName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentHostName& default_instance();

  void Swap(UiAgentHostName* other);

  // implements Message ----------------------------------------------

  UiAgentHostName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentHostName& from);
  void MergeFrom(const UiAgentHostName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required bytes agent_ip = 2;
  inline bool has_agent_ip() const;
  inline void clear_agent_ip();
  static const int kAgentIpFieldNumber = 2;
  inline const ::std::string& agent_ip() const;
  inline void set_agent_ip(const ::std::string& value);
  inline void set_agent_ip(const char* value);
  inline void set_agent_ip(const void* value, size_t size);
  inline ::std::string* mutable_agent_ip();
  inline ::std::string* release_agent_ip();
  inline void set_allocated_agent_ip(::std::string* agent_ip);

  // required bytes user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 4;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentHostName)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_agent_ip();
  inline void clear_has_agent_ip();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* agent_ip_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentHostName* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentHostNameReply : public ::google::protobuf::Message {
 public:
  UiAgentHostNameReply();
  virtual ~UiAgentHostNameReply();

  UiAgentHostNameReply(const UiAgentHostNameReply& from);

  inline UiAgentHostNameReply& operator=(const UiAgentHostNameReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentHostNameReply& default_instance();

  void Swap(UiAgentHostNameReply* other);

  // implements Message ----------------------------------------------

  UiAgentHostNameReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentHostNameReply& from);
  void MergeFrom(const UiAgentHostNameReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // required bool is_exist = 3;
  inline bool has_is_exist() const;
  inline void clear_is_exist();
  static const int kIsExistFieldNumber = 3;
  inline bool is_exist() const;
  inline void set_is_exist(bool value);

  // required bytes hostname = 4;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 4;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const void* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional bytes err = 5;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 5;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentHostNameReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_is_exist();
  inline void clear_has_is_exist();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::std::string* hostname_;
  ::std::string* err_;
  bool is_exist_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentHostNameReply* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentValid : public ::google::protobuf::Message {
 public:
  UiAgentValid();
  virtual ~UiAgentValid();

  UiAgentValid(const UiAgentValid& from);

  inline UiAgentValid& operator=(const UiAgentValid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentValid& default_instance();

  void Swap(UiAgentValid* other);

  // implements Message ----------------------------------------------

  UiAgentValid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentValid& from);
  void MergeFrom(const UiAgentValid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required bytes agent_ip = 2;
  inline bool has_agent_ip() const;
  inline void clear_agent_ip();
  static const int kAgentIpFieldNumber = 2;
  inline const ::std::string& agent_ip() const;
  inline void set_agent_ip(const ::std::string& value);
  inline void set_agent_ip(const char* value);
  inline void set_agent_ip(const void* value, size_t size);
  inline ::std::string* mutable_agent_ip();
  inline ::std::string* release_agent_ip();
  inline void set_allocated_agent_ip(::std::string* agent_ip);

  // required bytes user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes passwd = 4;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 4;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const void* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  inline void set_allocated_passwd(::std::string* passwd);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentValid)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_agent_ip();
  inline void clear_has_agent_ip();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_passwd();
  inline void clear_has_passwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* agent_ip_;
  ::std::string* user_;
  ::std::string* passwd_;
  ::google::protobuf::int32 client_msg_id_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentValid* default_instance_;
};
// -------------------------------------------------------------------

class UiAgentValidReply : public ::google::protobuf::Message {
 public:
  UiAgentValidReply();
  virtual ~UiAgentValidReply();

  UiAgentValidReply(const UiAgentValidReply& from);

  inline UiAgentValidReply& operator=(const UiAgentValidReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UiAgentValidReply& default_instance();

  void Swap(UiAgentValidReply* other);

  // implements Message ----------------------------------------------

  UiAgentValidReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UiAgentValidReply& from);
  void MergeFrom(const UiAgentValidReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 client_msg_id = 1;
  inline bool has_client_msg_id() const;
  inline void clear_client_msg_id();
  static const int kClientMsgIdFieldNumber = 1;
  inline ::google::protobuf::int32 client_msg_id() const;
  inline void set_client_msg_id(::google::protobuf::int32 value);

  // required .dcmd_api.DcmdState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::dcmd_api::DcmdState state() const;
  inline void set_state(::dcmd_api::DcmdState value);

  // optional bytes err = 3;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 3;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const void* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:dcmd_api.UiAgentValidReply)
 private:
  inline void set_has_client_msg_id();
  inline void clear_has_client_msg_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 client_msg_id_;
  int state_;
  ::std::string* err_;
  friend void  protobuf_AddDesc_dcmd_5fui_2eproto();
  friend void protobuf_AssignDesc_dcmd_5fui_2eproto();
  friend void protobuf_ShutdownFile_dcmd_5fui_2eproto();

  void InitAsDefaultInstance();
  static UiAgentValidReply* default_instance_;
};
// ===================================================================


// ===================================================================

// UiTaskOutput

// required int32 client_msg_id = 1;
inline bool UiTaskOutput::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiTaskOutput::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiTaskOutput::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiTaskOutput::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiTaskOutput::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutput.client_msg_id)
  return client_msg_id_;
}
inline void UiTaskOutput::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutput.client_msg_id)
}

// required bytes subtask_id = 2;
inline bool UiTaskOutput::has_subtask_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiTaskOutput::set_has_subtask_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiTaskOutput::clear_has_subtask_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiTaskOutput::clear_subtask_id() {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_->clear();
  }
  clear_has_subtask_id();
}
inline const ::std::string& UiTaskOutput::subtask_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutput.subtask_id)
  return *subtask_id_;
}
inline void UiTaskOutput::set_subtask_id(const ::std::string& value) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutput.subtask_id)
}
inline void UiTaskOutput::set_subtask_id(const char* value) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskOutput.subtask_id)
}
inline void UiTaskOutput::set_subtask_id(const void* value, size_t size) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskOutput.subtask_id)
}
inline ::std::string* UiTaskOutput::mutable_subtask_id() {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskOutput.subtask_id)
  return subtask_id_;
}
inline ::std::string* UiTaskOutput::release_subtask_id() {
  clear_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subtask_id_;
    subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskOutput::set_allocated_subtask_id(::std::string* subtask_id) {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (subtask_id) {
    set_has_subtask_id();
    subtask_id_ = subtask_id;
  } else {
    clear_has_subtask_id();
    subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskOutput.subtask_id)
}

// required bytes ip = 3;
inline bool UiTaskOutput::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiTaskOutput::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiTaskOutput::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiTaskOutput::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UiTaskOutput::ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutput.ip)
  return *ip_;
}
inline void UiTaskOutput::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutput.ip)
}
inline void UiTaskOutput::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskOutput.ip)
}
inline void UiTaskOutput::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskOutput.ip)
}
inline ::std::string* UiTaskOutput::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskOutput.ip)
  return ip_;
}
inline ::std::string* UiTaskOutput::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskOutput::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskOutput.ip)
}

// required int32 offset = 4;
inline bool UiTaskOutput::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiTaskOutput::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiTaskOutput::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiTaskOutput::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 UiTaskOutput::offset() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutput.offset)
  return offset_;
}
inline void UiTaskOutput::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutput.offset)
}

// required bytes user = 5;
inline bool UiTaskOutput::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiTaskOutput::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiTaskOutput::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiTaskOutput::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiTaskOutput::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutput.user)
  return *user_;
}
inline void UiTaskOutput::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutput.user)
}
inline void UiTaskOutput::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskOutput.user)
}
inline void UiTaskOutput::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskOutput.user)
}
inline ::std::string* UiTaskOutput::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskOutput.user)
  return user_;
}
inline ::std::string* UiTaskOutput::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskOutput::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskOutput.user)
}

// required bytes passwd = 6;
inline bool UiTaskOutput::has_passwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UiTaskOutput::set_has_passwd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UiTaskOutput::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UiTaskOutput::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiTaskOutput::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutput.passwd)
  return *passwd_;
}
inline void UiTaskOutput::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutput.passwd)
}
inline void UiTaskOutput::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskOutput.passwd)
}
inline void UiTaskOutput::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskOutput.passwd)
}
inline ::std::string* UiTaskOutput::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskOutput.passwd)
  return passwd_;
}
inline ::std::string* UiTaskOutput::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskOutput::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskOutput.passwd)
}

// -------------------------------------------------------------------

// UiTaskOutputReply

// required int32 client_msg_id = 1;
inline bool UiTaskOutputReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiTaskOutputReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiTaskOutputReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiTaskOutputReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiTaskOutputReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutputReply.client_msg_id)
  return client_msg_id_;
}
inline void UiTaskOutputReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutputReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiTaskOutputReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiTaskOutputReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiTaskOutputReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiTaskOutputReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiTaskOutputReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutputReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiTaskOutputReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutputReply.state)
}

// required bytes result = 3;
inline bool UiTaskOutputReply::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiTaskOutputReply::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiTaskOutputReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiTaskOutputReply::clear_result() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& UiTaskOutputReply::result() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutputReply.result)
  return *result_;
}
inline void UiTaskOutputReply::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutputReply.result)
}
inline void UiTaskOutputReply::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskOutputReply.result)
}
inline void UiTaskOutputReply::set_result(const void* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskOutputReply.result)
}
inline ::std::string* UiTaskOutputReply::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskOutputReply.result)
  return result_;
}
inline ::std::string* UiTaskOutputReply::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskOutputReply::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskOutputReply.result)
}

// required int32 offset = 4;
inline bool UiTaskOutputReply::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiTaskOutputReply::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiTaskOutputReply::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiTaskOutputReply::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 UiTaskOutputReply::offset() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutputReply.offset)
  return offset_;
}
inline void UiTaskOutputReply::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutputReply.offset)
}

// optional bytes err = 5;
inline bool UiTaskOutputReply::has_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiTaskOutputReply::set_has_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiTaskOutputReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiTaskOutputReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiTaskOutputReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskOutputReply.err)
  return *err_;
}
inline void UiTaskOutputReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskOutputReply.err)
}
inline void UiTaskOutputReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskOutputReply.err)
}
inline void UiTaskOutputReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskOutputReply.err)
}
inline ::std::string* UiTaskOutputReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskOutputReply.err)
  return err_;
}
inline ::std::string* UiTaskOutputReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskOutputReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskOutputReply.err)
}

// -------------------------------------------------------------------

// UiAgentRunningTask

// required int32 client_msg_id = 1;
inline bool UiAgentRunningTask::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentRunningTask::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentRunningTask::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentRunningTask::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentRunningTask::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTask.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentRunningTask::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTask.client_msg_id)
}

// optional bytes ip = 2;
inline bool UiAgentRunningTask::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentRunningTask::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentRunningTask::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentRunningTask::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UiAgentRunningTask::ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTask.ip)
  return *ip_;
}
inline void UiAgentRunningTask::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTask.ip)
}
inline void UiAgentRunningTask::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningTask.ip)
}
inline void UiAgentRunningTask::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningTask.ip)
}
inline ::std::string* UiAgentRunningTask::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningTask.ip)
  return ip_;
}
inline ::std::string* UiAgentRunningTask::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningTask::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningTask.ip)
}

// optional bytes app_name = 3;
inline bool UiAgentRunningTask::has_app_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiAgentRunningTask::set_has_app_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiAgentRunningTask::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiAgentRunningTask::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& UiAgentRunningTask::app_name() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTask.app_name)
  return *app_name_;
}
inline void UiAgentRunningTask::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTask.app_name)
}
inline void UiAgentRunningTask::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningTask.app_name)
}
inline void UiAgentRunningTask::set_app_name(const void* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningTask.app_name)
}
inline ::std::string* UiAgentRunningTask::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningTask.app_name)
  return app_name_;
}
inline ::std::string* UiAgentRunningTask::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningTask::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningTask.app_name)
}

// optional bytes svr_name = 4;
inline bool UiAgentRunningTask::has_svr_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentRunningTask::set_has_svr_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentRunningTask::clear_has_svr_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentRunningTask::clear_svr_name() {
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_->clear();
  }
  clear_has_svr_name();
}
inline const ::std::string& UiAgentRunningTask::svr_name() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTask.svr_name)
  return *svr_name_;
}
inline void UiAgentRunningTask::set_svr_name(const ::std::string& value) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTask.svr_name)
}
inline void UiAgentRunningTask::set_svr_name(const char* value) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningTask.svr_name)
}
inline void UiAgentRunningTask::set_svr_name(const void* value, size_t size) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningTask.svr_name)
}
inline ::std::string* UiAgentRunningTask::mutable_svr_name() {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningTask.svr_name)
  return svr_name_;
}
inline ::std::string* UiAgentRunningTask::release_svr_name() {
  clear_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svr_name_;
    svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningTask::set_allocated_svr_name(::std::string* svr_name) {
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_name_;
  }
  if (svr_name) {
    set_has_svr_name();
    svr_name_ = svr_name;
  } else {
    clear_has_svr_name();
    svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningTask.svr_name)
}

// optional bytes svr_pool = 5;
inline bool UiAgentRunningTask::has_svr_pool() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiAgentRunningTask::set_has_svr_pool() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiAgentRunningTask::clear_has_svr_pool() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiAgentRunningTask::clear_svr_pool() {
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_->clear();
  }
  clear_has_svr_pool();
}
inline const ::std::string& UiAgentRunningTask::svr_pool() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTask.svr_pool)
  return *svr_pool_;
}
inline void UiAgentRunningTask::set_svr_pool(const ::std::string& value) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTask.svr_pool)
}
inline void UiAgentRunningTask::set_svr_pool(const char* value) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningTask.svr_pool)
}
inline void UiAgentRunningTask::set_svr_pool(const void* value, size_t size) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningTask.svr_pool)
}
inline ::std::string* UiAgentRunningTask::mutable_svr_pool() {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningTask.svr_pool)
  return svr_pool_;
}
inline ::std::string* UiAgentRunningTask::release_svr_pool() {
  clear_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svr_pool_;
    svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningTask::set_allocated_svr_pool(::std::string* svr_pool) {
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_pool_;
  }
  if (svr_pool) {
    set_has_svr_pool();
    svr_pool_ = svr_pool;
  } else {
    clear_has_svr_pool();
    svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningTask.svr_pool)
}

// required bytes user = 6;
inline bool UiAgentRunningTask::has_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UiAgentRunningTask::set_has_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UiAgentRunningTask::clear_has_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UiAgentRunningTask::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiAgentRunningTask::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTask.user)
  return *user_;
}
inline void UiAgentRunningTask::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTask.user)
}
inline void UiAgentRunningTask::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningTask.user)
}
inline void UiAgentRunningTask::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningTask.user)
}
inline ::std::string* UiAgentRunningTask::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningTask.user)
  return user_;
}
inline ::std::string* UiAgentRunningTask::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningTask::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningTask.user)
}

// required bytes passwd = 7;
inline bool UiAgentRunningTask::has_passwd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UiAgentRunningTask::set_has_passwd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UiAgentRunningTask::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UiAgentRunningTask::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiAgentRunningTask::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTask.passwd)
  return *passwd_;
}
inline void UiAgentRunningTask::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTask.passwd)
}
inline void UiAgentRunningTask::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningTask.passwd)
}
inline void UiAgentRunningTask::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningTask.passwd)
}
inline ::std::string* UiAgentRunningTask::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningTask.passwd)
  return passwd_;
}
inline ::std::string* UiAgentRunningTask::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningTask::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningTask.passwd)
}

// -------------------------------------------------------------------

// UiAgentRunningTaskReply

// required int32 client_msg_id = 1;
inline bool UiAgentRunningTaskReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentRunningTaskReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentRunningTaskReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentRunningTaskReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentRunningTaskReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTaskReply.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentRunningTaskReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTaskReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiAgentRunningTaskReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentRunningTaskReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentRunningTaskReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentRunningTaskReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiAgentRunningTaskReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTaskReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiAgentRunningTaskReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTaskReply.state)
}

// repeated .dcmd_api.SubTaskInfo result = 3;
inline int UiAgentRunningTaskReply::result_size() const {
  return result_.size();
}
inline void UiAgentRunningTaskReply::clear_result() {
  result_.Clear();
}
inline const ::dcmd_api::SubTaskInfo& UiAgentRunningTaskReply::result(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTaskReply.result)
  return result_.Get(index);
}
inline ::dcmd_api::SubTaskInfo* UiAgentRunningTaskReply::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningTaskReply.result)
  return result_.Mutable(index);
}
inline ::dcmd_api::SubTaskInfo* UiAgentRunningTaskReply::add_result() {
  // @@protoc_insertion_point(field_add:dcmd_api.UiAgentRunningTaskReply.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskInfo >&
UiAgentRunningTaskReply::result() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiAgentRunningTaskReply.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskInfo >*
UiAgentRunningTaskReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiAgentRunningTaskReply.result)
  return &result_;
}

// optional bytes err = 4;
inline bool UiAgentRunningTaskReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentRunningTaskReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentRunningTaskReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentRunningTaskReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiAgentRunningTaskReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningTaskReply.err)
  return *err_;
}
inline void UiAgentRunningTaskReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningTaskReply.err)
}
inline void UiAgentRunningTaskReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningTaskReply.err)
}
inline void UiAgentRunningTaskReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningTaskReply.err)
}
inline ::std::string* UiAgentRunningTaskReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningTaskReply.err)
  return err_;
}
inline ::std::string* UiAgentRunningTaskReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningTaskReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningTaskReply.err)
}

// -------------------------------------------------------------------

// UiAgentRunningOpr

// required int32 client_msg_id = 1;
inline bool UiAgentRunningOpr::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentRunningOpr::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentRunningOpr::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentRunningOpr::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentRunningOpr::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningOpr.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentRunningOpr::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningOpr.client_msg_id)
}

// optional bytes ip = 2;
inline bool UiAgentRunningOpr::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentRunningOpr::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentRunningOpr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentRunningOpr::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UiAgentRunningOpr::ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningOpr.ip)
  return *ip_;
}
inline void UiAgentRunningOpr::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningOpr.ip)
}
inline void UiAgentRunningOpr::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningOpr.ip)
}
inline void UiAgentRunningOpr::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningOpr.ip)
}
inline ::std::string* UiAgentRunningOpr::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningOpr.ip)
  return ip_;
}
inline ::std::string* UiAgentRunningOpr::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningOpr::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningOpr.ip)
}

// required bytes user = 3;
inline bool UiAgentRunningOpr::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiAgentRunningOpr::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiAgentRunningOpr::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiAgentRunningOpr::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiAgentRunningOpr::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningOpr.user)
  return *user_;
}
inline void UiAgentRunningOpr::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningOpr.user)
}
inline void UiAgentRunningOpr::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningOpr.user)
}
inline void UiAgentRunningOpr::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningOpr.user)
}
inline ::std::string* UiAgentRunningOpr::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningOpr.user)
  return user_;
}
inline ::std::string* UiAgentRunningOpr::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningOpr::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningOpr.user)
}

// required bytes passwd = 4;
inline bool UiAgentRunningOpr::has_passwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentRunningOpr::set_has_passwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentRunningOpr::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentRunningOpr::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiAgentRunningOpr::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningOpr.passwd)
  return *passwd_;
}
inline void UiAgentRunningOpr::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningOpr.passwd)
}
inline void UiAgentRunningOpr::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningOpr.passwd)
}
inline void UiAgentRunningOpr::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningOpr.passwd)
}
inline ::std::string* UiAgentRunningOpr::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningOpr.passwd)
  return passwd_;
}
inline ::std::string* UiAgentRunningOpr::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningOpr::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningOpr.passwd)
}

// -------------------------------------------------------------------

// UiAgentRunningOprReply

// required int32 client_msg_id = 1;
inline bool UiAgentRunningOprReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentRunningOprReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentRunningOprReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentRunningOprReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentRunningOprReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningOprReply.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentRunningOprReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningOprReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiAgentRunningOprReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentRunningOprReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentRunningOprReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentRunningOprReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiAgentRunningOprReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningOprReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiAgentRunningOprReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningOprReply.state)
}

// repeated .dcmd_api.OprInfo result = 3;
inline int UiAgentRunningOprReply::result_size() const {
  return result_.size();
}
inline void UiAgentRunningOprReply::clear_result() {
  result_.Clear();
}
inline const ::dcmd_api::OprInfo& UiAgentRunningOprReply::result(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningOprReply.result)
  return result_.Get(index);
}
inline ::dcmd_api::OprInfo* UiAgentRunningOprReply::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningOprReply.result)
  return result_.Mutable(index);
}
inline ::dcmd_api::OprInfo* UiAgentRunningOprReply::add_result() {
  // @@protoc_insertion_point(field_add:dcmd_api.UiAgentRunningOprReply.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::OprInfo >&
UiAgentRunningOprReply::result() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiAgentRunningOprReply.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::OprInfo >*
UiAgentRunningOprReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiAgentRunningOprReply.result)
  return &result_;
}

// optional bytes err = 4;
inline bool UiAgentRunningOprReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentRunningOprReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentRunningOprReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentRunningOprReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiAgentRunningOprReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentRunningOprReply.err)
  return *err_;
}
inline void UiAgentRunningOprReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentRunningOprReply.err)
}
inline void UiAgentRunningOprReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentRunningOprReply.err)
}
inline void UiAgentRunningOprReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentRunningOprReply.err)
}
inline ::std::string* UiAgentRunningOprReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentRunningOprReply.err)
  return err_;
}
inline ::std::string* UiAgentRunningOprReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentRunningOprReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentRunningOprReply.err)
}

// -------------------------------------------------------------------

// UiExecOprCmd

// required int32 client_msg_id = 1;
inline bool UiExecOprCmd::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiExecOprCmd::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiExecOprCmd::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiExecOprCmd::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiExecOprCmd::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecOprCmd.client_msg_id)
  return client_msg_id_;
}
inline void UiExecOprCmd::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecOprCmd.client_msg_id)
}

// optional bytes opr_id = 2;
inline bool UiExecOprCmd::has_opr_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiExecOprCmd::set_has_opr_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiExecOprCmd::clear_has_opr_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiExecOprCmd::clear_opr_id() {
  if (opr_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_id_->clear();
  }
  clear_has_opr_id();
}
inline const ::std::string& UiExecOprCmd::opr_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecOprCmd.opr_id)
  return *opr_id_;
}
inline void UiExecOprCmd::set_opr_id(const ::std::string& value) {
  set_has_opr_id();
  if (opr_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_id_ = new ::std::string;
  }
  opr_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecOprCmd.opr_id)
}
inline void UiExecOprCmd::set_opr_id(const char* value) {
  set_has_opr_id();
  if (opr_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_id_ = new ::std::string;
  }
  opr_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecOprCmd.opr_id)
}
inline void UiExecOprCmd::set_opr_id(const void* value, size_t size) {
  set_has_opr_id();
  if (opr_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_id_ = new ::std::string;
  }
  opr_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecOprCmd.opr_id)
}
inline ::std::string* UiExecOprCmd::mutable_opr_id() {
  set_has_opr_id();
  if (opr_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecOprCmd.opr_id)
  return opr_id_;
}
inline ::std::string* UiExecOprCmd::release_opr_id() {
  clear_has_opr_id();
  if (opr_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opr_id_;
    opr_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiExecOprCmd::set_allocated_opr_id(::std::string* opr_id) {
  if (opr_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opr_id_;
  }
  if (opr_id) {
    set_has_opr_id();
    opr_id_ = opr_id;
  } else {
    clear_has_opr_id();
    opr_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiExecOprCmd.opr_id)
}

// required bytes user = 3;
inline bool UiExecOprCmd::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiExecOprCmd::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiExecOprCmd::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiExecOprCmd::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiExecOprCmd::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecOprCmd.user)
  return *user_;
}
inline void UiExecOprCmd::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecOprCmd.user)
}
inline void UiExecOprCmd::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecOprCmd.user)
}
inline void UiExecOprCmd::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecOprCmd.user)
}
inline ::std::string* UiExecOprCmd::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecOprCmd.user)
  return user_;
}
inline ::std::string* UiExecOprCmd::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiExecOprCmd::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiExecOprCmd.user)
}

// required bytes passwd = 4;
inline bool UiExecOprCmd::has_passwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiExecOprCmd::set_has_passwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiExecOprCmd::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiExecOprCmd::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiExecOprCmd::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecOprCmd.passwd)
  return *passwd_;
}
inline void UiExecOprCmd::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecOprCmd.passwd)
}
inline void UiExecOprCmd::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecOprCmd.passwd)
}
inline void UiExecOprCmd::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecOprCmd.passwd)
}
inline ::std::string* UiExecOprCmd::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecOprCmd.passwd)
  return passwd_;
}
inline ::std::string* UiExecOprCmd::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiExecOprCmd::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiExecOprCmd.passwd)
}

// -------------------------------------------------------------------

// UiExecOprCmdReply

// required int32 client_msg_id = 1;
inline bool UiExecOprCmdReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiExecOprCmdReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiExecOprCmdReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiExecOprCmdReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiExecOprCmdReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecOprCmdReply.client_msg_id)
  return client_msg_id_;
}
inline void UiExecOprCmdReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecOprCmdReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiExecOprCmdReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiExecOprCmdReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiExecOprCmdReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiExecOprCmdReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiExecOprCmdReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecOprCmdReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiExecOprCmdReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecOprCmdReply.state)
}

// repeated .dcmd_api.AgentOprCmdReply result = 3;
inline int UiExecOprCmdReply::result_size() const {
  return result_.size();
}
inline void UiExecOprCmdReply::clear_result() {
  result_.Clear();
}
inline const ::dcmd_api::AgentOprCmdReply& UiExecOprCmdReply::result(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecOprCmdReply.result)
  return result_.Get(index);
}
inline ::dcmd_api::AgentOprCmdReply* UiExecOprCmdReply::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecOprCmdReply.result)
  return result_.Mutable(index);
}
inline ::dcmd_api::AgentOprCmdReply* UiExecOprCmdReply::add_result() {
  // @@protoc_insertion_point(field_add:dcmd_api.UiExecOprCmdReply.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply >&
UiExecOprCmdReply::result() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiExecOprCmdReply.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply >*
UiExecOprCmdReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiExecOprCmdReply.result)
  return &result_;
}

// optional bytes err = 4;
inline bool UiExecOprCmdReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiExecOprCmdReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiExecOprCmdReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiExecOprCmdReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiExecOprCmdReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecOprCmdReply.err)
  return *err_;
}
inline void UiExecOprCmdReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecOprCmdReply.err)
}
inline void UiExecOprCmdReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecOprCmdReply.err)
}
inline void UiExecOprCmdReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecOprCmdReply.err)
}
inline ::std::string* UiExecOprCmdReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecOprCmdReply.err)
  return err_;
}
inline ::std::string* UiExecOprCmdReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiExecOprCmdReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiExecOprCmdReply.err)
}

// -------------------------------------------------------------------

// UiExecDupOprCmd

// required int32 client_msg_id = 1;
inline bool UiExecDupOprCmd::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiExecDupOprCmd::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiExecDupOprCmd::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiExecDupOprCmd::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiExecDupOprCmd::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmd.client_msg_id)
  return client_msg_id_;
}
inline void UiExecDupOprCmd::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecDupOprCmd.client_msg_id)
}

// optional bytes dup_opr_name = 2;
inline bool UiExecDupOprCmd::has_dup_opr_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiExecDupOprCmd::set_has_dup_opr_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiExecDupOprCmd::clear_has_dup_opr_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiExecDupOprCmd::clear_dup_opr_name() {
  if (dup_opr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dup_opr_name_->clear();
  }
  clear_has_dup_opr_name();
}
inline const ::std::string& UiExecDupOprCmd::dup_opr_name() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmd.dup_opr_name)
  return *dup_opr_name_;
}
inline void UiExecDupOprCmd::set_dup_opr_name(const ::std::string& value) {
  set_has_dup_opr_name();
  if (dup_opr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dup_opr_name_ = new ::std::string;
  }
  dup_opr_name_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecDupOprCmd.dup_opr_name)
}
inline void UiExecDupOprCmd::set_dup_opr_name(const char* value) {
  set_has_dup_opr_name();
  if (dup_opr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dup_opr_name_ = new ::std::string;
  }
  dup_opr_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecDupOprCmd.dup_opr_name)
}
inline void UiExecDupOprCmd::set_dup_opr_name(const void* value, size_t size) {
  set_has_dup_opr_name();
  if (dup_opr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dup_opr_name_ = new ::std::string;
  }
  dup_opr_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecDupOprCmd.dup_opr_name)
}
inline ::std::string* UiExecDupOprCmd::mutable_dup_opr_name() {
  set_has_dup_opr_name();
  if (dup_opr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dup_opr_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecDupOprCmd.dup_opr_name)
  return dup_opr_name_;
}
inline ::std::string* UiExecDupOprCmd::release_dup_opr_name() {
  clear_has_dup_opr_name();
  if (dup_opr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dup_opr_name_;
    dup_opr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiExecDupOprCmd::set_allocated_dup_opr_name(::std::string* dup_opr_name) {
  if (dup_opr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dup_opr_name_;
  }
  if (dup_opr_name) {
    set_has_dup_opr_name();
    dup_opr_name_ = dup_opr_name;
  } else {
    clear_has_dup_opr_name();
    dup_opr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiExecDupOprCmd.dup_opr_name)
}

// repeated .dcmd_api.KeyValue args = 3;
inline int UiExecDupOprCmd::args_size() const {
  return args_.size();
}
inline void UiExecDupOprCmd::clear_args() {
  args_.Clear();
}
inline const ::dcmd_api::KeyValue& UiExecDupOprCmd::args(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmd.args)
  return args_.Get(index);
}
inline ::dcmd_api::KeyValue* UiExecDupOprCmd::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecDupOprCmd.args)
  return args_.Mutable(index);
}
inline ::dcmd_api::KeyValue* UiExecDupOprCmd::add_args() {
  // @@protoc_insertion_point(field_add:dcmd_api.UiExecDupOprCmd.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::KeyValue >&
UiExecDupOprCmd::args() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiExecDupOprCmd.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::KeyValue >*
UiExecDupOprCmd::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiExecDupOprCmd.args)
  return &args_;
}

// repeated bytes agents = 4;
inline int UiExecDupOprCmd::agents_size() const {
  return agents_.size();
}
inline void UiExecDupOprCmd::clear_agents() {
  agents_.Clear();
}
inline const ::std::string& UiExecDupOprCmd::agents(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmd.agents)
  return agents_.Get(index);
}
inline ::std::string* UiExecDupOprCmd::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecDupOprCmd.agents)
  return agents_.Mutable(index);
}
inline void UiExecDupOprCmd::set_agents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecDupOprCmd.agents)
  agents_.Mutable(index)->assign(value);
}
inline void UiExecDupOprCmd::set_agents(int index, const char* value) {
  agents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecDupOprCmd.agents)
}
inline void UiExecDupOprCmd::set_agents(int index, const void* value, size_t size) {
  agents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecDupOprCmd.agents)
}
inline ::std::string* UiExecDupOprCmd::add_agents() {
  return agents_.Add();
}
inline void UiExecDupOprCmd::add_agents(const ::std::string& value) {
  agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dcmd_api.UiExecDupOprCmd.agents)
}
inline void UiExecDupOprCmd::add_agents(const char* value) {
  agents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dcmd_api.UiExecDupOprCmd.agents)
}
inline void UiExecDupOprCmd::add_agents(const void* value, size_t size) {
  agents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dcmd_api.UiExecDupOprCmd.agents)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UiExecDupOprCmd::agents() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiExecDupOprCmd.agents)
  return agents_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UiExecDupOprCmd::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiExecDupOprCmd.agents)
  return &agents_;
}

// required bytes user = 5;
inline bool UiExecDupOprCmd::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiExecDupOprCmd::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiExecDupOprCmd::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiExecDupOprCmd::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiExecDupOprCmd::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmd.user)
  return *user_;
}
inline void UiExecDupOprCmd::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecDupOprCmd.user)
}
inline void UiExecDupOprCmd::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecDupOprCmd.user)
}
inline void UiExecDupOprCmd::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecDupOprCmd.user)
}
inline ::std::string* UiExecDupOprCmd::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecDupOprCmd.user)
  return user_;
}
inline ::std::string* UiExecDupOprCmd::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiExecDupOprCmd::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiExecDupOprCmd.user)
}

// required bytes passwd = 6;
inline bool UiExecDupOprCmd::has_passwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UiExecDupOprCmd::set_has_passwd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UiExecDupOprCmd::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UiExecDupOprCmd::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiExecDupOprCmd::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmd.passwd)
  return *passwd_;
}
inline void UiExecDupOprCmd::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecDupOprCmd.passwd)
}
inline void UiExecDupOprCmd::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecDupOprCmd.passwd)
}
inline void UiExecDupOprCmd::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecDupOprCmd.passwd)
}
inline ::std::string* UiExecDupOprCmd::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecDupOprCmd.passwd)
  return passwd_;
}
inline ::std::string* UiExecDupOprCmd::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiExecDupOprCmd::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiExecDupOprCmd.passwd)
}

// -------------------------------------------------------------------

// UiExecDupOprCmdReply

// required int32 client_msg_id = 1;
inline bool UiExecDupOprCmdReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiExecDupOprCmdReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiExecDupOprCmdReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiExecDupOprCmdReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiExecDupOprCmdReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmdReply.client_msg_id)
  return client_msg_id_;
}
inline void UiExecDupOprCmdReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecDupOprCmdReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiExecDupOprCmdReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiExecDupOprCmdReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiExecDupOprCmdReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiExecDupOprCmdReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiExecDupOprCmdReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmdReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiExecDupOprCmdReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecDupOprCmdReply.state)
}

// repeated .dcmd_api.AgentOprCmdReply result = 3;
inline int UiExecDupOprCmdReply::result_size() const {
  return result_.size();
}
inline void UiExecDupOprCmdReply::clear_result() {
  result_.Clear();
}
inline const ::dcmd_api::AgentOprCmdReply& UiExecDupOprCmdReply::result(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmdReply.result)
  return result_.Get(index);
}
inline ::dcmd_api::AgentOprCmdReply* UiExecDupOprCmdReply::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecDupOprCmdReply.result)
  return result_.Mutable(index);
}
inline ::dcmd_api::AgentOprCmdReply* UiExecDupOprCmdReply::add_result() {
  // @@protoc_insertion_point(field_add:dcmd_api.UiExecDupOprCmdReply.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply >&
UiExecDupOprCmdReply::result() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiExecDupOprCmdReply.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentOprCmdReply >*
UiExecDupOprCmdReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiExecDupOprCmdReply.result)
  return &result_;
}

// optional bytes err = 4;
inline bool UiExecDupOprCmdReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiExecDupOprCmdReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiExecDupOprCmdReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiExecDupOprCmdReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiExecDupOprCmdReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiExecDupOprCmdReply.err)
  return *err_;
}
inline void UiExecDupOprCmdReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiExecDupOprCmdReply.err)
}
inline void UiExecDupOprCmdReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiExecDupOprCmdReply.err)
}
inline void UiExecDupOprCmdReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiExecDupOprCmdReply.err)
}
inline ::std::string* UiExecDupOprCmdReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiExecDupOprCmdReply.err)
  return err_;
}
inline ::std::string* UiExecDupOprCmdReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiExecDupOprCmdReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiExecDupOprCmdReply.err)
}

// -------------------------------------------------------------------

// UiAgentInfo

// required int32 client_msg_id = 1;
inline bool UiAgentInfo::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentInfo::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentInfo::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentInfo::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentInfo::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfo.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentInfo::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentInfo.client_msg_id)
}

// repeated bytes ips = 2;
inline int UiAgentInfo::ips_size() const {
  return ips_.size();
}
inline void UiAgentInfo::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& UiAgentInfo::ips(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfo.ips)
  return ips_.Get(index);
}
inline ::std::string* UiAgentInfo::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentInfo.ips)
  return ips_.Mutable(index);
}
inline void UiAgentInfo::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentInfo.ips)
  ips_.Mutable(index)->assign(value);
}
inline void UiAgentInfo::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentInfo.ips)
}
inline void UiAgentInfo::set_ips(int index, const void* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentInfo.ips)
}
inline ::std::string* UiAgentInfo::add_ips() {
  return ips_.Add();
}
inline void UiAgentInfo::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dcmd_api.UiAgentInfo.ips)
}
inline void UiAgentInfo::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dcmd_api.UiAgentInfo.ips)
}
inline void UiAgentInfo::add_ips(const void* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dcmd_api.UiAgentInfo.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UiAgentInfo::ips() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiAgentInfo.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UiAgentInfo::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiAgentInfo.ips)
  return &ips_;
}

// required bool version = 3;
inline bool UiAgentInfo::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiAgentInfo::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiAgentInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiAgentInfo::clear_version() {
  version_ = false;
  clear_has_version();
}
inline bool UiAgentInfo::version() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfo.version)
  return version_;
}
inline void UiAgentInfo::set_version(bool value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentInfo.version)
}

// required bytes user = 4;
inline bool UiAgentInfo::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentInfo::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiAgentInfo::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfo.user)
  return *user_;
}
inline void UiAgentInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentInfo.user)
}
inline void UiAgentInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentInfo.user)
}
inline void UiAgentInfo::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentInfo.user)
}
inline ::std::string* UiAgentInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentInfo.user)
  return user_;
}
inline ::std::string* UiAgentInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentInfo.user)
}

// required bytes passwd = 5;
inline bool UiAgentInfo::has_passwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiAgentInfo::set_has_passwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiAgentInfo::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiAgentInfo::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiAgentInfo::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfo.passwd)
  return *passwd_;
}
inline void UiAgentInfo::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentInfo.passwd)
}
inline void UiAgentInfo::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentInfo.passwd)
}
inline void UiAgentInfo::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentInfo.passwd)
}
inline ::std::string* UiAgentInfo::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentInfo.passwd)
  return passwd_;
}
inline ::std::string* UiAgentInfo::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentInfo::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentInfo.passwd)
}

// -------------------------------------------------------------------

// UiAgentInfoReply

// required int32 client_msg_id = 1;
inline bool UiAgentInfoReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentInfoReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentInfoReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentInfoReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentInfoReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfoReply.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentInfoReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentInfoReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiAgentInfoReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentInfoReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentInfoReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentInfoReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiAgentInfoReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfoReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiAgentInfoReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentInfoReply.state)
}

// repeated .dcmd_api.AgentInfo agentinfo = 3;
inline int UiAgentInfoReply::agentinfo_size() const {
  return agentinfo_.size();
}
inline void UiAgentInfoReply::clear_agentinfo() {
  agentinfo_.Clear();
}
inline const ::dcmd_api::AgentInfo& UiAgentInfoReply::agentinfo(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfoReply.agentinfo)
  return agentinfo_.Get(index);
}
inline ::dcmd_api::AgentInfo* UiAgentInfoReply::mutable_agentinfo(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentInfoReply.agentinfo)
  return agentinfo_.Mutable(index);
}
inline ::dcmd_api::AgentInfo* UiAgentInfoReply::add_agentinfo() {
  // @@protoc_insertion_point(field_add:dcmd_api.UiAgentInfoReply.agentinfo)
  return agentinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo >&
UiAgentInfoReply::agentinfo() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiAgentInfoReply.agentinfo)
  return agentinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo >*
UiAgentInfoReply::mutable_agentinfo() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiAgentInfoReply.agentinfo)
  return &agentinfo_;
}

// optional bytes err = 4;
inline bool UiAgentInfoReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentInfoReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentInfoReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentInfoReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiAgentInfoReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentInfoReply.err)
  return *err_;
}
inline void UiAgentInfoReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentInfoReply.err)
}
inline void UiAgentInfoReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentInfoReply.err)
}
inline void UiAgentInfoReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentInfoReply.err)
}
inline ::std::string* UiAgentInfoReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentInfoReply.err)
  return err_;
}
inline ::std::string* UiAgentInfoReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentInfoReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentInfoReply.err)
}

// -------------------------------------------------------------------

// UiInvalidAgentInfo

// required int32 client_msg_id = 1;
inline bool UiInvalidAgentInfo::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiInvalidAgentInfo::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiInvalidAgentInfo::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiInvalidAgentInfo::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiInvalidAgentInfo::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiInvalidAgentInfo.client_msg_id)
  return client_msg_id_;
}
inline void UiInvalidAgentInfo::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiInvalidAgentInfo.client_msg_id)
}

// required bytes user = 2;
inline bool UiInvalidAgentInfo::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiInvalidAgentInfo::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiInvalidAgentInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiInvalidAgentInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiInvalidAgentInfo::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiInvalidAgentInfo.user)
  return *user_;
}
inline void UiInvalidAgentInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiInvalidAgentInfo.user)
}
inline void UiInvalidAgentInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiInvalidAgentInfo.user)
}
inline void UiInvalidAgentInfo::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiInvalidAgentInfo.user)
}
inline ::std::string* UiInvalidAgentInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiInvalidAgentInfo.user)
  return user_;
}
inline ::std::string* UiInvalidAgentInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiInvalidAgentInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiInvalidAgentInfo.user)
}

// required bytes passwd = 3;
inline bool UiInvalidAgentInfo::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiInvalidAgentInfo::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiInvalidAgentInfo::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiInvalidAgentInfo::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiInvalidAgentInfo::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiInvalidAgentInfo.passwd)
  return *passwd_;
}
inline void UiInvalidAgentInfo::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiInvalidAgentInfo.passwd)
}
inline void UiInvalidAgentInfo::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiInvalidAgentInfo.passwd)
}
inline void UiInvalidAgentInfo::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiInvalidAgentInfo.passwd)
}
inline ::std::string* UiInvalidAgentInfo::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiInvalidAgentInfo.passwd)
  return passwd_;
}
inline ::std::string* UiInvalidAgentInfo::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiInvalidAgentInfo::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiInvalidAgentInfo.passwd)
}

// -------------------------------------------------------------------

// UiInvalidAgentInfoReply

// required int32 client_msg_id = 1;
inline bool UiInvalidAgentInfoReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiInvalidAgentInfoReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiInvalidAgentInfoReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiInvalidAgentInfoReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiInvalidAgentInfoReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiInvalidAgentInfoReply.client_msg_id)
  return client_msg_id_;
}
inline void UiInvalidAgentInfoReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiInvalidAgentInfoReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiInvalidAgentInfoReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiInvalidAgentInfoReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiInvalidAgentInfoReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiInvalidAgentInfoReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiInvalidAgentInfoReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiInvalidAgentInfoReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiInvalidAgentInfoReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiInvalidAgentInfoReply.state)
}

// repeated .dcmd_api.AgentInfo agentinfo = 3;
inline int UiInvalidAgentInfoReply::agentinfo_size() const {
  return agentinfo_.size();
}
inline void UiInvalidAgentInfoReply::clear_agentinfo() {
  agentinfo_.Clear();
}
inline const ::dcmd_api::AgentInfo& UiInvalidAgentInfoReply::agentinfo(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiInvalidAgentInfoReply.agentinfo)
  return agentinfo_.Get(index);
}
inline ::dcmd_api::AgentInfo* UiInvalidAgentInfoReply::mutable_agentinfo(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiInvalidAgentInfoReply.agentinfo)
  return agentinfo_.Mutable(index);
}
inline ::dcmd_api::AgentInfo* UiInvalidAgentInfoReply::add_agentinfo() {
  // @@protoc_insertion_point(field_add:dcmd_api.UiInvalidAgentInfoReply.agentinfo)
  return agentinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo >&
UiInvalidAgentInfoReply::agentinfo() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiInvalidAgentInfoReply.agentinfo)
  return agentinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::AgentInfo >*
UiInvalidAgentInfoReply::mutable_agentinfo() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiInvalidAgentInfoReply.agentinfo)
  return &agentinfo_;
}

// optional bytes err = 4;
inline bool UiInvalidAgentInfoReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiInvalidAgentInfoReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiInvalidAgentInfoReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiInvalidAgentInfoReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiInvalidAgentInfoReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiInvalidAgentInfoReply.err)
  return *err_;
}
inline void UiInvalidAgentInfoReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiInvalidAgentInfoReply.err)
}
inline void UiInvalidAgentInfoReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiInvalidAgentInfoReply.err)
}
inline void UiInvalidAgentInfoReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiInvalidAgentInfoReply.err)
}
inline ::std::string* UiInvalidAgentInfoReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiInvalidAgentInfoReply.err)
  return err_;
}
inline ::std::string* UiInvalidAgentInfoReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiInvalidAgentInfoReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiInvalidAgentInfoReply.err)
}

// -------------------------------------------------------------------

// UiTaskScriptInfo

// required int32 client_msg_id = 1;
inline bool UiTaskScriptInfo::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiTaskScriptInfo::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiTaskScriptInfo::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiTaskScriptInfo::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiTaskScriptInfo::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfo.client_msg_id)
  return client_msg_id_;
}
inline void UiTaskScriptInfo::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfo.client_msg_id)
}

// required bytes task_cmd = 2;
inline bool UiTaskScriptInfo::has_task_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiTaskScriptInfo::set_has_task_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiTaskScriptInfo::clear_has_task_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiTaskScriptInfo::clear_task_cmd() {
  if (task_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_->clear();
  }
  clear_has_task_cmd();
}
inline const ::std::string& UiTaskScriptInfo::task_cmd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfo.task_cmd)
  return *task_cmd_;
}
inline void UiTaskScriptInfo::set_task_cmd(const ::std::string& value) {
  set_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_ = new ::std::string;
  }
  task_cmd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfo.task_cmd)
}
inline void UiTaskScriptInfo::set_task_cmd(const char* value) {
  set_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_ = new ::std::string;
  }
  task_cmd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskScriptInfo.task_cmd)
}
inline void UiTaskScriptInfo::set_task_cmd(const void* value, size_t size) {
  set_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_ = new ::std::string;
  }
  task_cmd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskScriptInfo.task_cmd)
}
inline ::std::string* UiTaskScriptInfo::mutable_task_cmd() {
  set_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_cmd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskScriptInfo.task_cmd)
  return task_cmd_;
}
inline ::std::string* UiTaskScriptInfo::release_task_cmd() {
  clear_has_task_cmd();
  if (task_cmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_cmd_;
    task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskScriptInfo::set_allocated_task_cmd(::std::string* task_cmd) {
  if (task_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_cmd_;
  }
  if (task_cmd) {
    set_has_task_cmd();
    task_cmd_ = task_cmd;
  } else {
    clear_has_task_cmd();
    task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskScriptInfo.task_cmd)
}

// required bytes user = 3;
inline bool UiTaskScriptInfo::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiTaskScriptInfo::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiTaskScriptInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiTaskScriptInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiTaskScriptInfo::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfo.user)
  return *user_;
}
inline void UiTaskScriptInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfo.user)
}
inline void UiTaskScriptInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskScriptInfo.user)
}
inline void UiTaskScriptInfo::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskScriptInfo.user)
}
inline ::std::string* UiTaskScriptInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskScriptInfo.user)
  return user_;
}
inline ::std::string* UiTaskScriptInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskScriptInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskScriptInfo.user)
}

// required bytes passwd = 4;
inline bool UiTaskScriptInfo::has_passwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiTaskScriptInfo::set_has_passwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiTaskScriptInfo::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiTaskScriptInfo::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiTaskScriptInfo::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfo.passwd)
  return *passwd_;
}
inline void UiTaskScriptInfo::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfo.passwd)
}
inline void UiTaskScriptInfo::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskScriptInfo.passwd)
}
inline void UiTaskScriptInfo::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskScriptInfo.passwd)
}
inline ::std::string* UiTaskScriptInfo::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskScriptInfo.passwd)
  return passwd_;
}
inline ::std::string* UiTaskScriptInfo::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskScriptInfo::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskScriptInfo.passwd)
}

// -------------------------------------------------------------------

// UiTaskScriptInfoReply

// required int32 client_msg_id = 1;
inline bool UiTaskScriptInfoReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiTaskScriptInfoReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiTaskScriptInfoReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiTaskScriptInfoReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiTaskScriptInfoReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfoReply.client_msg_id)
  return client_msg_id_;
}
inline void UiTaskScriptInfoReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfoReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiTaskScriptInfoReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiTaskScriptInfoReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiTaskScriptInfoReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiTaskScriptInfoReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiTaskScriptInfoReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfoReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiTaskScriptInfoReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfoReply.state)
}

// optional bytes script = 3;
inline bool UiTaskScriptInfoReply::has_script() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiTaskScriptInfoReply::set_has_script() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiTaskScriptInfoReply::clear_has_script() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiTaskScriptInfoReply::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& UiTaskScriptInfoReply::script() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfoReply.script)
  return *script_;
}
inline void UiTaskScriptInfoReply::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfoReply.script)
}
inline void UiTaskScriptInfoReply::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskScriptInfoReply.script)
}
inline void UiTaskScriptInfoReply::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskScriptInfoReply.script)
}
inline ::std::string* UiTaskScriptInfoReply::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskScriptInfoReply.script)
  return script_;
}
inline ::std::string* UiTaskScriptInfoReply::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskScriptInfoReply::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskScriptInfoReply.script)
}

// optional bytes err = 4;
inline bool UiTaskScriptInfoReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiTaskScriptInfoReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiTaskScriptInfoReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiTaskScriptInfoReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiTaskScriptInfoReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfoReply.err)
  return *err_;
}
inline void UiTaskScriptInfoReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfoReply.err)
}
inline void UiTaskScriptInfoReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskScriptInfoReply.err)
}
inline void UiTaskScriptInfoReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskScriptInfoReply.err)
}
inline ::std::string* UiTaskScriptInfoReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskScriptInfoReply.err)
  return err_;
}
inline ::std::string* UiTaskScriptInfoReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskScriptInfoReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskScriptInfoReply.err)
}

// optional bytes md5 = 5;
inline bool UiTaskScriptInfoReply::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiTaskScriptInfoReply::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiTaskScriptInfoReply::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiTaskScriptInfoReply::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& UiTaskScriptInfoReply::md5() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskScriptInfoReply.md5)
  return *md5_;
}
inline void UiTaskScriptInfoReply::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskScriptInfoReply.md5)
}
inline void UiTaskScriptInfoReply::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskScriptInfoReply.md5)
}
inline void UiTaskScriptInfoReply::set_md5(const void* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskScriptInfoReply.md5)
}
inline ::std::string* UiTaskScriptInfoReply::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskScriptInfoReply.md5)
  return md5_;
}
inline ::std::string* UiTaskScriptInfoReply::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskScriptInfoReply::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskScriptInfoReply.md5)
}

// -------------------------------------------------------------------

// UiOprScriptInfo

// required int32 client_msg_id = 1;
inline bool UiOprScriptInfo::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiOprScriptInfo::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiOprScriptInfo::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiOprScriptInfo::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiOprScriptInfo::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfo.client_msg_id)
  return client_msg_id_;
}
inline void UiOprScriptInfo::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfo.client_msg_id)
}

// required bytes opr_file = 2;
inline bool UiOprScriptInfo::has_opr_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiOprScriptInfo::set_has_opr_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiOprScriptInfo::clear_has_opr_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiOprScriptInfo::clear_opr_file() {
  if (opr_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_file_->clear();
  }
  clear_has_opr_file();
}
inline const ::std::string& UiOprScriptInfo::opr_file() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfo.opr_file)
  return *opr_file_;
}
inline void UiOprScriptInfo::set_opr_file(const ::std::string& value) {
  set_has_opr_file();
  if (opr_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_file_ = new ::std::string;
  }
  opr_file_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfo.opr_file)
}
inline void UiOprScriptInfo::set_opr_file(const char* value) {
  set_has_opr_file();
  if (opr_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_file_ = new ::std::string;
  }
  opr_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiOprScriptInfo.opr_file)
}
inline void UiOprScriptInfo::set_opr_file(const void* value, size_t size) {
  set_has_opr_file();
  if (opr_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_file_ = new ::std::string;
  }
  opr_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiOprScriptInfo.opr_file)
}
inline ::std::string* UiOprScriptInfo::mutable_opr_file() {
  set_has_opr_file();
  if (opr_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    opr_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiOprScriptInfo.opr_file)
  return opr_file_;
}
inline ::std::string* UiOprScriptInfo::release_opr_file() {
  clear_has_opr_file();
  if (opr_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = opr_file_;
    opr_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiOprScriptInfo::set_allocated_opr_file(::std::string* opr_file) {
  if (opr_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opr_file_;
  }
  if (opr_file) {
    set_has_opr_file();
    opr_file_ = opr_file;
  } else {
    clear_has_opr_file();
    opr_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiOprScriptInfo.opr_file)
}

// required bytes user = 3;
inline bool UiOprScriptInfo::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiOprScriptInfo::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiOprScriptInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiOprScriptInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiOprScriptInfo::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfo.user)
  return *user_;
}
inline void UiOprScriptInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfo.user)
}
inline void UiOprScriptInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiOprScriptInfo.user)
}
inline void UiOprScriptInfo::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiOprScriptInfo.user)
}
inline ::std::string* UiOprScriptInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiOprScriptInfo.user)
  return user_;
}
inline ::std::string* UiOprScriptInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiOprScriptInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiOprScriptInfo.user)
}

// required bytes passwd = 4;
inline bool UiOprScriptInfo::has_passwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiOprScriptInfo::set_has_passwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiOprScriptInfo::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiOprScriptInfo::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiOprScriptInfo::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfo.passwd)
  return *passwd_;
}
inline void UiOprScriptInfo::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfo.passwd)
}
inline void UiOprScriptInfo::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiOprScriptInfo.passwd)
}
inline void UiOprScriptInfo::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiOprScriptInfo.passwd)
}
inline ::std::string* UiOprScriptInfo::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiOprScriptInfo.passwd)
  return passwd_;
}
inline ::std::string* UiOprScriptInfo::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiOprScriptInfo::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiOprScriptInfo.passwd)
}

// -------------------------------------------------------------------

// UiOprScriptInfoReply

// required int32 client_msg_id = 1;
inline bool UiOprScriptInfoReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiOprScriptInfoReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiOprScriptInfoReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiOprScriptInfoReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiOprScriptInfoReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfoReply.client_msg_id)
  return client_msg_id_;
}
inline void UiOprScriptInfoReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfoReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiOprScriptInfoReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiOprScriptInfoReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiOprScriptInfoReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiOprScriptInfoReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiOprScriptInfoReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfoReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiOprScriptInfoReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfoReply.state)
}

// optional bytes script = 3;
inline bool UiOprScriptInfoReply::has_script() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiOprScriptInfoReply::set_has_script() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiOprScriptInfoReply::clear_has_script() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiOprScriptInfoReply::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& UiOprScriptInfoReply::script() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfoReply.script)
  return *script_;
}
inline void UiOprScriptInfoReply::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfoReply.script)
}
inline void UiOprScriptInfoReply::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiOprScriptInfoReply.script)
}
inline void UiOprScriptInfoReply::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiOprScriptInfoReply.script)
}
inline ::std::string* UiOprScriptInfoReply::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiOprScriptInfoReply.script)
  return script_;
}
inline ::std::string* UiOprScriptInfoReply::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiOprScriptInfoReply::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiOprScriptInfoReply.script)
}

// optional bytes err = 4;
inline bool UiOprScriptInfoReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiOprScriptInfoReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiOprScriptInfoReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiOprScriptInfoReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiOprScriptInfoReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfoReply.err)
  return *err_;
}
inline void UiOprScriptInfoReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfoReply.err)
}
inline void UiOprScriptInfoReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiOprScriptInfoReply.err)
}
inline void UiOprScriptInfoReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiOprScriptInfoReply.err)
}
inline ::std::string* UiOprScriptInfoReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiOprScriptInfoReply.err)
  return err_;
}
inline ::std::string* UiOprScriptInfoReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiOprScriptInfoReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiOprScriptInfoReply.err)
}

// optional bytes md5 = 5;
inline bool UiOprScriptInfoReply::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiOprScriptInfoReply::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiOprScriptInfoReply::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiOprScriptInfoReply::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& UiOprScriptInfoReply::md5() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiOprScriptInfoReply.md5)
  return *md5_;
}
inline void UiOprScriptInfoReply::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiOprScriptInfoReply.md5)
}
inline void UiOprScriptInfoReply::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiOprScriptInfoReply.md5)
}
inline void UiOprScriptInfoReply::set_md5(const void* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiOprScriptInfoReply.md5)
}
inline ::std::string* UiOprScriptInfoReply::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiOprScriptInfoReply.md5)
  return md5_;
}
inline ::std::string* UiOprScriptInfoReply::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiOprScriptInfoReply::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiOprScriptInfoReply.md5)
}

// -------------------------------------------------------------------

// UiScriptInfo

// required int32 client_msg_id = 1;
inline bool UiScriptInfo::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiScriptInfo::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiScriptInfo::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiScriptInfo::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiScriptInfo::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfo.client_msg_id)
  return client_msg_id_;
}
inline void UiScriptInfo::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfo.client_msg_id)
}

// required bytes script_file = 2;
inline bool UiScriptInfo::has_script_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiScriptInfo::set_has_script_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiScriptInfo::clear_has_script_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiScriptInfo::clear_script_file() {
  if (script_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_file_->clear();
  }
  clear_has_script_file();
}
inline const ::std::string& UiScriptInfo::script_file() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfo.script_file)
  return *script_file_;
}
inline void UiScriptInfo::set_script_file(const ::std::string& value) {
  set_has_script_file();
  if (script_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_file_ = new ::std::string;
  }
  script_file_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfo.script_file)
}
inline void UiScriptInfo::set_script_file(const char* value) {
  set_has_script_file();
  if (script_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_file_ = new ::std::string;
  }
  script_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScriptInfo.script_file)
}
inline void UiScriptInfo::set_script_file(const void* value, size_t size) {
  set_has_script_file();
  if (script_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_file_ = new ::std::string;
  }
  script_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScriptInfo.script_file)
}
inline ::std::string* UiScriptInfo::mutable_script_file() {
  set_has_script_file();
  if (script_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScriptInfo.script_file)
  return script_file_;
}
inline ::std::string* UiScriptInfo::release_script_file() {
  clear_has_script_file();
  if (script_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_file_;
    script_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScriptInfo::set_allocated_script_file(::std::string* script_file) {
  if (script_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_file_;
  }
  if (script_file) {
    set_has_script_file();
    script_file_ = script_file;
  } else {
    clear_has_script_file();
    script_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScriptInfo.script_file)
}

// required .dcmd_api.UiScriptType script_type = 3;
inline bool UiScriptInfo::has_script_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiScriptInfo::set_has_script_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiScriptInfo::clear_has_script_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiScriptInfo::clear_script_type() {
  script_type_ = 1;
  clear_has_script_type();
}
inline ::dcmd_api::UiScriptType UiScriptInfo::script_type() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfo.script_type)
  return static_cast< ::dcmd_api::UiScriptType >(script_type_);
}
inline void UiScriptInfo::set_script_type(::dcmd_api::UiScriptType value) {
  assert(::dcmd_api::UiScriptType_IsValid(value));
  set_has_script_type();
  script_type_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfo.script_type)
}

// required bytes user = 4;
inline bool UiScriptInfo::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiScriptInfo::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiScriptInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiScriptInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiScriptInfo::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfo.user)
  return *user_;
}
inline void UiScriptInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfo.user)
}
inline void UiScriptInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScriptInfo.user)
}
inline void UiScriptInfo::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScriptInfo.user)
}
inline ::std::string* UiScriptInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScriptInfo.user)
  return user_;
}
inline ::std::string* UiScriptInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScriptInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScriptInfo.user)
}

// required bytes passwd = 5;
inline bool UiScriptInfo::has_passwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiScriptInfo::set_has_passwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiScriptInfo::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiScriptInfo::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiScriptInfo::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfo.passwd)
  return *passwd_;
}
inline void UiScriptInfo::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfo.passwd)
}
inline void UiScriptInfo::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScriptInfo.passwd)
}
inline void UiScriptInfo::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScriptInfo.passwd)
}
inline ::std::string* UiScriptInfo::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScriptInfo.passwd)
  return passwd_;
}
inline ::std::string* UiScriptInfo::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScriptInfo::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScriptInfo.passwd)
}

// -------------------------------------------------------------------

// UiScriptInfoReply

// required int32 client_msg_id = 1;
inline bool UiScriptInfoReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiScriptInfoReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiScriptInfoReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiScriptInfoReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiScriptInfoReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfoReply.client_msg_id)
  return client_msg_id_;
}
inline void UiScriptInfoReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfoReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiScriptInfoReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiScriptInfoReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiScriptInfoReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiScriptInfoReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiScriptInfoReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfoReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiScriptInfoReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfoReply.state)
}

// optional bytes script = 3;
inline bool UiScriptInfoReply::has_script() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiScriptInfoReply::set_has_script() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiScriptInfoReply::clear_has_script() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiScriptInfoReply::clear_script() {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_->clear();
  }
  clear_has_script();
}
inline const ::std::string& UiScriptInfoReply::script() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfoReply.script)
  return *script_;
}
inline void UiScriptInfoReply::set_script(const ::std::string& value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfoReply.script)
}
inline void UiScriptInfoReply::set_script(const char* value) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScriptInfoReply.script)
}
inline void UiScriptInfoReply::set_script(const void* value, size_t size) {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  script_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScriptInfoReply.script)
}
inline ::std::string* UiScriptInfoReply::mutable_script() {
  set_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScriptInfoReply.script)
  return script_;
}
inline ::std::string* UiScriptInfoReply::release_script() {
  clear_has_script();
  if (script_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_;
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScriptInfoReply::set_allocated_script(::std::string* script) {
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (script) {
    set_has_script();
    script_ = script;
  } else {
    clear_has_script();
    script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScriptInfoReply.script)
}

// optional bytes err = 4;
inline bool UiScriptInfoReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiScriptInfoReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiScriptInfoReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiScriptInfoReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiScriptInfoReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfoReply.err)
  return *err_;
}
inline void UiScriptInfoReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfoReply.err)
}
inline void UiScriptInfoReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScriptInfoReply.err)
}
inline void UiScriptInfoReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScriptInfoReply.err)
}
inline ::std::string* UiScriptInfoReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScriptInfoReply.err)
  return err_;
}
inline ::std::string* UiScriptInfoReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScriptInfoReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScriptInfoReply.err)
}

// optional bytes md5 = 5;
inline bool UiScriptInfoReply::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiScriptInfoReply::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiScriptInfoReply::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiScriptInfoReply::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& UiScriptInfoReply::md5() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptInfoReply.md5)
  return *md5_;
}
inline void UiScriptInfoReply::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptInfoReply.md5)
}
inline void UiScriptInfoReply::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScriptInfoReply.md5)
}
inline void UiScriptInfoReply::set_md5(const void* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScriptInfoReply.md5)
}
inline ::std::string* UiScriptInfoReply::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScriptInfoReply.md5)
  return md5_;
}
inline ::std::string* UiScriptInfoReply::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScriptInfoReply::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScriptInfoReply.md5)
}

// -------------------------------------------------------------------

// UiScripts

// required int32 client_msg_id = 1;
inline bool UiScripts::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiScripts::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiScripts::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiScripts::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiScripts::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScripts.client_msg_id)
  return client_msg_id_;
}
inline void UiScripts::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScripts.client_msg_id)
}

// required .dcmd_api.UiScriptType script_type = 2;
inline bool UiScripts::has_script_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiScripts::set_has_script_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiScripts::clear_has_script_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiScripts::clear_script_type() {
  script_type_ = 1;
  clear_has_script_type();
}
inline ::dcmd_api::UiScriptType UiScripts::script_type() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScripts.script_type)
  return static_cast< ::dcmd_api::UiScriptType >(script_type_);
}
inline void UiScripts::set_script_type(::dcmd_api::UiScriptType value) {
  assert(::dcmd_api::UiScriptType_IsValid(value));
  set_has_script_type();
  script_type_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScripts.script_type)
}

// required bytes script_prefix = 3;
inline bool UiScripts::has_script_prefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiScripts::set_has_script_prefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiScripts::clear_has_script_prefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiScripts::clear_script_prefix() {
  if (script_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_prefix_->clear();
  }
  clear_has_script_prefix();
}
inline const ::std::string& UiScripts::script_prefix() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScripts.script_prefix)
  return *script_prefix_;
}
inline void UiScripts::set_script_prefix(const ::std::string& value) {
  set_has_script_prefix();
  if (script_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_prefix_ = new ::std::string;
  }
  script_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScripts.script_prefix)
}
inline void UiScripts::set_script_prefix(const char* value) {
  set_has_script_prefix();
  if (script_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_prefix_ = new ::std::string;
  }
  script_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScripts.script_prefix)
}
inline void UiScripts::set_script_prefix(const void* value, size_t size) {
  set_has_script_prefix();
  if (script_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_prefix_ = new ::std::string;
  }
  script_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScripts.script_prefix)
}
inline ::std::string* UiScripts::mutable_script_prefix() {
  set_has_script_prefix();
  if (script_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    script_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScripts.script_prefix)
  return script_prefix_;
}
inline ::std::string* UiScripts::release_script_prefix() {
  clear_has_script_prefix();
  if (script_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = script_prefix_;
    script_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScripts::set_allocated_script_prefix(::std::string* script_prefix) {
  if (script_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_prefix_;
  }
  if (script_prefix) {
    set_has_script_prefix();
    script_prefix_ = script_prefix;
  } else {
    clear_has_script_prefix();
    script_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScripts.script_prefix)
}

// required int32 fetch_num = 4;
inline bool UiScripts::has_fetch_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiScripts::set_has_fetch_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiScripts::clear_has_fetch_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiScripts::clear_fetch_num() {
  fetch_num_ = 0;
  clear_has_fetch_num();
}
inline ::google::protobuf::int32 UiScripts::fetch_num() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScripts.fetch_num)
  return fetch_num_;
}
inline void UiScripts::set_fetch_num(::google::protobuf::int32 value) {
  set_has_fetch_num();
  fetch_num_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScripts.fetch_num)
}

// required bytes user = 5;
inline bool UiScripts::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiScripts::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiScripts::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiScripts::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiScripts::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScripts.user)
  return *user_;
}
inline void UiScripts::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScripts.user)
}
inline void UiScripts::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScripts.user)
}
inline void UiScripts::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScripts.user)
}
inline ::std::string* UiScripts::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScripts.user)
  return user_;
}
inline ::std::string* UiScripts::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScripts::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScripts.user)
}

// required bytes passwd = 6;
inline bool UiScripts::has_passwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UiScripts::set_has_passwd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UiScripts::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UiScripts::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiScripts::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScripts.passwd)
  return *passwd_;
}
inline void UiScripts::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScripts.passwd)
}
inline void UiScripts::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScripts.passwd)
}
inline void UiScripts::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScripts.passwd)
}
inline ::std::string* UiScripts::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScripts.passwd)
  return passwd_;
}
inline ::std::string* UiScripts::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScripts::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScripts.passwd)
}

// -------------------------------------------------------------------

// UiScriptsReply

// required int32 client_msg_id = 1;
inline bool UiScriptsReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiScriptsReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiScriptsReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiScriptsReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiScriptsReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptsReply.client_msg_id)
  return client_msg_id_;
}
inline void UiScriptsReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptsReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiScriptsReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiScriptsReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiScriptsReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiScriptsReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiScriptsReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptsReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiScriptsReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptsReply.state)
}

// repeated bytes scripts = 3;
inline int UiScriptsReply::scripts_size() const {
  return scripts_.size();
}
inline void UiScriptsReply::clear_scripts() {
  scripts_.Clear();
}
inline const ::std::string& UiScriptsReply::scripts(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptsReply.scripts)
  return scripts_.Get(index);
}
inline ::std::string* UiScriptsReply::mutable_scripts(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScriptsReply.scripts)
  return scripts_.Mutable(index);
}
inline void UiScriptsReply::set_scripts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptsReply.scripts)
  scripts_.Mutable(index)->assign(value);
}
inline void UiScriptsReply::set_scripts(int index, const char* value) {
  scripts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScriptsReply.scripts)
}
inline void UiScriptsReply::set_scripts(int index, const void* value, size_t size) {
  scripts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScriptsReply.scripts)
}
inline ::std::string* UiScriptsReply::add_scripts() {
  return scripts_.Add();
}
inline void UiScriptsReply::add_scripts(const ::std::string& value) {
  scripts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dcmd_api.UiScriptsReply.scripts)
}
inline void UiScriptsReply::add_scripts(const char* value) {
  scripts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dcmd_api.UiScriptsReply.scripts)
}
inline void UiScriptsReply::add_scripts(const void* value, size_t size) {
  scripts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dcmd_api.UiScriptsReply.scripts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UiScriptsReply::scripts() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiScriptsReply.scripts)
  return scripts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UiScriptsReply::mutable_scripts() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiScriptsReply.scripts)
  return &scripts_;
}

// optional bytes err = 4;
inline bool UiScriptsReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiScriptsReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiScriptsReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiScriptsReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiScriptsReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiScriptsReply.err)
  return *err_;
}
inline void UiScriptsReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiScriptsReply.err)
}
inline void UiScriptsReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiScriptsReply.err)
}
inline void UiScriptsReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiScriptsReply.err)
}
inline ::std::string* UiScriptsReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiScriptsReply.err)
  return err_;
}
inline ::std::string* UiScriptsReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiScriptsReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiScriptsReply.err)
}

// -------------------------------------------------------------------

// UiAgentTaskProcess

// required int32 client_msg_id = 1;
inline bool UiAgentTaskProcess::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentTaskProcess::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentTaskProcess::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentTaskProcess::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentTaskProcess::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentTaskProcess.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentTaskProcess::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentTaskProcess.client_msg_id)
}

// repeated bytes subtask_id = 2;
inline int UiAgentTaskProcess::subtask_id_size() const {
  return subtask_id_.size();
}
inline void UiAgentTaskProcess::clear_subtask_id() {
  subtask_id_.Clear();
}
inline const ::std::string& UiAgentTaskProcess::subtask_id(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentTaskProcess.subtask_id)
  return subtask_id_.Get(index);
}
inline ::std::string* UiAgentTaskProcess::mutable_subtask_id(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentTaskProcess.subtask_id)
  return subtask_id_.Mutable(index);
}
inline void UiAgentTaskProcess::set_subtask_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentTaskProcess.subtask_id)
  subtask_id_.Mutable(index)->assign(value);
}
inline void UiAgentTaskProcess::set_subtask_id(int index, const char* value) {
  subtask_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentTaskProcess.subtask_id)
}
inline void UiAgentTaskProcess::set_subtask_id(int index, const void* value, size_t size) {
  subtask_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentTaskProcess.subtask_id)
}
inline ::std::string* UiAgentTaskProcess::add_subtask_id() {
  return subtask_id_.Add();
}
inline void UiAgentTaskProcess::add_subtask_id(const ::std::string& value) {
  subtask_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dcmd_api.UiAgentTaskProcess.subtask_id)
}
inline void UiAgentTaskProcess::add_subtask_id(const char* value) {
  subtask_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dcmd_api.UiAgentTaskProcess.subtask_id)
}
inline void UiAgentTaskProcess::add_subtask_id(const void* value, size_t size) {
  subtask_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dcmd_api.UiAgentTaskProcess.subtask_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UiAgentTaskProcess::subtask_id() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiAgentTaskProcess.subtask_id)
  return subtask_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UiAgentTaskProcess::mutable_subtask_id() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiAgentTaskProcess.subtask_id)
  return &subtask_id_;
}

// required bytes user = 3;
inline bool UiAgentTaskProcess::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiAgentTaskProcess::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiAgentTaskProcess::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiAgentTaskProcess::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiAgentTaskProcess::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentTaskProcess.user)
  return *user_;
}
inline void UiAgentTaskProcess::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentTaskProcess.user)
}
inline void UiAgentTaskProcess::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentTaskProcess.user)
}
inline void UiAgentTaskProcess::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentTaskProcess.user)
}
inline ::std::string* UiAgentTaskProcess::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentTaskProcess.user)
  return user_;
}
inline ::std::string* UiAgentTaskProcess::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentTaskProcess::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentTaskProcess.user)
}

// required bytes passwd = 4;
inline bool UiAgentTaskProcess::has_passwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentTaskProcess::set_has_passwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentTaskProcess::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentTaskProcess::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiAgentTaskProcess::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentTaskProcess.passwd)
  return *passwd_;
}
inline void UiAgentTaskProcess::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentTaskProcess.passwd)
}
inline void UiAgentTaskProcess::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentTaskProcess.passwd)
}
inline void UiAgentTaskProcess::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentTaskProcess.passwd)
}
inline ::std::string* UiAgentTaskProcess::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentTaskProcess.passwd)
  return passwd_;
}
inline ::std::string* UiAgentTaskProcess::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentTaskProcess::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentTaskProcess.passwd)
}

// -------------------------------------------------------------------

// UiAgentTaskProcessReply

// required int32 client_msg_id = 1;
inline bool UiAgentTaskProcessReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentTaskProcessReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentTaskProcessReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentTaskProcessReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentTaskProcessReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentTaskProcessReply.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentTaskProcessReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentTaskProcessReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiAgentTaskProcessReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentTaskProcessReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentTaskProcessReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentTaskProcessReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiAgentTaskProcessReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentTaskProcessReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiAgentTaskProcessReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentTaskProcessReply.state)
}

// repeated .dcmd_api.SubTaskProcess process = 3;
inline int UiAgentTaskProcessReply::process_size() const {
  return process_.size();
}
inline void UiAgentTaskProcessReply::clear_process() {
  process_.Clear();
}
inline const ::dcmd_api::SubTaskProcess& UiAgentTaskProcessReply::process(int index) const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentTaskProcessReply.process)
  return process_.Get(index);
}
inline ::dcmd_api::SubTaskProcess* UiAgentTaskProcessReply::mutable_process(int index) {
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentTaskProcessReply.process)
  return process_.Mutable(index);
}
inline ::dcmd_api::SubTaskProcess* UiAgentTaskProcessReply::add_process() {
  // @@protoc_insertion_point(field_add:dcmd_api.UiAgentTaskProcessReply.process)
  return process_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskProcess >&
UiAgentTaskProcessReply::process() const {
  // @@protoc_insertion_point(field_list:dcmd_api.UiAgentTaskProcessReply.process)
  return process_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcmd_api::SubTaskProcess >*
UiAgentTaskProcessReply::mutable_process() {
  // @@protoc_insertion_point(field_mutable_list:dcmd_api.UiAgentTaskProcessReply.process)
  return &process_;
}

// optional bytes err = 4;
inline bool UiAgentTaskProcessReply::has_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentTaskProcessReply::set_has_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentTaskProcessReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentTaskProcessReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiAgentTaskProcessReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentTaskProcessReply.err)
  return *err_;
}
inline void UiAgentTaskProcessReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentTaskProcessReply.err)
}
inline void UiAgentTaskProcessReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentTaskProcessReply.err)
}
inline void UiAgentTaskProcessReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentTaskProcessReply.err)
}
inline ::std::string* UiAgentTaskProcessReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentTaskProcessReply.err)
  return err_;
}
inline ::std::string* UiAgentTaskProcessReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentTaskProcessReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentTaskProcessReply.err)
}

// -------------------------------------------------------------------

// UiTaskCmd

// required int32 client_msg_id = 1;
inline bool UiTaskCmd::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiTaskCmd::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiTaskCmd::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiTaskCmd::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiTaskCmd::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.client_msg_id)
  return client_msg_id_;
}
inline void UiTaskCmd::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.client_msg_id)
}

// required bytes task_id = 2;
inline bool UiTaskCmd::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiTaskCmd::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiTaskCmd::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiTaskCmd::clear_task_id() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_->clear();
  }
  clear_has_task_id();
}
inline const ::std::string& UiTaskCmd::task_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.task_id)
  return *task_id_;
}
inline void UiTaskCmd::set_task_id(const ::std::string& value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.task_id)
}
inline void UiTaskCmd::set_task_id(const char* value) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskCmd.task_id)
}
inline void UiTaskCmd::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  task_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskCmd.task_id)
}
inline ::std::string* UiTaskCmd::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    task_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskCmd.task_id)
  return task_id_;
}
inline ::std::string* UiTaskCmd::release_task_id() {
  clear_has_task_id();
  if (task_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = task_id_;
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskCmd::set_allocated_task_id(::std::string* task_id) {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (task_id) {
    set_has_task_id();
    task_id_ = task_id;
  } else {
    clear_has_task_id();
    task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskCmd.task_id)
}

// required int32 uid = 3;
inline bool UiTaskCmd::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiTaskCmd::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiTaskCmd::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiTaskCmd::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 UiTaskCmd::uid() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.uid)
  return uid_;
}
inline void UiTaskCmd::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.uid)
}

// optional bytes subtask_id = 4;
inline bool UiTaskCmd::has_subtask_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiTaskCmd::set_has_subtask_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiTaskCmd::clear_has_subtask_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiTaskCmd::clear_subtask_id() {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_->clear();
  }
  clear_has_subtask_id();
}
inline const ::std::string& UiTaskCmd::subtask_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.subtask_id)
  return *subtask_id_;
}
inline void UiTaskCmd::set_subtask_id(const ::std::string& value) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.subtask_id)
}
inline void UiTaskCmd::set_subtask_id(const char* value) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskCmd.subtask_id)
}
inline void UiTaskCmd::set_subtask_id(const void* value, size_t size) {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  subtask_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskCmd.subtask_id)
}
inline ::std::string* UiTaskCmd::mutable_subtask_id() {
  set_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtask_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskCmd.subtask_id)
  return subtask_id_;
}
inline ::std::string* UiTaskCmd::release_subtask_id() {
  clear_has_subtask_id();
  if (subtask_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subtask_id_;
    subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskCmd::set_allocated_subtask_id(::std::string* subtask_id) {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (subtask_id) {
    set_has_subtask_id();
    subtask_id_ = subtask_id;
  } else {
    clear_has_subtask_id();
    subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskCmd.subtask_id)
}

// optional bytes ip = 5;
inline bool UiTaskCmd::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiTaskCmd::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiTaskCmd::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiTaskCmd::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UiTaskCmd::ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.ip)
  return *ip_;
}
inline void UiTaskCmd::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.ip)
}
inline void UiTaskCmd::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskCmd.ip)
}
inline void UiTaskCmd::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskCmd.ip)
}
inline ::std::string* UiTaskCmd::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskCmd.ip)
  return ip_;
}
inline ::std::string* UiTaskCmd::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskCmd::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskCmd.ip)
}

// optional bytes svr_name = 6;
inline bool UiTaskCmd::has_svr_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UiTaskCmd::set_has_svr_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UiTaskCmd::clear_has_svr_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UiTaskCmd::clear_svr_name() {
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_->clear();
  }
  clear_has_svr_name();
}
inline const ::std::string& UiTaskCmd::svr_name() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.svr_name)
  return *svr_name_;
}
inline void UiTaskCmd::set_svr_name(const ::std::string& value) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.svr_name)
}
inline void UiTaskCmd::set_svr_name(const char* value) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskCmd.svr_name)
}
inline void UiTaskCmd::set_svr_name(const void* value, size_t size) {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  svr_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskCmd.svr_name)
}
inline ::std::string* UiTaskCmd::mutable_svr_name() {
  set_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskCmd.svr_name)
  return svr_name_;
}
inline ::std::string* UiTaskCmd::release_svr_name() {
  clear_has_svr_name();
  if (svr_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svr_name_;
    svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskCmd::set_allocated_svr_name(::std::string* svr_name) {
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_name_;
  }
  if (svr_name) {
    set_has_svr_name();
    svr_name_ = svr_name;
  } else {
    clear_has_svr_name();
    svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskCmd.svr_name)
}

// optional bytes svr_pool = 7;
inline bool UiTaskCmd::has_svr_pool() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UiTaskCmd::set_has_svr_pool() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UiTaskCmd::clear_has_svr_pool() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UiTaskCmd::clear_svr_pool() {
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_->clear();
  }
  clear_has_svr_pool();
}
inline const ::std::string& UiTaskCmd::svr_pool() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.svr_pool)
  return *svr_pool_;
}
inline void UiTaskCmd::set_svr_pool(const ::std::string& value) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.svr_pool)
}
inline void UiTaskCmd::set_svr_pool(const char* value) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskCmd.svr_pool)
}
inline void UiTaskCmd::set_svr_pool(const void* value, size_t size) {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  svr_pool_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskCmd.svr_pool)
}
inline ::std::string* UiTaskCmd::mutable_svr_pool() {
  set_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    svr_pool_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskCmd.svr_pool)
  return svr_pool_;
}
inline ::std::string* UiTaskCmd::release_svr_pool() {
  clear_has_svr_pool();
  if (svr_pool_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = svr_pool_;
    svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskCmd::set_allocated_svr_pool(::std::string* svr_pool) {
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_pool_;
  }
  if (svr_pool) {
    set_has_svr_pool();
    svr_pool_ = svr_pool;
  } else {
    clear_has_svr_pool();
    svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskCmd.svr_pool)
}

// optional int32 concurrent_rate = 9;
inline bool UiTaskCmd::has_concurrent_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UiTaskCmd::set_has_concurrent_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UiTaskCmd::clear_has_concurrent_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UiTaskCmd::clear_concurrent_rate() {
  concurrent_rate_ = 0;
  clear_has_concurrent_rate();
}
inline ::google::protobuf::int32 UiTaskCmd::concurrent_rate() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.concurrent_rate)
  return concurrent_rate_;
}
inline void UiTaskCmd::set_concurrent_rate(::google::protobuf::int32 value) {
  set_has_concurrent_rate();
  concurrent_rate_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.concurrent_rate)
}

// optional int32 task_timeout = 10;
inline bool UiTaskCmd::has_task_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UiTaskCmd::set_has_task_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UiTaskCmd::clear_has_task_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UiTaskCmd::clear_task_timeout() {
  task_timeout_ = 0;
  clear_has_task_timeout();
}
inline ::google::protobuf::int32 UiTaskCmd::task_timeout() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.task_timeout)
  return task_timeout_;
}
inline void UiTaskCmd::set_task_timeout(::google::protobuf::int32 value) {
  set_has_task_timeout();
  task_timeout_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.task_timeout)
}

// optional bool auto = 11;
inline bool UiTaskCmd::has_auto_() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UiTaskCmd::set_has_auto_() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UiTaskCmd::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UiTaskCmd::clear_auto_() {
  auto__ = false;
  clear_has_auto_();
}
inline bool UiTaskCmd::auto_() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.auto)
  return auto__;
}
inline void UiTaskCmd::set_auto_(bool value) {
  set_has_auto_();
  auto__ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.auto)
}

// required .dcmd_api.CmdType cmd_type = 12;
inline bool UiTaskCmd::has_cmd_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UiTaskCmd::set_has_cmd_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UiTaskCmd::clear_has_cmd_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UiTaskCmd::clear_cmd_type() {
  cmd_type_ = 0;
  clear_has_cmd_type();
}
inline ::dcmd_api::CmdType UiTaskCmd::cmd_type() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.cmd_type)
  return static_cast< ::dcmd_api::CmdType >(cmd_type_);
}
inline void UiTaskCmd::set_cmd_type(::dcmd_api::CmdType value) {
  assert(::dcmd_api::CmdType_IsValid(value));
  set_has_cmd_type();
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.cmd_type)
}

// required bytes user = 13;
inline bool UiTaskCmd::has_user() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UiTaskCmd::set_has_user() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UiTaskCmd::clear_has_user() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UiTaskCmd::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiTaskCmd::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.user)
  return *user_;
}
inline void UiTaskCmd::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.user)
}
inline void UiTaskCmd::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskCmd.user)
}
inline void UiTaskCmd::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskCmd.user)
}
inline ::std::string* UiTaskCmd::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskCmd.user)
  return user_;
}
inline ::std::string* UiTaskCmd::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskCmd::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskCmd.user)
}

// required bytes passwd = 14;
inline bool UiTaskCmd::has_passwd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UiTaskCmd::set_has_passwd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UiTaskCmd::clear_has_passwd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UiTaskCmd::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiTaskCmd::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmd.passwd)
  return *passwd_;
}
inline void UiTaskCmd::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmd.passwd)
}
inline void UiTaskCmd::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskCmd.passwd)
}
inline void UiTaskCmd::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskCmd.passwd)
}
inline ::std::string* UiTaskCmd::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskCmd.passwd)
  return passwd_;
}
inline ::std::string* UiTaskCmd::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskCmd::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskCmd.passwd)
}

// -------------------------------------------------------------------

// UiTaskCmdReply

// required int32 client_msg_id = 1;
inline bool UiTaskCmdReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiTaskCmdReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiTaskCmdReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiTaskCmdReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiTaskCmdReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmdReply.client_msg_id)
  return client_msg_id_;
}
inline void UiTaskCmdReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmdReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiTaskCmdReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiTaskCmdReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiTaskCmdReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiTaskCmdReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiTaskCmdReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmdReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiTaskCmdReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmdReply.state)
}

// optional bytes err = 4;
inline bool UiTaskCmdReply::has_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiTaskCmdReply::set_has_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiTaskCmdReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiTaskCmdReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiTaskCmdReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiTaskCmdReply.err)
  return *err_;
}
inline void UiTaskCmdReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiTaskCmdReply.err)
}
inline void UiTaskCmdReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiTaskCmdReply.err)
}
inline void UiTaskCmdReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiTaskCmdReply.err)
}
inline ::std::string* UiTaskCmdReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiTaskCmdReply.err)
  return err_;
}
inline ::std::string* UiTaskCmdReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiTaskCmdReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiTaskCmdReply.err)
}

// -------------------------------------------------------------------

// UiAgentHostName

// required int32 client_msg_id = 1;
inline bool UiAgentHostName::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentHostName::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentHostName::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentHostName::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentHostName::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostName.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentHostName::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostName.client_msg_id)
}

// required bytes agent_ip = 2;
inline bool UiAgentHostName::has_agent_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentHostName::set_has_agent_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentHostName::clear_has_agent_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentHostName::clear_agent_ip() {
  if (agent_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_->clear();
  }
  clear_has_agent_ip();
}
inline const ::std::string& UiAgentHostName::agent_ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostName.agent_ip)
  return *agent_ip_;
}
inline void UiAgentHostName::set_agent_ip(const ::std::string& value) {
  set_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_ = new ::std::string;
  }
  agent_ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostName.agent_ip)
}
inline void UiAgentHostName::set_agent_ip(const char* value) {
  set_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_ = new ::std::string;
  }
  agent_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentHostName.agent_ip)
}
inline void UiAgentHostName::set_agent_ip(const void* value, size_t size) {
  set_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_ = new ::std::string;
  }
  agent_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentHostName.agent_ip)
}
inline ::std::string* UiAgentHostName::mutable_agent_ip() {
  set_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentHostName.agent_ip)
  return agent_ip_;
}
inline ::std::string* UiAgentHostName::release_agent_ip() {
  clear_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = agent_ip_;
    agent_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentHostName::set_allocated_agent_ip(::std::string* agent_ip) {
  if (agent_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete agent_ip_;
  }
  if (agent_ip) {
    set_has_agent_ip();
    agent_ip_ = agent_ip;
  } else {
    clear_has_agent_ip();
    agent_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentHostName.agent_ip)
}

// required bytes user = 3;
inline bool UiAgentHostName::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiAgentHostName::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiAgentHostName::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiAgentHostName::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiAgentHostName::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostName.user)
  return *user_;
}
inline void UiAgentHostName::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostName.user)
}
inline void UiAgentHostName::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentHostName.user)
}
inline void UiAgentHostName::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentHostName.user)
}
inline ::std::string* UiAgentHostName::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentHostName.user)
  return user_;
}
inline ::std::string* UiAgentHostName::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentHostName::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentHostName.user)
}

// required bytes passwd = 4;
inline bool UiAgentHostName::has_passwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentHostName::set_has_passwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentHostName::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentHostName::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiAgentHostName::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostName.passwd)
  return *passwd_;
}
inline void UiAgentHostName::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostName.passwd)
}
inline void UiAgentHostName::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentHostName.passwd)
}
inline void UiAgentHostName::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentHostName.passwd)
}
inline ::std::string* UiAgentHostName::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentHostName.passwd)
  return passwd_;
}
inline ::std::string* UiAgentHostName::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentHostName::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentHostName.passwd)
}

// -------------------------------------------------------------------

// UiAgentHostNameReply

// required int32 client_msg_id = 1;
inline bool UiAgentHostNameReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentHostNameReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentHostNameReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentHostNameReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentHostNameReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostNameReply.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentHostNameReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostNameReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiAgentHostNameReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentHostNameReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentHostNameReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentHostNameReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiAgentHostNameReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostNameReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiAgentHostNameReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostNameReply.state)
}

// required bool is_exist = 3;
inline bool UiAgentHostNameReply::has_is_exist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiAgentHostNameReply::set_has_is_exist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiAgentHostNameReply::clear_has_is_exist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiAgentHostNameReply::clear_is_exist() {
  is_exist_ = false;
  clear_has_is_exist();
}
inline bool UiAgentHostNameReply::is_exist() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostNameReply.is_exist)
  return is_exist_;
}
inline void UiAgentHostNameReply::set_is_exist(bool value) {
  set_has_is_exist();
  is_exist_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostNameReply.is_exist)
}

// required bytes hostname = 4;
inline bool UiAgentHostNameReply::has_hostname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentHostNameReply::set_has_hostname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentHostNameReply::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentHostNameReply::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& UiAgentHostNameReply::hostname() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostNameReply.hostname)
  return *hostname_;
}
inline void UiAgentHostNameReply::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostNameReply.hostname)
}
inline void UiAgentHostNameReply::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentHostNameReply.hostname)
}
inline void UiAgentHostNameReply::set_hostname(const void* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentHostNameReply.hostname)
}
inline ::std::string* UiAgentHostNameReply::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hostname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentHostNameReply.hostname)
  return hostname_;
}
inline ::std::string* UiAgentHostNameReply::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentHostNameReply::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentHostNameReply.hostname)
}

// optional bytes err = 5;
inline bool UiAgentHostNameReply::has_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UiAgentHostNameReply::set_has_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UiAgentHostNameReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UiAgentHostNameReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiAgentHostNameReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentHostNameReply.err)
  return *err_;
}
inline void UiAgentHostNameReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentHostNameReply.err)
}
inline void UiAgentHostNameReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentHostNameReply.err)
}
inline void UiAgentHostNameReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentHostNameReply.err)
}
inline ::std::string* UiAgentHostNameReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentHostNameReply.err)
  return err_;
}
inline ::std::string* UiAgentHostNameReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentHostNameReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentHostNameReply.err)
}

// -------------------------------------------------------------------

// UiAgentValid

// required int32 client_msg_id = 1;
inline bool UiAgentValid::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentValid::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentValid::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentValid::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentValid::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentValid.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentValid::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentValid.client_msg_id)
}

// required bytes agent_ip = 2;
inline bool UiAgentValid::has_agent_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentValid::set_has_agent_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentValid::clear_has_agent_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentValid::clear_agent_ip() {
  if (agent_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_->clear();
  }
  clear_has_agent_ip();
}
inline const ::std::string& UiAgentValid::agent_ip() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentValid.agent_ip)
  return *agent_ip_;
}
inline void UiAgentValid::set_agent_ip(const ::std::string& value) {
  set_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_ = new ::std::string;
  }
  agent_ip_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentValid.agent_ip)
}
inline void UiAgentValid::set_agent_ip(const char* value) {
  set_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_ = new ::std::string;
  }
  agent_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentValid.agent_ip)
}
inline void UiAgentValid::set_agent_ip(const void* value, size_t size) {
  set_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_ = new ::std::string;
  }
  agent_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentValid.agent_ip)
}
inline ::std::string* UiAgentValid::mutable_agent_ip() {
  set_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    agent_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentValid.agent_ip)
  return agent_ip_;
}
inline ::std::string* UiAgentValid::release_agent_ip() {
  clear_has_agent_ip();
  if (agent_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = agent_ip_;
    agent_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentValid::set_allocated_agent_ip(::std::string* agent_ip) {
  if (agent_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete agent_ip_;
  }
  if (agent_ip) {
    set_has_agent_ip();
    agent_ip_ = agent_ip;
  } else {
    clear_has_agent_ip();
    agent_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentValid.agent_ip)
}

// required bytes user = 3;
inline bool UiAgentValid::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiAgentValid::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiAgentValid::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiAgentValid::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UiAgentValid::user() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentValid.user)
  return *user_;
}
inline void UiAgentValid::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentValid.user)
}
inline void UiAgentValid::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentValid.user)
}
inline void UiAgentValid::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentValid.user)
}
inline ::std::string* UiAgentValid::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentValid.user)
  return user_;
}
inline ::std::string* UiAgentValid::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentValid::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentValid.user)
}

// required bytes passwd = 4;
inline bool UiAgentValid::has_passwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UiAgentValid::set_has_passwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UiAgentValid::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UiAgentValid::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& UiAgentValid::passwd() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentValid.passwd)
  return *passwd_;
}
inline void UiAgentValid::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentValid.passwd)
}
inline void UiAgentValid::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentValid.passwd)
}
inline void UiAgentValid::set_passwd(const void* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentValid.passwd)
}
inline ::std::string* UiAgentValid::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    passwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentValid.passwd)
  return passwd_;
}
inline ::std::string* UiAgentValid::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentValid::set_allocated_passwd(::std::string* passwd) {
  if (passwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passwd_;
  }
  if (passwd) {
    set_has_passwd();
    passwd_ = passwd;
  } else {
    clear_has_passwd();
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentValid.passwd)
}

// -------------------------------------------------------------------

// UiAgentValidReply

// required int32 client_msg_id = 1;
inline bool UiAgentValidReply::has_client_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UiAgentValidReply::set_has_client_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UiAgentValidReply::clear_has_client_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UiAgentValidReply::clear_client_msg_id() {
  client_msg_id_ = 0;
  clear_has_client_msg_id();
}
inline ::google::protobuf::int32 UiAgentValidReply::client_msg_id() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentValidReply.client_msg_id)
  return client_msg_id_;
}
inline void UiAgentValidReply::set_client_msg_id(::google::protobuf::int32 value) {
  set_has_client_msg_id();
  client_msg_id_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentValidReply.client_msg_id)
}

// required .dcmd_api.DcmdState state = 2;
inline bool UiAgentValidReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UiAgentValidReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UiAgentValidReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UiAgentValidReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dcmd_api::DcmdState UiAgentValidReply::state() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentValidReply.state)
  return static_cast< ::dcmd_api::DcmdState >(state_);
}
inline void UiAgentValidReply::set_state(::dcmd_api::DcmdState value) {
  assert(::dcmd_api::DcmdState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentValidReply.state)
}

// optional bytes err = 3;
inline bool UiAgentValidReply::has_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UiAgentValidReply::set_has_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UiAgentValidReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UiAgentValidReply::clear_err() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_->clear();
  }
  clear_has_err();
}
inline const ::std::string& UiAgentValidReply::err() const {
  // @@protoc_insertion_point(field_get:dcmd_api.UiAgentValidReply.err)
  return *err_;
}
inline void UiAgentValidReply::set_err(const ::std::string& value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set:dcmd_api.UiAgentValidReply.err)
}
inline void UiAgentValidReply::set_err(const char* value) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcmd_api.UiAgentValidReply.err)
}
inline void UiAgentValidReply::set_err(const void* value, size_t size) {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  err_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcmd_api.UiAgentValidReply.err)
}
inline ::std::string* UiAgentValidReply::mutable_err() {
  set_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    err_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcmd_api.UiAgentValidReply.err)
  return err_;
}
inline ::std::string* UiAgentValidReply::release_err() {
  clear_has_err();
  if (err_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = err_;
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UiAgentValidReply::set_allocated_err(::std::string* err) {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (err) {
    set_has_err();
    err_ = err;
  } else {
    clear_has_err();
    err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcmd_api.UiAgentValidReply.err)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcmd_api

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dcmd_5fui_2eproto__INCLUDED
