// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcmd_agent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dcmd_agent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dcmd_api {

namespace {

const ::google::protobuf::Descriptor* AgentReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentReportReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentReportReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentMasterNoticeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentMasterNoticeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskCmdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskCmdReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentSubTaskProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentSubTaskProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskResultReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskResultReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentOprCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentOprCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskOutputReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskOutputReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentRunningTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentRunningTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentRunningTaskReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentRunningTaskReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentRunningOpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentRunningOpr_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentRunningOprReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentRunningOprReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvalidMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvalidMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dcmd_5fagent_2eproto() {
  protobuf_AddDesc_dcmd_5fagent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dcmd_agent.proto");
  GOOGLE_CHECK(file != NULL);
  AgentReport_descriptor_ = file->message_type(0);
  static const int AgentReport_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, agent_ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, hostname_),
  };
  AgentReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentReport_descriptor_,
      AgentReport::default_instance_,
      AgentReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentReport));
  AgentReportReply_descriptor_ = file->message_type(1);
  static const int AgentReportReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, heatbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, package_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, opr_queue_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, opr_overflow_threshold_),
  };
  AgentReportReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentReportReply_descriptor_,
      AgentReportReply::default_instance_,
      AgentReportReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentReportReply));
  AgentMasterNoticeReply_descriptor_ = file->message_type(2);
  static const int AgentMasterNoticeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMasterNoticeReply, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMasterNoticeReply, subtask_process_),
  };
  AgentMasterNoticeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentMasterNoticeReply_descriptor_,
      AgentMasterNoticeReply::default_instance_,
      AgentMasterNoticeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMasterNoticeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMasterNoticeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentMasterNoticeReply));
  AgentTaskCmd_descriptor_ = file->message_type(3);
  static const int AgentTaskCmd_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, task_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_repo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_env_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, update_env_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, update_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, output_process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, node_multi_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, task_arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_pool_arg_),
  };
  AgentTaskCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskCmd_descriptor_,
      AgentTaskCmd::default_instance_,
      AgentTaskCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskCmd));
  AgentTaskCmdReply_descriptor_ = file->message_type(4);
  static const int AgentTaskCmdReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmdReply, cmd_),
  };
  AgentTaskCmdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskCmdReply_descriptor_,
      AgentTaskCmdReply::default_instance_,
      AgentTaskCmdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskCmdReply));
  AgentSubTaskProcess_descriptor_ = file->message_type(5);
  static const int AgentSubTaskProcess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, process_),
  };
  AgentSubTaskProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentSubTaskProcess_descriptor_,
      AgentSubTaskProcess::default_instance_,
      AgentSubTaskProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentSubTaskProcess));
  AgentTaskResult_descriptor_ = file->message_type(6);
  static const int AgentTaskResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, process_),
  };
  AgentTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskResult_descriptor_,
      AgentTaskResult::default_instance_,
      AgentTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskResult));
  AgentTaskResultReply_descriptor_ = file->message_type(7);
  static const int AgentTaskResultReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResultReply, cmd_),
  };
  AgentTaskResultReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskResultReply_descriptor_,
      AgentTaskResultReply::default_instance_,
      AgentTaskResultReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResultReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResultReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskResultReply));
  AgentOprCmd_descriptor_ = file->message_type(8);
  static const int AgentOprCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, opr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, run_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, args_),
  };
  AgentOprCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentOprCmd_descriptor_,
      AgentOprCmd::default_instance_,
      AgentOprCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentOprCmd));
  AgentTaskOutput_descriptor_ = file->message_type(9);
  static const int AgentTaskOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, ip_),
  };
  AgentTaskOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskOutput_descriptor_,
      AgentTaskOutput::default_instance_,
      AgentTaskOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskOutput));
  AgentTaskOutputReply_descriptor_ = file->message_type(10);
  static const int AgentTaskOutputReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, err_),
  };
  AgentTaskOutputReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskOutputReply_descriptor_,
      AgentTaskOutputReply::default_instance_,
      AgentTaskOutputReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskOutputReply));
  AgentRunningTask_descriptor_ = file->message_type(11);
  static const int AgentRunningTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, svr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, svr_pool_),
  };
  AgentRunningTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentRunningTask_descriptor_,
      AgentRunningTask::default_instance_,
      AgentRunningTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentRunningTask));
  AgentRunningTaskReply_descriptor_ = file->message_type(12);
  static const int AgentRunningTaskReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, err_),
  };
  AgentRunningTaskReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentRunningTaskReply_descriptor_,
      AgentRunningTaskReply::default_instance_,
      AgentRunningTaskReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentRunningTaskReply));
  AgentRunningOpr_descriptor_ = file->message_type(13);
  static const int AgentRunningOpr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOpr, ip_),
  };
  AgentRunningOpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentRunningOpr_descriptor_,
      AgentRunningOpr::default_instance_,
      AgentRunningOpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentRunningOpr));
  AgentRunningOprReply_descriptor_ = file->message_type(14);
  static const int AgentRunningOprReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, err_),
  };
  AgentRunningOprReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentRunningOprReply_descriptor_,
      AgentRunningOprReply::default_instance_,
      AgentRunningOprReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentRunningOprReply));
  InvalidMsg_descriptor_ = file->message_type(15);
  static const int InvalidMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMsg, msg_type_),
  };
  InvalidMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvalidMsg_descriptor_,
      InvalidMsg::default_instance_,
      InvalidMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvalidMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dcmd_5fagent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentReport_descriptor_, &AgentReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentReportReply_descriptor_, &AgentReportReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentMasterNoticeReply_descriptor_, &AgentMasterNoticeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskCmd_descriptor_, &AgentTaskCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskCmdReply_descriptor_, &AgentTaskCmdReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentSubTaskProcess_descriptor_, &AgentSubTaskProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskResult_descriptor_, &AgentTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskResultReply_descriptor_, &AgentTaskResultReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentOprCmd_descriptor_, &AgentOprCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskOutput_descriptor_, &AgentTaskOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskOutputReply_descriptor_, &AgentTaskOutputReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentRunningTask_descriptor_, &AgentRunningTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentRunningTaskReply_descriptor_, &AgentRunningTaskReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentRunningOpr_descriptor_, &AgentRunningOpr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentRunningOprReply_descriptor_, &AgentRunningOprReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvalidMsg_descriptor_, &InvalidMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dcmd_5fagent_2eproto() {
  delete AgentReport::default_instance_;
  delete AgentReport_reflection_;
  delete AgentReportReply::default_instance_;
  delete AgentReportReply_reflection_;
  delete AgentMasterNoticeReply::default_instance_;
  delete AgentMasterNoticeReply_reflection_;
  delete AgentTaskCmd::default_instance_;
  delete AgentTaskCmd_reflection_;
  delete AgentTaskCmdReply::default_instance_;
  delete AgentTaskCmdReply_reflection_;
  delete AgentSubTaskProcess::default_instance_;
  delete AgentSubTaskProcess_reflection_;
  delete AgentTaskResult::default_instance_;
  delete AgentTaskResult_reflection_;
  delete AgentTaskResultReply::default_instance_;
  delete AgentTaskResultReply_reflection_;
  delete AgentOprCmd::default_instance_;
  delete AgentOprCmd_reflection_;
  delete AgentTaskOutput::default_instance_;
  delete AgentTaskOutput_reflection_;
  delete AgentTaskOutputReply::default_instance_;
  delete AgentTaskOutputReply_reflection_;
  delete AgentRunningTask::default_instance_;
  delete AgentRunningTask_reflection_;
  delete AgentRunningTaskReply::default_instance_;
  delete AgentRunningTaskReply_reflection_;
  delete AgentRunningOpr::default_instance_;
  delete AgentRunningOpr_reflection_;
  delete AgentRunningOprReply::default_instance_;
  delete AgentRunningOprReply_reflection_;
  delete InvalidMsg::default_instance_;
  delete InvalidMsg_reflection_;
}

void protobuf_AddDesc_dcmd_5fagent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dcmd_api::protobuf_AddDesc_dcmd_5fcmn_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020dcmd_agent.proto\022\010dcmd_api\032\016dcmd_cmn.p"
    "roto\"C\n\013AgentReport\022\017\n\007version\030\001 \002(\014\022\021\n\t"
    "agent_ips\030\002 \003(\014\022\020\n\010hostname\030\003 \001(\014\"\250\001\n\020Ag"
    "entReportReply\022\"\n\005state\030\001 \002(\0162\023.dcmd_api"
    ".DcmdState\022\013\n\003err\030\002 \001(\014\022\020\n\010heatbeat\030\003 \001("
    "\005\022\024\n\014package_size\030\004 \001(\005\022\033\n\023opr_queue_thr"
    "eshold\030\005 \001(\005\022\036\n\026opr_overflow_threshold\030\006"
    " \001(\005\"X\n\026AgentMasterNoticeReply\022\013\n\003cmd\030\001 "
    "\003(\014\0221\n\017subtask_process\030\002 \003(\0132\030.dcmd_api."
    "SubTaskProcess\"\316\003\n\014AgentTaskCmd\022\013\n\003cmd\030\001"
    " \002(\014\022\020\n\010task_cmd\030\002 \002(\014\022#\n\010cmd_type\030\003 \002(\016"
    "2\021.dcmd_api.CmdType\022\017\n\007task_id\030\004 \001(\014\022\022\n\n"
    "subtask_id\030\005 \001(\014\022\n\n\002ip\030\006 \001(\014\022\020\n\010app_name"
    "\030\007 \001(\014\022\020\n\010svr_name\030\010 \001(\014\022\020\n\010svr_pool\030\t \001"
    "(\014\022\017\n\007svr_ver\030\n \001(\014\022\020\n\010svr_repo\030\013 \001(\014\022\020\n"
    "\010svr_user\030\014 \001(\014\022\023\n\013svr_env_ver\030\r \001(\014\022\022\n\n"
    "update_env\030\016 \001(\010\022\022\n\nupdate_ver\030\017 \001(\010\022\026\n\016"
    "output_process\030\020 \001(\010\022\016\n\006script\030\021 \001(\014\022\020\n\010"
    "svr_path\030\022 \001(\014\022\027\n\017node_multi_pool\030\023 \001(\010\022"
    "$\n\010task_arg\030\024 \003(\0132\022.dcmd_api.KeyValue\022(\n"
    "\014svr_pool_arg\030\025 \003(\0132\022.dcmd_api.KeyValue\""
    " \n\021AgentTaskCmdReply\022\013\n\003cmd\030\001 \002(\014\"K\n\023Age"
    "ntSubTaskProcess\022\017\n\007task_id\030\001 \002(\014\022\022\n\nsub"
    "task_id\030\002 \002(\014\022\017\n\007process\030\003 \002(\014\"r\n\017AgentT"
    "askResult\022\013\n\003cmd\030\001 \002(\014\022\017\n\007task_id\030\002 \002(\014\022"
    "\022\n\nsubtask_id\030\003 \002(\014\022\017\n\007success\030\004 \002(\010\022\013\n\003"
    "err\030\005 \001(\014\022\017\n\007process\030\006 \001(\014\"#\n\024AgentTaskR"
    "esultReply\022\013\n\003cmd\030\001 \002(\014\"\200\001\n\013AgentOprCmd\022"
    "\016\n\006opr_id\030\001 \002(\014\022\014\n\004name\030\002 \002(\014\022\020\n\010run_use"
    "r\030\003 \002(\014\022\017\n\007timeout\030\004 \002(\005\022\016\n\006script\030\005 \002(\014"
    "\022 \n\004args\030\006 \003(\0132\022.dcmd_api.KeyValue\"A\n\017Ag"
    "entTaskOutput\022\022\n\nsubtask_id\030\001 \002(\014\022\016\n\006off"
    "set\030\002 \002(\005\022\n\n\002ip\030\003 \001(\014\"g\n\024AgentTaskOutput"
    "Reply\022\"\n\005state\030\001 \002(\0162\023.dcmd_api.DcmdStat"
    "e\022\016\n\006result\030\002 \002(\014\022\016\n\006offset\030\003 \002(\005\022\013\n\003err"
    "\030\004 \001(\014\"T\n\020AgentRunningTask\022\n\n\002ip\030\001 \001(\014\022\020"
    "\n\010app_name\030\002 \001(\014\022\020\n\010svr_name\030\003 \001(\014\022\020\n\010sv"
    "r_pool\030\004 \001(\014\"o\n\025AgentRunningTaskReply\022\"\n"
    "\005state\030\001 \002(\0162\023.dcmd_api.DcmdState\022%\n\006res"
    "ult\030\002 \003(\0132\025.dcmd_api.SubTaskInfo\022\013\n\003err\030"
    "\003 \001(\014\"\035\n\017AgentRunningOpr\022\n\n\002ip\030\001 \001(\014\"j\n\024"
    "AgentRunningOprReply\022\"\n\005state\030\001 \002(\0162\023.dc"
    "md_api.DcmdState\022!\n\006result\030\002 \003(\0132\021.dcmd_"
    "api.OprInfo\022\013\n\003err\030\003 \001(\014\"\036\n\nInvalidMsg\022\020"
    "\n\010msg_type\030\001 \002(\005B\021\n\017com.cwinux.dcmd", 1795);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dcmd_agent.proto", &protobuf_RegisterTypes);
  AgentReport::default_instance_ = new AgentReport();
  AgentReportReply::default_instance_ = new AgentReportReply();
  AgentMasterNoticeReply::default_instance_ = new AgentMasterNoticeReply();
  AgentTaskCmd::default_instance_ = new AgentTaskCmd();
  AgentTaskCmdReply::default_instance_ = new AgentTaskCmdReply();
  AgentSubTaskProcess::default_instance_ = new AgentSubTaskProcess();
  AgentTaskResult::default_instance_ = new AgentTaskResult();
  AgentTaskResultReply::default_instance_ = new AgentTaskResultReply();
  AgentOprCmd::default_instance_ = new AgentOprCmd();
  AgentTaskOutput::default_instance_ = new AgentTaskOutput();
  AgentTaskOutputReply::default_instance_ = new AgentTaskOutputReply();
  AgentRunningTask::default_instance_ = new AgentRunningTask();
  AgentRunningTaskReply::default_instance_ = new AgentRunningTaskReply();
  AgentRunningOpr::default_instance_ = new AgentRunningOpr();
  AgentRunningOprReply::default_instance_ = new AgentRunningOprReply();
  InvalidMsg::default_instance_ = new InvalidMsg();
  AgentReport::default_instance_->InitAsDefaultInstance();
  AgentReportReply::default_instance_->InitAsDefaultInstance();
  AgentMasterNoticeReply::default_instance_->InitAsDefaultInstance();
  AgentTaskCmd::default_instance_->InitAsDefaultInstance();
  AgentTaskCmdReply::default_instance_->InitAsDefaultInstance();
  AgentSubTaskProcess::default_instance_->InitAsDefaultInstance();
  AgentTaskResult::default_instance_->InitAsDefaultInstance();
  AgentTaskResultReply::default_instance_->InitAsDefaultInstance();
  AgentOprCmd::default_instance_->InitAsDefaultInstance();
  AgentTaskOutput::default_instance_->InitAsDefaultInstance();
  AgentTaskOutputReply::default_instance_->InitAsDefaultInstance();
  AgentRunningTask::default_instance_->InitAsDefaultInstance();
  AgentRunningTaskReply::default_instance_->InitAsDefaultInstance();
  AgentRunningOpr::default_instance_->InitAsDefaultInstance();
  AgentRunningOprReply::default_instance_->InitAsDefaultInstance();
  InvalidMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dcmd_5fagent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dcmd_5fagent_2eproto {
  StaticDescriptorInitializer_dcmd_5fagent_2eproto() {
    protobuf_AddDesc_dcmd_5fagent_2eproto();
  }
} static_descriptor_initializer_dcmd_5fagent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AgentReport::kVersionFieldNumber;
const int AgentReport::kAgentIpsFieldNumber;
const int AgentReport::kHostnameFieldNumber;
#endif  // !_MSC_VER

AgentReport::AgentReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentReport)
}

void AgentReport::InitAsDefaultInstance() {
}

AgentReport::AgentReport(const AgentReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentReport)
}

void AgentReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentReport::~AgentReport() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentReport)
  SharedDtor();
}

void AgentReport::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void AgentReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentReport_descriptor_;
}

const AgentReport& AgentReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentReport* AgentReport::default_instance_ = NULL;

AgentReport* AgentReport::New() const {
  return new AgentReport;
}

void AgentReport::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
  }
  agent_ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_agent_ips;
        break;
      }

      // repeated bytes agent_ips = 2;
      case 2: {
        if (tag == 18) {
         parse_agent_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_agent_ips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_agent_ips;
        if (input->ExpectTag(26)) goto parse_hostname;
        break;
      }

      // optional bytes hostname = 3;
      case 3: {
        if (tag == 26) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentReport)
  return false;
#undef DO_
}

void AgentReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentReport)
  // required bytes version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version(), output);
  }

  // repeated bytes agent_ips = 2;
  for (int i = 0; i < this->agent_ips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->agent_ips(i), output);
  }

  // optional bytes hostname = 3;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->hostname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentReport)
}

::google::protobuf::uint8* AgentReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentReport)
  // required bytes version = 1;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  // repeated bytes agent_ips = 2;
  for (int i = 0; i < this->agent_ips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->agent_ips(i), target);
  }

  // optional bytes hostname = 3;
  if (has_hostname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hostname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentReport)
  return target;
}

int AgentReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

    // optional bytes hostname = 3;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hostname());
    }

  }
  // repeated bytes agent_ips = 2;
  total_size += 1 * this->agent_ips_size();
  for (int i = 0; i < this->agent_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->agent_ips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentReport::MergeFrom(const AgentReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  agent_ips_.MergeFrom(from.agent_ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentReport::CopyFrom(const AgentReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AgentReport::Swap(AgentReport* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    agent_ips_.Swap(&other->agent_ips_);
    std::swap(hostname_, other->hostname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentReport_descriptor_;
  metadata.reflection = AgentReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentReportReply::kStateFieldNumber;
const int AgentReportReply::kErrFieldNumber;
const int AgentReportReply::kHeatbeatFieldNumber;
const int AgentReportReply::kPackageSizeFieldNumber;
const int AgentReportReply::kOprQueueThresholdFieldNumber;
const int AgentReportReply::kOprOverflowThresholdFieldNumber;
#endif  // !_MSC_VER

AgentReportReply::AgentReportReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentReportReply)
}

void AgentReportReply::InitAsDefaultInstance() {
}

AgentReportReply::AgentReportReply(const AgentReportReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentReportReply)
}

void AgentReportReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heatbeat_ = 0;
  package_size_ = 0;
  opr_queue_threshold_ = 0;
  opr_overflow_threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentReportReply::~AgentReportReply() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentReportReply)
  SharedDtor();
}

void AgentReportReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void AgentReportReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentReportReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentReportReply_descriptor_;
}

const AgentReportReply& AgentReportReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentReportReply* AgentReportReply::default_instance_ = NULL;

AgentReportReply* AgentReportReply::New() const {
  return new AgentReportReply;
}

void AgentReportReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AgentReportReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(state_, opr_overflow_threshold_);
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentReportReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentReportReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_err;
        break;
      }

      // optional bytes err = 2;
      case 2: {
        if (tag == 18) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heatbeat;
        break;
      }

      // optional int32 heatbeat = 3;
      case 3: {
        if (tag == 24) {
         parse_heatbeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heatbeat_)));
          set_has_heatbeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_package_size;
        break;
      }

      // optional int32 package_size = 4;
      case 4: {
        if (tag == 32) {
         parse_package_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_size_)));
          set_has_package_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_opr_queue_threshold;
        break;
      }

      // optional int32 opr_queue_threshold = 5;
      case 5: {
        if (tag == 40) {
         parse_opr_queue_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opr_queue_threshold_)));
          set_has_opr_queue_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_opr_overflow_threshold;
        break;
      }

      // optional int32 opr_overflow_threshold = 6;
      case 6: {
        if (tag == 48) {
         parse_opr_overflow_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opr_overflow_threshold_)));
          set_has_opr_overflow_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentReportReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentReportReply)
  return false;
#undef DO_
}

void AgentReportReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentReportReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional bytes err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->err(), output);
  }

  // optional int32 heatbeat = 3;
  if (has_heatbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->heatbeat(), output);
  }

  // optional int32 package_size = 4;
  if (has_package_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->package_size(), output);
  }

  // optional int32 opr_queue_threshold = 5;
  if (has_opr_queue_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opr_queue_threshold(), output);
  }

  // optional int32 opr_overflow_threshold = 6;
  if (has_opr_overflow_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->opr_overflow_threshold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentReportReply)
}

::google::protobuf::uint8* AgentReportReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentReportReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional bytes err = 2;
  if (has_err()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->err(), target);
  }

  // optional int32 heatbeat = 3;
  if (has_heatbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->heatbeat(), target);
  }

  // optional int32 package_size = 4;
  if (has_package_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->package_size(), target);
  }

  // optional int32 opr_queue_threshold = 5;
  if (has_opr_queue_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opr_queue_threshold(), target);
  }

  // optional int32 opr_overflow_threshold = 6;
  if (has_opr_overflow_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->opr_overflow_threshold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentReportReply)
  return target;
}

int AgentReportReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional bytes err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->err());
    }

    // optional int32 heatbeat = 3;
    if (has_heatbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heatbeat());
    }

    // optional int32 package_size = 4;
    if (has_package_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_size());
    }

    // optional int32 opr_queue_threshold = 5;
    if (has_opr_queue_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opr_queue_threshold());
    }

    // optional int32 opr_overflow_threshold = 6;
    if (has_opr_overflow_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opr_overflow_threshold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentReportReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentReportReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentReportReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentReportReply::MergeFrom(const AgentReportReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_heatbeat()) {
      set_heatbeat(from.heatbeat());
    }
    if (from.has_package_size()) {
      set_package_size(from.package_size());
    }
    if (from.has_opr_queue_threshold()) {
      set_opr_queue_threshold(from.opr_queue_threshold());
    }
    if (from.has_opr_overflow_threshold()) {
      set_opr_overflow_threshold(from.opr_overflow_threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentReportReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentReportReply::CopyFrom(const AgentReportReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentReportReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AgentReportReply::Swap(AgentReportReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(err_, other->err_);
    std::swap(heatbeat_, other->heatbeat_);
    std::swap(package_size_, other->package_size_);
    std::swap(opr_queue_threshold_, other->opr_queue_threshold_);
    std::swap(opr_overflow_threshold_, other->opr_overflow_threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentReportReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentReportReply_descriptor_;
  metadata.reflection = AgentReportReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentMasterNoticeReply::kCmdFieldNumber;
const int AgentMasterNoticeReply::kSubtaskProcessFieldNumber;
#endif  // !_MSC_VER

AgentMasterNoticeReply::AgentMasterNoticeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentMasterNoticeReply)
}

void AgentMasterNoticeReply::InitAsDefaultInstance() {
}

AgentMasterNoticeReply::AgentMasterNoticeReply(const AgentMasterNoticeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentMasterNoticeReply)
}

void AgentMasterNoticeReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentMasterNoticeReply::~AgentMasterNoticeReply() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentMasterNoticeReply)
  SharedDtor();
}

void AgentMasterNoticeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgentMasterNoticeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentMasterNoticeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentMasterNoticeReply_descriptor_;
}

const AgentMasterNoticeReply& AgentMasterNoticeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentMasterNoticeReply* AgentMasterNoticeReply::default_instance_ = NULL;

AgentMasterNoticeReply* AgentMasterNoticeReply::New() const {
  return new AgentMasterNoticeReply;
}

void AgentMasterNoticeReply::Clear() {
  cmd_.Clear();
  subtask_process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentMasterNoticeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentMasterNoticeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes cmd = 1;
      case 1: {
        if (tag == 10) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cmd;
        if (input->ExpectTag(18)) goto parse_subtask_process;
        break;
      }

      // repeated .dcmd_api.SubTaskProcess subtask_process = 2;
      case 2: {
        if (tag == 18) {
         parse_subtask_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtask_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subtask_process;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentMasterNoticeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentMasterNoticeReply)
  return false;
#undef DO_
}

void AgentMasterNoticeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentMasterNoticeReply)
  // repeated bytes cmd = 1;
  for (int i = 0; i < this->cmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cmd(i), output);
  }

  // repeated .dcmd_api.SubTaskProcess subtask_process = 2;
  for (int i = 0; i < this->subtask_process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subtask_process(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentMasterNoticeReply)
}

::google::protobuf::uint8* AgentMasterNoticeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentMasterNoticeReply)
  // repeated bytes cmd = 1;
  for (int i = 0; i < this->cmd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->cmd(i), target);
  }

  // repeated .dcmd_api.SubTaskProcess subtask_process = 2;
  for (int i = 0; i < this->subtask_process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subtask_process(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentMasterNoticeReply)
  return target;
}

int AgentMasterNoticeReply::ByteSize() const {
  int total_size = 0;

  // repeated bytes cmd = 1;
  total_size += 1 * this->cmd_size();
  for (int i = 0; i < this->cmd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->cmd(i));
  }

  // repeated .dcmd_api.SubTaskProcess subtask_process = 2;
  total_size += 1 * this->subtask_process_size();
  for (int i = 0; i < this->subtask_process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtask_process(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentMasterNoticeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentMasterNoticeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentMasterNoticeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentMasterNoticeReply::MergeFrom(const AgentMasterNoticeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmd_.MergeFrom(from.cmd_);
  subtask_process_.MergeFrom(from.subtask_process_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentMasterNoticeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentMasterNoticeReply::CopyFrom(const AgentMasterNoticeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentMasterNoticeReply::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->subtask_process())) return false;
  return true;
}

void AgentMasterNoticeReply::Swap(AgentMasterNoticeReply* other) {
  if (other != this) {
    cmd_.Swap(&other->cmd_);
    subtask_process_.Swap(&other->subtask_process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentMasterNoticeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentMasterNoticeReply_descriptor_;
  metadata.reflection = AgentMasterNoticeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskCmd::kCmdFieldNumber;
const int AgentTaskCmd::kTaskCmdFieldNumber;
const int AgentTaskCmd::kCmdTypeFieldNumber;
const int AgentTaskCmd::kTaskIdFieldNumber;
const int AgentTaskCmd::kSubtaskIdFieldNumber;
const int AgentTaskCmd::kIpFieldNumber;
const int AgentTaskCmd::kAppNameFieldNumber;
const int AgentTaskCmd::kSvrNameFieldNumber;
const int AgentTaskCmd::kSvrPoolFieldNumber;
const int AgentTaskCmd::kSvrVerFieldNumber;
const int AgentTaskCmd::kSvrRepoFieldNumber;
const int AgentTaskCmd::kSvrUserFieldNumber;
const int AgentTaskCmd::kSvrEnvVerFieldNumber;
const int AgentTaskCmd::kUpdateEnvFieldNumber;
const int AgentTaskCmd::kUpdateVerFieldNumber;
const int AgentTaskCmd::kOutputProcessFieldNumber;
const int AgentTaskCmd::kScriptFieldNumber;
const int AgentTaskCmd::kSvrPathFieldNumber;
const int AgentTaskCmd::kNodeMultiPoolFieldNumber;
const int AgentTaskCmd::kTaskArgFieldNumber;
const int AgentTaskCmd::kSvrPoolArgFieldNumber;
#endif  // !_MSC_VER

AgentTaskCmd::AgentTaskCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentTaskCmd)
}

void AgentTaskCmd::InitAsDefaultInstance() {
}

AgentTaskCmd::AgentTaskCmd(const AgentTaskCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentTaskCmd)
}

void AgentTaskCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_type_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_repo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_env_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_env_ = false;
  update_ver_ = false;
  output_process_ = false;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_multi_pool_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskCmd::~AgentTaskCmd() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentTaskCmd)
  SharedDtor();
}

void AgentTaskCmd::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (task_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_cmd_;
  }
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_name_;
  }
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_pool_;
  }
  if (svr_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_ver_;
  }
  if (svr_repo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_repo_;
  }
  if (svr_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_user_;
  }
  if (svr_env_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_env_ver_;
  }
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (svr_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_path_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskCmd_descriptor_;
}

const AgentTaskCmd& AgentTaskCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentTaskCmd* AgentTaskCmd::default_instance_ = NULL;

AgentTaskCmd* AgentTaskCmd::New() const {
  return new AgentTaskCmd;
}

void AgentTaskCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AgentTaskCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmd_->clear();
      }
    }
    if (has_task_cmd()) {
      if (task_cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_cmd_->clear();
      }
    }
    cmd_type_ = 0;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtask_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
    if (has_svr_name()) {
      if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(update_env_, output_process_);
    if (has_svr_pool()) {
      if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_pool_->clear();
      }
    }
    if (has_svr_ver()) {
      if (svr_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_ver_->clear();
      }
    }
    if (has_svr_repo()) {
      if (svr_repo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_repo_->clear();
      }
    }
    if (has_svr_user()) {
      if (svr_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_user_->clear();
      }
    }
    if (has_svr_env_ver()) {
      if (svr_env_ver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_env_ver_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
    if (has_svr_path()) {
      if (svr_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_path_->clear();
      }
    }
    node_multi_pool_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  task_arg_.Clear();
  svr_pool_arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentTaskCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_cmd;
        break;
      }

      // required bytes task_cmd = 2;
      case 2: {
        if (tag == 18) {
         parse_task_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmd_type;
        break;
      }

      // required .dcmd_api.CmdType cmd_type = 3;
      case 3: {
        if (tag == 24) {
         parse_cmd_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::dcmd_api::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_task_id;
        break;
      }

      // optional bytes task_id = 4;
      case 4: {
        if (tag == 34) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_subtask_id;
        break;
      }

      // optional bytes subtask_id = 5;
      case 5: {
        if (tag == 42) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subtask_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional bytes ip = 6;
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_app_name;
        break;
      }

      // optional bytes app_name = 7;
      case 7: {
        if (tag == 58) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_svr_name;
        break;
      }

      // optional bytes svr_name = 8;
      case 8: {
        if (tag == 66) {
         parse_svr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_svr_pool;
        break;
      }

      // optional bytes svr_pool = 9;
      case 9: {
        if (tag == 74) {
         parse_svr_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_pool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_svr_ver;
        break;
      }

      // optional bytes svr_ver = 10;
      case 10: {
        if (tag == 82) {
         parse_svr_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_ver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_svr_repo;
        break;
      }

      // optional bytes svr_repo = 11;
      case 11: {
        if (tag == 90) {
         parse_svr_repo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_repo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_svr_user;
        break;
      }

      // optional bytes svr_user = 12;
      case 12: {
        if (tag == 98) {
         parse_svr_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_svr_env_ver;
        break;
      }

      // optional bytes svr_env_ver = 13;
      case 13: {
        if (tag == 106) {
         parse_svr_env_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_env_ver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_update_env;
        break;
      }

      // optional bool update_env = 14;
      case 14: {
        if (tag == 112) {
         parse_update_env:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_env_)));
          set_has_update_env();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_update_ver;
        break;
      }

      // optional bool update_ver = 15;
      case 15: {
        if (tag == 120) {
         parse_update_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_ver_)));
          set_has_update_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_output_process;
        break;
      }

      // optional bool output_process = 16;
      case 16: {
        if (tag == 128) {
         parse_output_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_process_)));
          set_has_output_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_script;
        break;
      }

      // optional bytes script = 17;
      case 17: {
        if (tag == 138) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_svr_path;
        break;
      }

      // optional bytes svr_path = 18;
      case 18: {
        if (tag == 146) {
         parse_svr_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_node_multi_pool;
        break;
      }

      // optional bool node_multi_pool = 19;
      case 19: {
        if (tag == 152) {
         parse_node_multi_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &node_multi_pool_)));
          set_has_node_multi_pool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_task_arg;
        break;
      }

      // repeated .dcmd_api.KeyValue task_arg = 20;
      case 20: {
        if (tag == 162) {
         parse_task_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_arg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_task_arg;
        if (input->ExpectTag(170)) goto parse_svr_pool_arg;
        break;
      }

      // repeated .dcmd_api.KeyValue svr_pool_arg = 21;
      case 21: {
        if (tag == 170) {
         parse_svr_pool_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_svr_pool_arg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_svr_pool_arg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentTaskCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentTaskCmd)
  return false;
#undef DO_
}

void AgentTaskCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentTaskCmd)
  // required bytes cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cmd(), output);
  }

  // required bytes task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->task_cmd(), output);
  }

  // required .dcmd_api.CmdType cmd_type = 3;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cmd_type(), output);
  }

  // optional bytes task_id = 4;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->task_id(), output);
  }

  // optional bytes subtask_id = 5;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->subtask_id(), output);
  }

  // optional bytes ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->ip(), output);
  }

  // optional bytes app_name = 7;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->app_name(), output);
  }

  // optional bytes svr_name = 8;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->svr_name(), output);
  }

  // optional bytes svr_pool = 9;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->svr_pool(), output);
  }

  // optional bytes svr_ver = 10;
  if (has_svr_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->svr_ver(), output);
  }

  // optional bytes svr_repo = 11;
  if (has_svr_repo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->svr_repo(), output);
  }

  // optional bytes svr_user = 12;
  if (has_svr_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->svr_user(), output);
  }

  // optional bytes svr_env_ver = 13;
  if (has_svr_env_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->svr_env_ver(), output);
  }

  // optional bool update_env = 14;
  if (has_update_env()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->update_env(), output);
  }

  // optional bool update_ver = 15;
  if (has_update_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->update_ver(), output);
  }

  // optional bool output_process = 16;
  if (has_output_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->output_process(), output);
  }

  // optional bytes script = 17;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->script(), output);
  }

  // optional bytes svr_path = 18;
  if (has_svr_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->svr_path(), output);
  }

  // optional bool node_multi_pool = 19;
  if (has_node_multi_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->node_multi_pool(), output);
  }

  // repeated .dcmd_api.KeyValue task_arg = 20;
  for (int i = 0; i < this->task_arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->task_arg(i), output);
  }

  // repeated .dcmd_api.KeyValue svr_pool_arg = 21;
  for (int i = 0; i < this->svr_pool_arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->svr_pool_arg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentTaskCmd)
}

::google::protobuf::uint8* AgentTaskCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentTaskCmd)
  // required bytes cmd = 1;
  if (has_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cmd(), target);
  }

  // required bytes task_cmd = 2;
  if (has_task_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->task_cmd(), target);
  }

  // required .dcmd_api.CmdType cmd_type = 3;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cmd_type(), target);
  }

  // optional bytes task_id = 4;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->task_id(), target);
  }

  // optional bytes subtask_id = 5;
  if (has_subtask_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->subtask_id(), target);
  }

  // optional bytes ip = 6;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->ip(), target);
  }

  // optional bytes app_name = 7;
  if (has_app_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->app_name(), target);
  }

  // optional bytes svr_name = 8;
  if (has_svr_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->svr_name(), target);
  }

  // optional bytes svr_pool = 9;
  if (has_svr_pool()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->svr_pool(), target);
  }

  // optional bytes svr_ver = 10;
  if (has_svr_ver()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->svr_ver(), target);
  }

  // optional bytes svr_repo = 11;
  if (has_svr_repo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->svr_repo(), target);
  }

  // optional bytes svr_user = 12;
  if (has_svr_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->svr_user(), target);
  }

  // optional bytes svr_env_ver = 13;
  if (has_svr_env_ver()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->svr_env_ver(), target);
  }

  // optional bool update_env = 14;
  if (has_update_env()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->update_env(), target);
  }

  // optional bool update_ver = 15;
  if (has_update_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->update_ver(), target);
  }

  // optional bool output_process = 16;
  if (has_output_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->output_process(), target);
  }

  // optional bytes script = 17;
  if (has_script()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->script(), target);
  }

  // optional bytes svr_path = 18;
  if (has_svr_path()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->svr_path(), target);
  }

  // optional bool node_multi_pool = 19;
  if (has_node_multi_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->node_multi_pool(), target);
  }

  // repeated .dcmd_api.KeyValue task_arg = 20;
  for (int i = 0; i < this->task_arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->task_arg(i), target);
  }

  // repeated .dcmd_api.KeyValue svr_pool_arg = 21;
  for (int i = 0; i < this->svr_pool_arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->svr_pool_arg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentTaskCmd)
  return target;
}

int AgentTaskCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

    // required bytes task_cmd = 2;
    if (has_task_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_cmd());
    }

    // required .dcmd_api.CmdType cmd_type = 3;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // optional bytes task_id = 4;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

    // optional bytes subtask_id = 5;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subtask_id());
    }

    // optional bytes ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes app_name = 7;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_name());
    }

    // optional bytes svr_name = 8;
    if (has_svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes svr_pool = 9;
    if (has_svr_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_pool());
    }

    // optional bytes svr_ver = 10;
    if (has_svr_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_ver());
    }

    // optional bytes svr_repo = 11;
    if (has_svr_repo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_repo());
    }

    // optional bytes svr_user = 12;
    if (has_svr_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_user());
    }

    // optional bytes svr_env_ver = 13;
    if (has_svr_env_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_env_ver());
    }

    // optional bool update_env = 14;
    if (has_update_env()) {
      total_size += 1 + 1;
    }

    // optional bool update_ver = 15;
    if (has_update_ver()) {
      total_size += 1 + 1;
    }

    // optional bool output_process = 16;
    if (has_output_process()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes script = 17;
    if (has_script()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

    // optional bytes svr_path = 18;
    if (has_svr_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_path());
    }

    // optional bool node_multi_pool = 19;
    if (has_node_multi_pool()) {
      total_size += 2 + 1;
    }

  }
  // repeated .dcmd_api.KeyValue task_arg = 20;
  total_size += 2 * this->task_arg_size();
  for (int i = 0; i < this->task_arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_arg(i));
  }

  // repeated .dcmd_api.KeyValue svr_pool_arg = 21;
  total_size += 2 * this->svr_pool_arg_size();
  for (int i = 0; i < this->svr_pool_arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->svr_pool_arg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskCmd::MergeFrom(const AgentTaskCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_arg_.MergeFrom(from.task_arg_);
  svr_pool_arg_.MergeFrom(from.svr_pool_arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_task_cmd()) {
      set_task_cmd(from.task_cmd());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_svr_name()) {
      set_svr_name(from.svr_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_svr_pool()) {
      set_svr_pool(from.svr_pool());
    }
    if (from.has_svr_ver()) {
      set_svr_ver(from.svr_ver());
    }
    if (from.has_svr_repo()) {
      set_svr_repo(from.svr_repo());
    }
    if (from.has_svr_user()) {
      set_svr_user(from.svr_user());
    }
    if (from.has_svr_env_ver()) {
      set_svr_env_ver(from.svr_env_ver());
    }
    if (from.has_update_env()) {
      set_update_env(from.update_env());
    }
    if (from.has_update_ver()) {
      set_update_ver(from.update_ver());
    }
    if (from.has_output_process()) {
      set_output_process(from.output_process());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_svr_path()) {
      set_svr_path(from.svr_path());
    }
    if (from.has_node_multi_pool()) {
      set_node_multi_pool(from.node_multi_pool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskCmd::CopyFrom(const AgentTaskCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->task_arg())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->svr_pool_arg())) return false;
  return true;
}

void AgentTaskCmd::Swap(AgentTaskCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(task_cmd_, other->task_cmd_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(ip_, other->ip_);
    std::swap(app_name_, other->app_name_);
    std::swap(svr_name_, other->svr_name_);
    std::swap(svr_pool_, other->svr_pool_);
    std::swap(svr_ver_, other->svr_ver_);
    std::swap(svr_repo_, other->svr_repo_);
    std::swap(svr_user_, other->svr_user_);
    std::swap(svr_env_ver_, other->svr_env_ver_);
    std::swap(update_env_, other->update_env_);
    std::swap(update_ver_, other->update_ver_);
    std::swap(output_process_, other->output_process_);
    std::swap(script_, other->script_);
    std::swap(svr_path_, other->svr_path_);
    std::swap(node_multi_pool_, other->node_multi_pool_);
    task_arg_.Swap(&other->task_arg_);
    svr_pool_arg_.Swap(&other->svr_pool_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskCmd_descriptor_;
  metadata.reflection = AgentTaskCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskCmdReply::kCmdFieldNumber;
#endif  // !_MSC_VER

AgentTaskCmdReply::AgentTaskCmdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentTaskCmdReply)
}

void AgentTaskCmdReply::InitAsDefaultInstance() {
}

AgentTaskCmdReply::AgentTaskCmdReply(const AgentTaskCmdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentTaskCmdReply)
}

void AgentTaskCmdReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskCmdReply::~AgentTaskCmdReply() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentTaskCmdReply)
  SharedDtor();
}

void AgentTaskCmdReply::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskCmdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskCmdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskCmdReply_descriptor_;
}

const AgentTaskCmdReply& AgentTaskCmdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentTaskCmdReply* AgentTaskCmdReply::default_instance_ = NULL;

AgentTaskCmdReply* AgentTaskCmdReply::New() const {
  return new AgentTaskCmdReply;
}

void AgentTaskCmdReply::Clear() {
  if (has_cmd()) {
    if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cmd_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskCmdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentTaskCmdReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentTaskCmdReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentTaskCmdReply)
  return false;
#undef DO_
}

void AgentTaskCmdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentTaskCmdReply)
  // required bytes cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentTaskCmdReply)
}

::google::protobuf::uint8* AgentTaskCmdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentTaskCmdReply)
  // required bytes cmd = 1;
  if (has_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentTaskCmdReply)
  return target;
}

int AgentTaskCmdReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskCmdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskCmdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskCmdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskCmdReply::MergeFrom(const AgentTaskCmdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskCmdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskCmdReply::CopyFrom(const AgentTaskCmdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskCmdReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AgentTaskCmdReply::Swap(AgentTaskCmdReply* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskCmdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskCmdReply_descriptor_;
  metadata.reflection = AgentTaskCmdReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentSubTaskProcess::kTaskIdFieldNumber;
const int AgentSubTaskProcess::kSubtaskIdFieldNumber;
const int AgentSubTaskProcess::kProcessFieldNumber;
#endif  // !_MSC_VER

AgentSubTaskProcess::AgentSubTaskProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentSubTaskProcess)
}

void AgentSubTaskProcess::InitAsDefaultInstance() {
}

AgentSubTaskProcess::AgentSubTaskProcess(const AgentSubTaskProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentSubTaskProcess)
}

void AgentSubTaskProcess::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentSubTaskProcess::~AgentSubTaskProcess() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentSubTaskProcess)
  SharedDtor();
}

void AgentSubTaskProcess::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (process_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete process_;
  }
  if (this != default_instance_) {
  }
}

void AgentSubTaskProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentSubTaskProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentSubTaskProcess_descriptor_;
}

const AgentSubTaskProcess& AgentSubTaskProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentSubTaskProcess* AgentSubTaskProcess::default_instance_ = NULL;

AgentSubTaskProcess* AgentSubTaskProcess::New() const {
  return new AgentSubTaskProcess;
}

void AgentSubTaskProcess::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtask_id_->clear();
      }
    }
    if (has_process()) {
      if (process_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        process_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentSubTaskProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentSubTaskProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subtask_id;
        break;
      }

      // required bytes subtask_id = 2;
      case 2: {
        if (tag == 18) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subtask_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_process;
        break;
      }

      // required bytes process = 3;
      case 3: {
        if (tag == 26) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentSubTaskProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentSubTaskProcess)
  return false;
#undef DO_
}

void AgentSubTaskProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentSubTaskProcess)
  // required bytes task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->task_id(), output);
  }

  // required bytes subtask_id = 2;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->subtask_id(), output);
  }

  // required bytes process = 3;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentSubTaskProcess)
}

::google::protobuf::uint8* AgentSubTaskProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentSubTaskProcess)
  // required bytes task_id = 1;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  // required bytes subtask_id = 2;
  if (has_subtask_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->subtask_id(), target);
  }

  // required bytes process = 3;
  if (has_process()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentSubTaskProcess)
  return target;
}

int AgentSubTaskProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

    // required bytes subtask_id = 2;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subtask_id());
    }

    // required bytes process = 3;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentSubTaskProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentSubTaskProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentSubTaskProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentSubTaskProcess::MergeFrom(const AgentSubTaskProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentSubTaskProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentSubTaskProcess::CopyFrom(const AgentSubTaskProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentSubTaskProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AgentSubTaskProcess::Swap(AgentSubTaskProcess* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentSubTaskProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentSubTaskProcess_descriptor_;
  metadata.reflection = AgentSubTaskProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskResult::kCmdFieldNumber;
const int AgentTaskResult::kTaskIdFieldNumber;
const int AgentTaskResult::kSubtaskIdFieldNumber;
const int AgentTaskResult::kSuccessFieldNumber;
const int AgentTaskResult::kErrFieldNumber;
const int AgentTaskResult::kProcessFieldNumber;
#endif  // !_MSC_VER

AgentTaskResult::AgentTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentTaskResult)
}

void AgentTaskResult::InitAsDefaultInstance() {
}

AgentTaskResult::AgentTaskResult(const AgentTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentTaskResult)
}

void AgentTaskResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskResult::~AgentTaskResult() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentTaskResult)
  SharedDtor();
}

void AgentTaskResult::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (process_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete process_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskResult_descriptor_;
}

const AgentTaskResult& AgentTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentTaskResult* AgentTaskResult::default_instance_ = NULL;

AgentTaskResult* AgentTaskResult::New() const {
  return new AgentTaskResult;
}

void AgentTaskResult::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmd_->clear();
      }
    }
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtask_id_->clear();
      }
    }
    success_ = false;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_->clear();
      }
    }
    if (has_process()) {
      if (process_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        process_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentTaskResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required bytes task_id = 2;
      case 2: {
        if (tag == 18) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subtask_id;
        break;
      }

      // required bytes subtask_id = 3;
      case 3: {
        if (tag == 26) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subtask_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // required bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_err;
        break;
      }

      // optional bytes err = 5;
      case 5: {
        if (tag == 42) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_process;
        break;
      }

      // optional bytes process = 6;
      case 6: {
        if (tag == 50) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentTaskResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentTaskResult)
  return false;
#undef DO_
}

void AgentTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentTaskResult)
  // required bytes cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cmd(), output);
  }

  // required bytes task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->task_id(), output);
  }

  // required bytes subtask_id = 3;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->subtask_id(), output);
  }

  // required bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional bytes err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->err(), output);
  }

  // optional bytes process = 6;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentTaskResult)
}

::google::protobuf::uint8* AgentTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentTaskResult)
  // required bytes cmd = 1;
  if (has_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cmd(), target);
  }

  // required bytes task_id = 2;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->task_id(), target);
  }

  // required bytes subtask_id = 3;
  if (has_subtask_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->subtask_id(), target);
  }

  // required bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional bytes err = 5;
  if (has_err()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->err(), target);
  }

  // optional bytes process = 6;
  if (has_process()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentTaskResult)
  return target;
}

int AgentTaskResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

    // required bytes task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_id());
    }

    // required bytes subtask_id = 3;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subtask_id());
    }

    // required bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional bytes err = 5;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->err());
    }

    // optional bytes process = 6;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskResult::MergeFrom(const AgentTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskResult::CopyFrom(const AgentTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AgentTaskResult::Swap(AgentTaskResult* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(success_, other->success_);
    std::swap(err_, other->err_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskResult_descriptor_;
  metadata.reflection = AgentTaskResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskResultReply::kCmdFieldNumber;
#endif  // !_MSC_VER

AgentTaskResultReply::AgentTaskResultReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentTaskResultReply)
}

void AgentTaskResultReply::InitAsDefaultInstance() {
}

AgentTaskResultReply::AgentTaskResultReply(const AgentTaskResultReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentTaskResultReply)
}

void AgentTaskResultReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskResultReply::~AgentTaskResultReply() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentTaskResultReply)
  SharedDtor();
}

void AgentTaskResultReply::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskResultReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskResultReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskResultReply_descriptor_;
}

const AgentTaskResultReply& AgentTaskResultReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentTaskResultReply* AgentTaskResultReply::default_instance_ = NULL;

AgentTaskResultReply* AgentTaskResultReply::New() const {
  return new AgentTaskResultReply;
}

void AgentTaskResultReply::Clear() {
  if (has_cmd()) {
    if (cmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cmd_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskResultReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentTaskResultReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes cmd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentTaskResultReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentTaskResultReply)
  return false;
#undef DO_
}

void AgentTaskResultReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentTaskResultReply)
  // required bytes cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentTaskResultReply)
}

::google::protobuf::uint8* AgentTaskResultReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentTaskResultReply)
  // required bytes cmd = 1;
  if (has_cmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentTaskResultReply)
  return target;
}

int AgentTaskResultReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskResultReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskResultReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskResultReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskResultReply::MergeFrom(const AgentTaskResultReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskResultReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskResultReply::CopyFrom(const AgentTaskResultReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskResultReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AgentTaskResultReply::Swap(AgentTaskResultReply* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskResultReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskResultReply_descriptor_;
  metadata.reflection = AgentTaskResultReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentOprCmd::kOprIdFieldNumber;
const int AgentOprCmd::kNameFieldNumber;
const int AgentOprCmd::kRunUserFieldNumber;
const int AgentOprCmd::kTimeoutFieldNumber;
const int AgentOprCmd::kScriptFieldNumber;
const int AgentOprCmd::kArgsFieldNumber;
#endif  // !_MSC_VER

AgentOprCmd::AgentOprCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentOprCmd)
}

void AgentOprCmd::InitAsDefaultInstance() {
}

AgentOprCmd::AgentOprCmd(const AgentOprCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentOprCmd)
}

void AgentOprCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  opr_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  run_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentOprCmd::~AgentOprCmd() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentOprCmd)
  SharedDtor();
}

void AgentOprCmd::SharedDtor() {
  if (opr_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opr_id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (run_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete run_user_;
  }
  if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete script_;
  }
  if (this != default_instance_) {
  }
}

void AgentOprCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentOprCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentOprCmd_descriptor_;
}

const AgentOprCmd& AgentOprCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentOprCmd* AgentOprCmd::default_instance_ = NULL;

AgentOprCmd* AgentOprCmd::New() const {
  return new AgentOprCmd;
}

void AgentOprCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_opr_id()) {
      if (opr_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        opr_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_run_user()) {
      if (run_user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        run_user_->clear();
      }
    }
    timeout_ = 0;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        script_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentOprCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentOprCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes opr_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_opr_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_run_user;
        break;
      }

      // required bytes run_user = 3;
      case 3: {
        if (tag == 26) {
         parse_run_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_run_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // required int32 timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_script;
        break;
      }

      // required bytes script = 5;
      case 5: {
        if (tag == 42) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_args;
        break;
      }

      // repeated .dcmd_api.KeyValue args = 6;
      case 6: {
        if (tag == 50) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentOprCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentOprCmd)
  return false;
#undef DO_
}

void AgentOprCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentOprCmd)
  // required bytes opr_id = 1;
  if (has_opr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->opr_id(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required bytes run_user = 3;
  if (has_run_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->run_user(), output);
  }

  // required int32 timeout = 4;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }

  // required bytes script = 5;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->script(), output);
  }

  // repeated .dcmd_api.KeyValue args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentOprCmd)
}

::google::protobuf::uint8* AgentOprCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentOprCmd)
  // required bytes opr_id = 1;
  if (has_opr_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->opr_id(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required bytes run_user = 3;
  if (has_run_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->run_user(), target);
  }

  // required int32 timeout = 4;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }

  // required bytes script = 5;
  if (has_script()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->script(), target);
  }

  // repeated .dcmd_api.KeyValue args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentOprCmd)
  return target;
}

int AgentOprCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes opr_id = 1;
    if (has_opr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->opr_id());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes run_user = 3;
    if (has_run_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->run_user());
    }

    // required int32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // required bytes script = 5;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }

  }
  // repeated .dcmd_api.KeyValue args = 6;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentOprCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentOprCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentOprCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentOprCmd::MergeFrom(const AgentOprCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opr_id()) {
      set_opr_id(from.opr_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_run_user()) {
      set_run_user(from.run_user());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentOprCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentOprCmd::CopyFrom(const AgentOprCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentOprCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->args())) return false;
  return true;
}

void AgentOprCmd::Swap(AgentOprCmd* other) {
  if (other != this) {
    std::swap(opr_id_, other->opr_id_);
    std::swap(name_, other->name_);
    std::swap(run_user_, other->run_user_);
    std::swap(timeout_, other->timeout_);
    std::swap(script_, other->script_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentOprCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentOprCmd_descriptor_;
  metadata.reflection = AgentOprCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskOutput::kSubtaskIdFieldNumber;
const int AgentTaskOutput::kOffsetFieldNumber;
const int AgentTaskOutput::kIpFieldNumber;
#endif  // !_MSC_VER

AgentTaskOutput::AgentTaskOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentTaskOutput)
}

void AgentTaskOutput::InitAsDefaultInstance() {
}

AgentTaskOutput::AgentTaskOutput(const AgentTaskOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentTaskOutput)
}

void AgentTaskOutput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskOutput::~AgentTaskOutput() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentTaskOutput)
  SharedDtor();
}

void AgentTaskOutput::SharedDtor() {
  if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtask_id_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskOutput_descriptor_;
}

const AgentTaskOutput& AgentTaskOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentTaskOutput* AgentTaskOutput::default_instance_ = NULL;

AgentTaskOutput* AgentTaskOutput::New() const {
  return new AgentTaskOutput;
}

void AgentTaskOutput::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtask_id_->clear();
      }
    }
    offset_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentTaskOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes subtask_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_subtask_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional bytes ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentTaskOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentTaskOutput)
  return false;
#undef DO_
}

void AgentTaskOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentTaskOutput)
  // required bytes subtask_id = 1;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->subtask_id(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // optional bytes ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentTaskOutput)
}

::google::protobuf::uint8* AgentTaskOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentTaskOutput)
  // required bytes subtask_id = 1;
  if (has_subtask_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->subtask_id(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // optional bytes ip = 3;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentTaskOutput)
  return target;
}

int AgentTaskOutput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes subtask_id = 1;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->subtask_id());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional bytes ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskOutput::MergeFrom(const AgentTaskOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskOutput::CopyFrom(const AgentTaskOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AgentTaskOutput::Swap(AgentTaskOutput* other) {
  if (other != this) {
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(offset_, other->offset_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskOutput_descriptor_;
  metadata.reflection = AgentTaskOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskOutputReply::kStateFieldNumber;
const int AgentTaskOutputReply::kResultFieldNumber;
const int AgentTaskOutputReply::kOffsetFieldNumber;
const int AgentTaskOutputReply::kErrFieldNumber;
#endif  // !_MSC_VER

AgentTaskOutputReply::AgentTaskOutputReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentTaskOutputReply)
}

void AgentTaskOutputReply::InitAsDefaultInstance() {
}

AgentTaskOutputReply::AgentTaskOutputReply(const AgentTaskOutputReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentTaskOutputReply)
}

void AgentTaskOutputReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskOutputReply::~AgentTaskOutputReply() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentTaskOutputReply)
  SharedDtor();
}

void AgentTaskOutputReply::SharedDtor() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskOutputReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskOutputReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskOutputReply_descriptor_;
}

const AgentTaskOutputReply& AgentTaskOutputReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentTaskOutputReply* AgentTaskOutputReply::default_instance_ = NULL;

AgentTaskOutputReply* AgentTaskOutputReply::New() const {
  return new AgentTaskOutputReply;
}

void AgentTaskOutputReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AgentTaskOutputReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(state_, offset_);
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskOutputReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentTaskOutputReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // required bytes result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required int32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional bytes err = 4;
      case 4: {
        if (tag == 34) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentTaskOutputReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentTaskOutputReply)
  return false;
#undef DO_
}

void AgentTaskOutputReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentTaskOutputReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // required bytes result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->result(), output);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // optional bytes err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentTaskOutputReply)
}

::google::protobuf::uint8* AgentTaskOutputReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentTaskOutputReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // required bytes result = 2;
  if (has_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result(), target);
  }

  // required int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // optional bytes err = 4;
  if (has_err()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentTaskOutputReply)
  return target;
}

int AgentTaskOutputReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required bytes result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result());
    }

    // required int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional bytes err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskOutputReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskOutputReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskOutputReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskOutputReply::MergeFrom(const AgentTaskOutputReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskOutputReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskOutputReply::CopyFrom(const AgentTaskOutputReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskOutputReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AgentTaskOutputReply::Swap(AgentTaskOutputReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(result_, other->result_);
    std::swap(offset_, other->offset_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskOutputReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskOutputReply_descriptor_;
  metadata.reflection = AgentTaskOutputReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentRunningTask::kIpFieldNumber;
const int AgentRunningTask::kAppNameFieldNumber;
const int AgentRunningTask::kSvrNameFieldNumber;
const int AgentRunningTask::kSvrPoolFieldNumber;
#endif  // !_MSC_VER

AgentRunningTask::AgentRunningTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentRunningTask)
}

void AgentRunningTask::InitAsDefaultInstance() {
}

AgentRunningTask::AgentRunningTask(const AgentRunningTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentRunningTask)
}

void AgentRunningTask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentRunningTask::~AgentRunningTask() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentRunningTask)
  SharedDtor();
}

void AgentRunningTask::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_name_;
  }
  if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_name_;
  }
  if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete svr_pool_;
  }
  if (this != default_instance_) {
  }
}

void AgentRunningTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentRunningTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentRunningTask_descriptor_;
}

const AgentRunningTask& AgentRunningTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentRunningTask* AgentRunningTask::default_instance_ = NULL;

AgentRunningTask* AgentRunningTask::New() const {
  return new AgentRunningTask;
}

void AgentRunningTask::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        app_name_->clear();
      }
    }
    if (has_svr_name()) {
      if (svr_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_name_->clear();
      }
    }
    if (has_svr_pool()) {
      if (svr_pool_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        svr_pool_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentRunningTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentRunningTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_name;
        break;
      }

      // optional bytes app_name = 2;
      case 2: {
        if (tag == 18) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_app_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_svr_name;
        break;
      }

      // optional bytes svr_name = 3;
      case 3: {
        if (tag == 26) {
         parse_svr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_svr_pool;
        break;
      }

      // optional bytes svr_pool = 4;
      case 4: {
        if (tag == 34) {
         parse_svr_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_svr_pool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentRunningTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentRunningTask)
  return false;
#undef DO_
}

void AgentRunningTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentRunningTask)
  // optional bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // optional bytes app_name = 2;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->app_name(), output);
  }

  // optional bytes svr_name = 3;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->svr_name(), output);
  }

  // optional bytes svr_pool = 4;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->svr_pool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentRunningTask)
}

::google::protobuf::uint8* AgentRunningTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentRunningTask)
  // optional bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // optional bytes app_name = 2;
  if (has_app_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->app_name(), target);
  }

  // optional bytes svr_name = 3;
  if (has_svr_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->svr_name(), target);
  }

  // optional bytes svr_pool = 4;
  if (has_svr_pool()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->svr_pool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentRunningTask)
  return target;
}

int AgentRunningTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // optional bytes app_name = 2;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->app_name());
    }

    // optional bytes svr_name = 3;
    if (has_svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_name());
    }

    // optional bytes svr_pool = 4;
    if (has_svr_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->svr_pool());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentRunningTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentRunningTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentRunningTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentRunningTask::MergeFrom(const AgentRunningTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_svr_name()) {
      set_svr_name(from.svr_name());
    }
    if (from.has_svr_pool()) {
      set_svr_pool(from.svr_pool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentRunningTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentRunningTask::CopyFrom(const AgentRunningTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentRunningTask::IsInitialized() const {

  return true;
}

void AgentRunningTask::Swap(AgentRunningTask* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(app_name_, other->app_name_);
    std::swap(svr_name_, other->svr_name_);
    std::swap(svr_pool_, other->svr_pool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentRunningTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentRunningTask_descriptor_;
  metadata.reflection = AgentRunningTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentRunningTaskReply::kStateFieldNumber;
const int AgentRunningTaskReply::kResultFieldNumber;
const int AgentRunningTaskReply::kErrFieldNumber;
#endif  // !_MSC_VER

AgentRunningTaskReply::AgentRunningTaskReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentRunningTaskReply)
}

void AgentRunningTaskReply::InitAsDefaultInstance() {
}

AgentRunningTaskReply::AgentRunningTaskReply(const AgentRunningTaskReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentRunningTaskReply)
}

void AgentRunningTaskReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentRunningTaskReply::~AgentRunningTaskReply() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentRunningTaskReply)
  SharedDtor();
}

void AgentRunningTaskReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void AgentRunningTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentRunningTaskReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentRunningTaskReply_descriptor_;
}

const AgentRunningTaskReply& AgentRunningTaskReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentRunningTaskReply* AgentRunningTaskReply::default_instance_ = NULL;

AgentRunningTaskReply* AgentRunningTaskReply::New() const {
  return new AgentRunningTaskReply;
}

void AgentRunningTaskReply::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentRunningTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentRunningTaskReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .dcmd_api.SubTaskInfo result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }

      // optional bytes err = 3;
      case 3: {
        if (tag == 26) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentRunningTaskReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentRunningTaskReply)
  return false;
#undef DO_
}

void AgentRunningTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentRunningTaskReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // repeated .dcmd_api.SubTaskInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  // optional bytes err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentRunningTaskReply)
}

::google::protobuf::uint8* AgentRunningTaskReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentRunningTaskReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // repeated .dcmd_api.SubTaskInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  // optional bytes err = 3;
  if (has_err()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentRunningTaskReply)
  return target;
}

int AgentRunningTaskReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional bytes err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->err());
    }

  }
  // repeated .dcmd_api.SubTaskInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentRunningTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentRunningTaskReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentRunningTaskReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentRunningTaskReply::MergeFrom(const AgentRunningTaskReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentRunningTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentRunningTaskReply::CopyFrom(const AgentRunningTaskReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentRunningTaskReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void AgentRunningTaskReply::Swap(AgentRunningTaskReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentRunningTaskReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentRunningTaskReply_descriptor_;
  metadata.reflection = AgentRunningTaskReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentRunningOpr::kIpFieldNumber;
#endif  // !_MSC_VER

AgentRunningOpr::AgentRunningOpr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentRunningOpr)
}

void AgentRunningOpr::InitAsDefaultInstance() {
}

AgentRunningOpr::AgentRunningOpr(const AgentRunningOpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentRunningOpr)
}

void AgentRunningOpr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentRunningOpr::~AgentRunningOpr() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentRunningOpr)
  SharedDtor();
}

void AgentRunningOpr::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AgentRunningOpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentRunningOpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentRunningOpr_descriptor_;
}

const AgentRunningOpr& AgentRunningOpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentRunningOpr* AgentRunningOpr::default_instance_ = NULL;

AgentRunningOpr* AgentRunningOpr::New() const {
  return new AgentRunningOpr;
}

void AgentRunningOpr::Clear() {
  if (has_ip()) {
    if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      ip_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentRunningOpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentRunningOpr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentRunningOpr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentRunningOpr)
  return false;
#undef DO_
}

void AgentRunningOpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentRunningOpr)
  // optional bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentRunningOpr)
}

::google::protobuf::uint8* AgentRunningOpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentRunningOpr)
  // optional bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentRunningOpr)
  return target;
}

int AgentRunningOpr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentRunningOpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentRunningOpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentRunningOpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentRunningOpr::MergeFrom(const AgentRunningOpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentRunningOpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentRunningOpr::CopyFrom(const AgentRunningOpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentRunningOpr::IsInitialized() const {

  return true;
}

void AgentRunningOpr::Swap(AgentRunningOpr* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentRunningOpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentRunningOpr_descriptor_;
  metadata.reflection = AgentRunningOpr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentRunningOprReply::kStateFieldNumber;
const int AgentRunningOprReply::kResultFieldNumber;
const int AgentRunningOprReply::kErrFieldNumber;
#endif  // !_MSC_VER

AgentRunningOprReply::AgentRunningOprReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.AgentRunningOprReply)
}

void AgentRunningOprReply::InitAsDefaultInstance() {
}

AgentRunningOprReply::AgentRunningOprReply(const AgentRunningOprReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.AgentRunningOprReply)
}

void AgentRunningOprReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentRunningOprReply::~AgentRunningOprReply() {
  // @@protoc_insertion_point(destructor:dcmd_api.AgentRunningOprReply)
  SharedDtor();
}

void AgentRunningOprReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void AgentRunningOprReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentRunningOprReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentRunningOprReply_descriptor_;
}

const AgentRunningOprReply& AgentRunningOprReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

AgentRunningOprReply* AgentRunningOprReply::default_instance_ = NULL;

AgentRunningOprReply* AgentRunningOprReply::New() const {
  return new AgentRunningOprReply;
}

void AgentRunningOprReply::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentRunningOprReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.AgentRunningOprReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .dcmd_api.OprInfo result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }

      // optional bytes err = 3;
      case 3: {
        if (tag == 26) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.AgentRunningOprReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.AgentRunningOprReply)
  return false;
#undef DO_
}

void AgentRunningOprReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.AgentRunningOprReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // repeated .dcmd_api.OprInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  // optional bytes err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.AgentRunningOprReply)
}

::google::protobuf::uint8* AgentRunningOprReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.AgentRunningOprReply)
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // repeated .dcmd_api.OprInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  // optional bytes err = 3;
  if (has_err()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.AgentRunningOprReply)
  return target;
}

int AgentRunningOprReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional bytes err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->err());
    }

  }
  // repeated .dcmd_api.OprInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentRunningOprReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentRunningOprReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentRunningOprReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentRunningOprReply::MergeFrom(const AgentRunningOprReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentRunningOprReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentRunningOprReply::CopyFrom(const AgentRunningOprReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentRunningOprReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void AgentRunningOprReply::Swap(AgentRunningOprReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentRunningOprReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentRunningOprReply_descriptor_;
  metadata.reflection = AgentRunningOprReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvalidMsg::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

InvalidMsg::InvalidMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcmd_api.InvalidMsg)
}

void InvalidMsg::InitAsDefaultInstance() {
}

InvalidMsg::InvalidMsg(const InvalidMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcmd_api.InvalidMsg)
}

void InvalidMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvalidMsg::~InvalidMsg() {
  // @@protoc_insertion_point(destructor:dcmd_api.InvalidMsg)
  SharedDtor();
}

void InvalidMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvalidMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvalidMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvalidMsg_descriptor_;
}

const InvalidMsg& InvalidMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fagent_2eproto();
  return *default_instance_;
}

InvalidMsg* InvalidMsg::default_instance_ = NULL;

InvalidMsg* InvalidMsg::New() const {
  return new InvalidMsg;
}

void InvalidMsg::Clear() {
  msg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvalidMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcmd_api.InvalidMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcmd_api.InvalidMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcmd_api.InvalidMsg)
  return false;
#undef DO_
}

void InvalidMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcmd_api.InvalidMsg)
  // required int32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcmd_api.InvalidMsg)
}

::google::protobuf::uint8* InvalidMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcmd_api.InvalidMsg)
  // required int32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcmd_api.InvalidMsg)
  return target;
}

int InvalidMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvalidMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvalidMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvalidMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvalidMsg::MergeFrom(const InvalidMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvalidMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidMsg::CopyFrom(const InvalidMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InvalidMsg::Swap(InvalidMsg* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvalidMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvalidMsg_descriptor_;
  metadata.reflection = InvalidMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcmd_api

// @@protoc_insertion_point(global_scope)
